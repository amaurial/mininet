<scope doc="A multi-producer, multi-consumer queue.&#xA;" ilk="blob" lang="Python" name="queue">
      <scope classrefs="Exception" doc="Exception raised by Queue.get(block=0)/get_nowait().&#xA;" ilk="class" line="13" lineend="15" name="Empty" />
      <scope classrefs="Exception" doc="Exception raised by Queue.put(block=0)/put_nowait().&#xA;" ilk="class" line="17" lineend="19" name="Full" />
      <scope classrefs="Queue" doc="Variant of Queue that retrieves most recently added entries first.&#xA;" ilk="class" line="248" lineend="261" name="LifoQueue">
        <scope ilk="function" line="260" lineend="261" name="_get" returns="self.queue.pop()" signature="_get(self)">
          <variable citdl="LifoQueue" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="257" lineend="258" name="_put" signature="_put(self, item)">
          <variable ilk="argument" name="item" />
          <variable citdl="LifoQueue" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="254" lineend="255" name="_qsize" returns="LifoQueue._qsize.len()" signature="_qsize(self, len=&lt;built-in function len&gt;)">
          <variable citdl="LifoQueue" ilk="argument" name="self" />
          <variable citdl="len" ilk="argument" name="len" />
        </scope>
        <scope ilk="function" line="251" lineend="252" name="_init" signature="_init(self, maxsize)">
          <variable citdl="LifoQueue" ilk="argument" name="self" />
          <variable ilk="argument" name="maxsize" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="252" name="queue" />
      </scope>
      <scope classrefs="Queue" doc="Variant of Queue that retrieves open entries in priority order (lowest first).&#xA;Entries are typically tuples of the form:  (priority number, data)." ilk="class" line="229" lineend="245" name="PriorityQueue">
        <scope ilk="function" line="244" lineend="245" name="_get" returns="PriorityQueue._get.heappop()" signature="_get(self, heappop=&lt;built-in function heappop&gt;)">
          <variable citdl="heapq.heappop" ilk="argument" name="heappop" />
          <variable citdl="PriorityQueue" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="241" lineend="242" name="_put" signature="_put(self, item, heappush=&lt;built-in function heappush&gt;)">
          <variable ilk="argument" name="item" />
          <variable citdl="PriorityQueue" ilk="argument" name="self" />
          <variable citdl="heapq.heappush" ilk="argument" name="heappush" />
        </scope>
        <scope ilk="function" line="238" lineend="239" name="_qsize" returns="PriorityQueue._qsize.len()" signature="_qsize(self, len=&lt;built-in function len&gt;)">
          <variable citdl="PriorityQueue" ilk="argument" name="self" />
          <variable citdl="len" ilk="argument" name="len" />
        </scope>
        <scope ilk="function" line="235" lineend="236" name="_init" signature="_init(self, maxsize)">
          <variable citdl="PriorityQueue" ilk="argument" name="self" />
          <variable ilk="argument" name="maxsize" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="236" name="queue" />
      </scope>
      <scope classrefs="object" doc="Create a queue object with a given maximum size.&#xA;If maxsize is &lt;= 0, the queue size is infinite." ilk="class" line="21" lineend="226" name="Queue">
        <scope doc="Return the approximate size of the queue (not reliable!)." ilk="function" line="86" lineend="91" name="qsize" returns="self._qsize()" signature="qsize(self)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="self._qsize()" line="89" name="n" />
        </scope>
        <scope doc="Remove and return an item from the queue." ilk="function" line="167" lineend="199" name="get" returns="self._get()" signature="get(self, block=True, timeout=None)">
          <variable citdl="self._get()" line="195" name="item" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="_time()" line="189" name="endtime" />
          <variable citdl="_time()" line="191" name="remaining" />
          <variable citdl="True" ilk="argument" name="block" />
        </scope>
        <scope doc="Indicate that a formerly enqueued task is complete." ilk="function" line="45" lineend="68" name="task_done" signature="task_done(self)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="int" line="61" name="unfinished" />
        </scope>
        <scope doc="# Initialize the queue representation" ilk="function" line="214" lineend="215" name="_init" signature="_init(self, maxsize)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable ilk="argument" name="maxsize" />
        </scope>
        <scope doc="# Get an item from the queue" ilk="function" line="225" lineend="226" name="_get" returns="self.queue.popleft()" signature="_get(self)">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <scope doc="Return True if the queue is full, False otherwise (not&#xA;reliable!)." ilk="function" line="110" lineend="122" name="full" returns="bool" signature="full(self)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="bool" line="120" name="n" />
        </scope>
        <scope doc="Put an item into the queue." ilk="function" line="124" lineend="157" name="put" signature="put(self, item, block=True, timeout=None)">
          <variable ilk="argument" name="item" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="_time()" line="147" name="endtime" />
          <variable citdl="_time()" line="149" name="remaining" />
          <variable citdl="True" ilk="argument" name="block" />
        </scope>
        <scope ilk="function" line="26" lineend="43" name="__init__" signature="__init__(self, maxsize=0)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="maxsize" />
        </scope>
        <scope doc="Blocks until all items in the Queue have been gotten and&#xA;processed." ilk="function" line="70" lineend="84" name="join" signature="join(self)">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <scope doc="# Put a new item in the queue" ilk="function" line="221" lineend="222" name="_put" signature="_put(self, item)">
          <variable ilk="argument" name="item" />
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <scope doc="Remove and return an item from the queue without blocking." ilk="function" line="201" lineend="207" name="get_nowait" returns="Queue.get()" signature="get_nowait(self)">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <scope doc="Put an item into the queue without blocking." ilk="function" line="159" lineend="165" name="put_nowait" returns="Queue.put()" signature="put_nowait(self, item)">
          <variable ilk="argument" name="item" />
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="217" lineend="218" name="_qsize" returns="Queue._qsize.len()" signature="_qsize(self, len=&lt;built-in function len&gt;)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="len" ilk="argument" name="len" />
        </scope>
        <scope doc="Return True if the queue is empty, False otherwise (not&#xA;reliable!)." ilk="function" line="93" lineend="108" name="empty" returns="bool" signature="empty(self)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="bool" line="106" name="n" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="43" name="unfinished_tasks" />
        <variable attributes="__instancevar__" citdl="deque()" line="215" name="queue" />
        <variable attributes="__instancevar__" citdl="int" line="27" name="maxsize" />
        <variable attributes="__instancevar__" citdl="_threading.Condition()" line="42" name="all_tasks_done" />
        <variable attributes="__instancevar__" citdl="_threading.Lock()" line="33" name="mutex" />
        <variable attributes="__instancevar__" citdl="_threading.Condition()" line="39" name="not_full" />
        <variable attributes="__instancevar__" citdl="_threading.Condition()" line="36" name="not_empty" />
      </scope>
      <variable citdl="list" line="11" name="__all__" />
      <import module="_threading" />
      <scope classrefs="object" doc="deque(iterable[, maxlen]) --&gt; deque object&#xA;Build an ordered collection with optimized access from its endpoints." ilk="class" name="deque">
        <scope doc="Add an element to the left side of the deque." ilk="function" name="appendleft" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="Remove and return the rightmost element." ilk="function" name="pop" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="D.remove(value)" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope ilk="function" name="__init__" />
        <scope doc="Extend the left side of the deque with elements from the&#xA;iterable" ilk="function" name="extendleft" />
        <scope doc="Add an element to the right side of the deque." ilk="function" name="append" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Remove and return the leftmost element." ilk="function" name="popleft" />
        <scope doc="x.__setitem__(i, y) &lt;==&gt; x[i]=y" ilk="function" name="__setitem__" signature="x.__setitem__(i, y) &lt;==&gt; x[i]=y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="D.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="D.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="x.__delitem__(y) &lt;==&gt; del x[y]" ilk="function" name="__delitem__" signature="x.__delitem__(y) &lt;==&gt; del x[y]" />
        <scope doc="Extend the right side of the deque with elements from the&#xA;iterable" ilk="function" name="extend" />
        <scope doc="Rotate the deque n steps to the right (default n=1)." ilk="function" name="rotate" />
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="D.reverse()" />
        <scope doc="Remove all elements from the deque." ilk="function" name="clear" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__iadd__(y) &lt;==&gt; x+=y" ilk="function" name="__iadd__" signature="x.__iadd__(y) &lt;==&gt; x+=y" />
        <scope doc="return a reverse iterator over the deque" ilk="function" name="__reversed__" signature="D.__reversed__()" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="__copy__" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <import module="heapq" />
    </scope>
    