<scope doc="Utilities to support packages.&#xA;" ilk="blob" lang="Python" name="pkgutil">
      <scope classrefs="object" doc="PEP 302 Importer that wraps Python&apos;s &quot;classic&quot; import algorithm&#xA;ImpImporter(dirname) produces a PEP 302 importer that searches that directory.  ImpImporter(None) produces a PEP 302 importer that searches the current sys.path, plus any modules that are frozen or built-in.  Note that ImpImporter does not currently support being used by placement on sys.meta_path." ilk="class" line="159" lineend="218" name="ImpImporter">
        <scope ilk="function" line="188" lineend="218" name="iter_modules" signature="iter_modules(self, prefix=&apos;&apos;)">
          <variable citdl="inspect.getmodulename()" line="199" name="modname" />
          <variable citdl="ImpImporter" ilk="argument" name="self" />
          <variable citdl="os.listdir()" line="195" name="filenames" />
          <variable citdl="str" ilk="argument" name="prefix" />
          <variable citdl="inspect.getmodulename()" line="209" name="subname" />
          <variable citdl="os.path.join()" line="203" name="path" />
          <variable citdl="True" line="204" name="ispkg" />
          <variable citdl="dict" line="192" name="yielded" />
        </scope>
        <scope ilk="function" line="173" lineend="186" name="find_module" returns="ImpLoader()" signature="find_module(self, fullname, path=None)">
          <variable line="183" name="etc" />
          <variable line="175" name="subname" />
          <variable line="183" name="file" />
          <variable citdl="list" ilk="argument" name="path" />
          <variable citdl="ImpImporter" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable line="183" name="filename" />
        </scope>
        <scope ilk="function" line="170" lineend="171" name="__init__" signature="__init__(self, path=None)">
          <variable ilk="argument" name="path" />
          <variable citdl="ImpImporter" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="171" name="path" />
      </scope>
      <scope classrefs="object" doc="PEP 302 Loader that wraps Python&apos;s &quot;classic&quot; import algorithm&#xA;" ilk="class" line="221" lineend="314" name="ImpLoader">
        <scope ilk="function" line="232" lineend="241" name="load_module" returns="imp.load_module()" signature="load_module(self, fullname)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable citdl="imp.load_module()" line="235" name="mod" />
        </scope>
        <scope ilk="function" line="284" lineend="301" name="get_source" returns="f.read()" signature="get_source(self, fullname=None)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable line="287" name="mod_type" />
          <variable citdl="_fix_name()" ilk="argument" name="fullname" />
          <variable citdl="open()" line="296" name="f" />
        </scope>
        <scope ilk="function" line="247" lineend="253" name="_reopen" signature="_reopen(self)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable line="249" name="mod_type" />
        </scope>
        <scope ilk="function" line="243" lineend="245" name="get_data" returns="file.read()" signature="get_data(self, pathname)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="pathname" />
        </scope>
        <scope ilk="function" line="255" lineend="261" name="_fix_name" signature="_fix_name(self, fullname)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
        </scope>
        <scope ilk="function" line="304" lineend="305" name="_get_delegate" signature="_get_delegate(self)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="263" lineend="265" name="is_package" returns="bool" signature="is_package(self, fullname)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable citdl="_fix_name()" ilk="argument" name="fullname" />
        </scope>
        <scope ilk="function" line="267" lineend="282" name="get_code" returns="compile()" signature="get_code(self, fullname=None)">
          <variable citdl="self.get_source()" line="272" name="source" />
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable line="270" name="mod_type" />
          <variable citdl="_fix_name()" ilk="argument" name="fullname" />
        </scope>
        <scope ilk="function" line="307" lineend="314" name="get_filename" signature="get_filename(self, fullname=None)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable line="309" name="mod_type" />
          <variable citdl="_fix_name()" ilk="argument" name="fullname" />
        </scope>
        <scope ilk="function" line="226" lineend="230" name="__init__" signature="__init__(self, fullname, file, filename, etc)">
          <variable ilk="argument" name="etc" />
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable ilk="argument" name="file" />
          <variable ilk="argument" name="filename" />
        </scope>
        <variable citdl="compile()" line="224" name="code" />
        <variable attributes="__instancevar__" citdl="self.file.read()" line="291" name="source" />
        <variable attributes="__instancevar__" line="228" name="filename" />
        <variable attributes="__instancevar__" line="230" name="etc" />
        <variable attributes="__instancevar__" citdl="open()" line="227" name="file" />
        <variable attributes="__instancevar__" line="229" name="fullname" />
      </scope>
      <scope classrefs="object" doc="module(name[, doc])&#xA;Create a module object. The name must be a string; the optional doc argument can have any type." ilk="class" name="ModuleType">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope ilk="function" name="__init__" />
      </scope>
      <variable citdl="list" line="9" name="__all__" />
      <scope doc="Extend a package&apos;s path." ilk="function" line="471" lineend="541" name="extend_path" returns="list" signature="extend_path(path, name)">
        <variable citdl="str" line="511" name="init_py" />
        <variable citdl="os.path.join()" line="521" name="initfile" />
        <variable ilk="argument" name="name" />
        <variable citdl="open()" line="529" name="f" />
        <variable citdl="os.path.join()" line="526" name="pkgfile" />
        <variable citdl="os.path.join()" line="509" name="pname" />
        <variable citdl="os.path.join()" line="518" name="subdir" />
        <variable citdl="list" ilk="argument" name="path" />
        <variable citdl="line.rstrip()" line="535" name="line" />
        <variable citdl="str" line="510" name="sname_pkg" />
      </scope>
      <scope doc="Find a PEP 302 &quot;loader&quot; object for fullname" ilk="function" line="455" lineend="468" name="find_loader" returns="importer.find_module()" signature="find_loader(fullname)">
        <variable ilk="argument" name="fullname" />
        <variable citdl="importer.find_module()" line="464" name="loader" />
      </scope>
      <scope doc="Get a resource from a package." ilk="function" line="543" lineend="578" name="get_data" returns="loader.get_data()" signature="get_data(package, resource)">
        <variable citdl="os.path.join()" line="577" name="resource_name" />
        <variable ilk="argument" name="resource" />
        <variable ilk="argument" name="package" />
        <variable citdl="loader.load_module()" line="568" name="mod" />
        <variable citdl="resource.split()" line="575" name="parts" />
        <variable citdl="get_loader()" line="565" name="loader" />
      </scope>
      <scope doc="Retrieve a PEP 302 importer for the given path item" ilk="function" line="355" lineend="386" name="get_importer" returns="path_hook()" signature="get_importer(path_item)">
        <variable citdl="path_hook()" line="369" name="importer" />
        <variable ilk="argument" name="path_item" />
      </scope>
      <scope doc="Get a PEP 302 &quot;loader&quot; object for module_or_name" ilk="function" line="430" lineend="453" name="get_loader" returns="getattr()" signature="get_loader(module_or_name)">
        <variable ilk="argument" name="module_or_name" />
        <variable citdl="module.__name__" line="450" name="fullname" />
        <variable line="446" name="module" />
        <variable citdl="getattr()" line="447" name="loader" />
      </scope>
      <import module="imp" />
      <scope ilk="function" line="151" lineend="154" name="iter_importer_modules" returns="list" signature="iter_importer_modules(*args, **kw)">
        <variable ilk="argument" name="importer" />
        <variable citdl="str" ilk="argument" name="prefix" />
      </scope>
      <scope doc="Yield PEP 302 importers for the given module name" ilk="function" line="389" lineend="428" name="iter_importers" signature="iter_importers(fullname=&apos;&apos;)">
        <variable citdl="getattr()" line="420" name="path" />
        <variable citdl="str" ilk="argument" name="fullname" />
        <variable citdl="str.join()" line="417" name="pkg" />
      </scope>
      <scope doc="or, if path is None, all top-level modules on sys.path." ilk="function" line="126" lineend="147" name="iter_modules" signature="Yields (module_loader, name, ispkg) for all submodules on path,">
        <variable ilk="argument" name="path" />
        <variable citdl="str" ilk="argument" name="prefix" />
        <variable citdl="iter_importers()" line="138" name="importers" />
        <variable citdl="dict" line="142" name="yielded" />
      </scope>
      <scope ilk="function" line="321" lineend="347" name="iter_zipimport_modules" signature="iter_zipimport_modules(importer, prefix=&apos;&apos;)">
        <variable citdl="sorted()" line="322" name="dirlist" />
        <variable attributes="protected" citdl="importer.prefix" line="323" name="_prefix" />
        <variable ilk="argument" name="importer" />
        <variable citdl="dict" line="325" name="yielded" />
        <variable citdl="str" ilk="argument" name="prefix" />
        <variable citdl="inspect.getmodulename()" line="341" name="modname" />
        <variable citdl="len()" line="324" name="plen" />
        <variable line="331" name="fn" />
      </scope>
      <import module="os" />
      <scope ilk="function" line="15" lineend="25" name="read_code" returns="marshal.load()" signature="read_code(stream)">
        <variable citdl="stream.read()" line="20" name="magic" />
        <variable ilk="argument" name="stream" />
      </scope>
      <scope doc="Make a trivial single-dispatch generic function" ilk="function" line="28" lineend="65" name="simplegeneric" returns="simplegeneric.wrapper" signature="simplegeneric(func)">
        <scope ilk="function" line="56" lineend="60" name="register" signature="register(typ, func=None)">
          <variable ilk="argument" name="typ" />
          <variable ilk="argument" name="func" />
        </scope>
        <variable citdl="dict" line="30" name="registry" />
        <variable ilk="argument" name="func" />
        <scope ilk="function" line="31" lineend="50" name="wrapper" returns="simplegeneric.func()" signature="wrapper(*args, **kw)">
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable line="32" name="ob" />
          <variable citdl="list" line="38" name="mro" />
          <scope classrefs="ob.__class__ object" ilk="class" line="41" lineend="42" name="cls" />
          <variable citdl="func.__name__" line="52" name="__name__" />
          <variable citdl="dict" line="62" name="__dict__" />
          <variable citdl="func.__doc__" line="63" name="__doc__" />
          <variable citdl="simplegeneric.register" line="64" name="register" />
        </scope>
      </scope>
      <import module="sys" />
      <scope doc="on path, or, if path is None, all accessible modules." ilk="function" line="68" lineend="123" name="walk_packages" signature="Yields (module_loader, name, ispkg) for all modules recursively">
        <variable ilk="argument" name="onerror" />
        <variable citdl="list" ilk="argument" name="path" />
        <variable citdl="str" ilk="argument" name="prefix" />
        <scope ilk="function" line="97" lineend="100" name="seen" returns="bool" signature="seen(p, m={})">
          <variable ilk="argument" name="p" />
          <variable citdl="dict" ilk="argument" name="m" />
        </scope>
      </scope>
      <import module="zipimport" />
      <scope classrefs="object" doc="zipimporter(archivepath) -&gt; zipimporter object&#xA;Create a new zipimporter instance. &apos;archivepath&apos; must be a path to a zipfile, or to a specific path inside a zipfile. For example, it can be &apos;/tmp/myimport.zip&apos;, or &apos;/tmp/myimport.zip/mydirectory&apos;, if mydirectory is a valid directory inside the archive.  &apos;ZipImportError is raised if &apos;archivepath&apos; doesn&apos;t point to a valid Zip archive.  The &apos;archive&apos; attribute of zipimporter objects contains the name of the zipfile targeted." ilk="class" name="zipimporter">
        <scope doc="Return the source code for the specified module." ilk="function" name="get_source" signature="get_source(fullname) -&gt; source string." />
        <scope doc="Search for a module specified by &apos;fullname&apos;." ilk="function" name="find_module" signature="find_module(fullname, path=None) -&gt; self or None." />
        <scope doc="Return the data associated with &apos;pathname&apos;." ilk="function" name="get_data" returns="str" signature="get_data(pathname) -&gt; string with file data." />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="Load the module specified by &apos;fullname&apos;." ilk="function" name="load_module" signature="load_module(fullname) -&gt; module." />
        <scope doc="Return the filename for the specified module." ilk="function" name="get_filename" signature="get_filename(fullname) -&gt; filename string." />
        <scope doc="Return True if the module specified by fullname is a&#xA;package." ilk="function" name="is_package" signature="is_package(fullname) -&gt; bool." />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="Return the code object for the specified module." ilk="function" name="get_code" returns="code" signature="get_code(fullname) -&gt; code object." />
        <scope ilk="function" name="__init__" />
      </scope>
    </scope>
    