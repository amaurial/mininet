<scope doc="# Module providing the `Pool` class for managing a process pool&#xA;# # multiprocessing/pool.py # # Copyright (c) 2006-2008, R Oudkerk # All rights reserved. # # Redistribution and use in source and binary forms, with or without # modification, are permitted provided that the following conditions # are met: #" ilk="blob" lang="Python" name="multiprocessing.pool">
      <scope classrefs="object" doc="&#xA;" ilk="class" line="519" lineend="566" name="ApplyResult">
        <scope ilk="function" line="530" lineend="531" name="ready" returns="bool" signature="ready(self)">
          <variable citdl="ApplyResult" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="545" lineend="552" name="get" returns="self._value" signature="get(self, timeout=None)">
          <variable citdl="ApplyResult" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
        </scope>
        <scope ilk="function" line="533" lineend="535" name="successful" returns="self._success" signature="successful(self)">
          <variable citdl="ApplyResult" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="554" lineend="566" name="_set" signature="_set(self, i, obj)">
          <variable ilk="argument" name="i" />
          <variable citdl="ApplyResult" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
        </scope>
        <scope ilk="function" line="521" lineend="528" name="__init__" signature="__init__(self, cache, callback, error_callback)">
          <variable ilk="argument" name="callback" />
          <variable citdl="ApplyResult" ilk="argument" name="self" />
          <variable ilk="argument" name="cache" />
          <variable ilk="argument" name="error_callback" />
        </scope>
        <scope ilk="function" line="537" lineend="543" name="wait" signature="wait(self, timeout=None)">
          <variable citdl="ApplyResult" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
        </scope>
        <variable attributes="protected __instancevar__" line="526" name="_callback" />
        <variable attributes="protected __instancevar__" citdl="True" line="525" name="_ready" />
        <variable attributes="protected __instancevar__" citdl="next()" line="523" name="_job" />
        <variable attributes="protected __instancevar__" citdl="threading.Condition()" line="522" name="_cond" />
        <variable attributes="protected __instancevar__" line="527" name="_error_callback" />
        <variable attributes="protected __instancevar__" line="524" name="_cache" />
      </scope>
      <variable citdl="int" line="55" name="CLOSE" />
      <scope classrefs="object" doc="Class which supports object finalization using weakrefs&#xA;" ilk="class" name="Finalize">
        <scope doc="Run the callback unless it has already been called or&#xA;cancelled" ilk="function" name="__call__" signature="__call__(self, wr=None)" />
        <scope ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return whether this finalizer is still waiting to invoke&#xA;callback" ilk="function" name="still_active" signature="still_active(self)" />
        <scope doc="Cancel finalization of the object" ilk="function" name="cancel" signature="cancel(self)" />
        <scope ilk="function" name="__init__" signature="__init__(self, obj, callback, args=(), kwargs=None, exitpriority=None)" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" line="618" lineend="685" name="IMapIterator">
        <scope ilk="function" line="677" lineend="685" name="_set_length" signature="_set_length(self, length)">
          <variable citdl="IMapIterator" ilk="argument" name="self" />
          <variable ilk="argument" name="length" />
        </scope>
        <scope ilk="function" line="658" lineend="675" name="_set" signature="_set(self, i, obj)">
          <variable ilk="argument" name="i" />
          <variable citdl="IMapIterator" ilk="argument" name="self" />
          <variable citdl="self._unsorted.pop()" ilk="argument" name="obj" />
        </scope>
        <scope ilk="function" line="656" name="__next__" signature="__next__(self, timeout=None)" />
        <scope ilk="function" line="630" lineend="631" name="__iter__" returns="IMapIterator" signature="__iter__(self)">
          <variable citdl="IMapIterator" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="620" lineend="628" name="__init__" signature="__init__(self, cache)">
          <variable citdl="IMapIterator" ilk="argument" name="self" />
          <variable ilk="argument" name="cache" />
        </scope>
        <scope ilk="function" line="633" lineend="654" name="next" returns="value" signature="next(self, timeout=None)">
          <variable citdl="self._items.popleft()" line="637" name="item" />
          <variable citdl="IMapIterator" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="625" name="_index" />
        <variable attributes="protected __instancevar__" citdl="dict" line="627" name="_unsorted" />
        <variable attributes="protected __instancevar__" line="626" name="_length" />
        <variable attributes="protected __instancevar__" citdl="threading.Condition()" line="621" name="_cond" />
        <variable attributes="protected __instancevar__" citdl="next()" line="622" name="_job" />
        <variable attributes="protected __instancevar__" line="623" name="_cache" />
        <variable attributes="protected __instancevar__" citdl="collections.deque()" line="624" name="_items" />
      </scope>
      <scope classrefs="IMapIterator" doc="&#xA;" ilk="class" line="691" lineend="702" name="IMapUnorderedIterator">
        <scope ilk="function" line="693" lineend="702" name="_set" signature="_set(self, i, obj)">
          <variable ilk="argument" name="i" />
          <variable citdl="IMapUnorderedIterator" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
        </scope>
      </scope>
      <scope classrefs="ApplyResult" doc="&#xA;" ilk="class" line="572" lineend="612" name="MapResult">
        <scope ilk="function" line="586" lineend="612" name="_set" signature="_set(self, i, success_result)">
          <variable ilk="argument" name="i" />
          <variable ilk="argument" name="success_result" />
          <variable citdl="MapResult" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="574" lineend="584" name="__init__" signature="__init__(self, cache, chunksize, length, callback, error_callback)">
          <variable ilk="argument" name="callback" />
          <variable ilk="argument" name="error_callback" />
          <variable ilk="argument" name="chunksize" />
          <variable citdl="MapResult" ilk="argument" name="self" />
          <variable ilk="argument" name="cache" />
          <variable ilk="argument" name="length" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="True" line="577" name="_success" />
        <variable attributes="protected __instancevar__" citdl="result" line="578" name="_value" />
        <variable attributes="protected __instancevar__" citdl="True" line="582" name="_ready" />
        <variable attributes="protected __instancevar__" line="579" name="_chunksize" />
        <variable attributes="protected __instancevar__" citdl="int" line="581" name="_number_left" />
      </scope>
      <scope classrefs="Exception" doc="Wraps possible unpickleable errors, so they can be&#xA;safely sent through the socket." ilk="class" line="71" lineend="85" name="MaybeEncodingError">
        <scope ilk="function" line="80" lineend="82" name="__str__" returns="tuple" signature="__str__(self)">
          <variable citdl="MaybeEncodingError" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="84" lineend="85" name="__repr__" returns="str" signature="__repr__(self)">
          <variable citdl="MaybeEncodingError" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="75" lineend="78" name="__init__" signature="__init__(self, exc, value)">
          <variable citdl="MaybeEncodingError" ilk="argument" name="self" />
          <variable ilk="argument" name="exc" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="__instancevar__" citdl="repr()" line="76" name="exc" />
        <variable attributes="__instancevar__" citdl="repr()" line="77" name="value" />
      </scope>
      <scope classrefs="object" doc="Class which supports an async version of applying functions to arguments.&#xA;" ilk="class" line="130" lineend="513" name="Pool">
        <scope doc="Apply `func` to each element in `iterable`, collecting the&#xA;results in a list that is returned." ilk="function" line="245" lineend="251" name="map" signature="map(self, func, iterable, chunksize=None)">
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable ilk="argument" name="iterable" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="chunksize" />
        </scope>
        <scope doc="Like `imap()` method but ordering of results is arbitrary." ilk="function" line="271" lineend="287" name="imap_unordered" returns="IMapUnorderedIterator()" signature="imap_unordered(self, func, iterable, chunksize=1)">
          <variable citdl="Pool._get_tasks()" line="283" name="task_batches" />
          <variable citdl="int" ilk="argument" name="chunksize" />
          <variable ilk="argument" name="func" />
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable ilk="argument" name="iterable" />
          <variable citdl="IMapUnorderedIterator()" line="277" name="result" />
        </scope>
        <scope ilk="function" line="332" lineend="368" name="_handle_tasks" signature="_handle_tasks(taskqueue, put, outqueue, pool)">
          <variable citdl="Pool" ilk="argument" name="taskqueue" />
          <variable citdl="threading.current_thread()" line="333" name="thread" />
          <variable ilk="argument" name="outqueue" />
          <variable citdl="int" line="336" name="i" />
          <variable ilk="argument" name="put" />
          <variable ilk="argument" name="pool" />
        </scope>
        <scope ilk="function" line="437" lineend="439" name="__reduce__" signature="__reduce__(self)">
          <variable citdl="Pool" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="473" lineend="513" name="_terminate_pool" signature="_terminate_pool(taskqueue, inqueue, outqueue, pool, worker_handler, task_handler, result_handler, cache)">
          <variable ilk="argument" name="taskqueue" />
          <variable ilk="argument" name="cache" />
          <variable ilk="argument" name="result_handler" />
          <variable ilk="argument" name="outqueue" />
          <variable ilk="argument" name="inqueue" />
          <variable ilk="argument" name="task_handler" />
          <variable ilk="argument" name="worker_handler" />
          <variable ilk="argument" name="pool" />
          <variable citdl="Pool" ilk="argument" name="cls" />
        </scope>
        <scope doc="Clean up any exited workers and start replacements for them." ilk="function" line="225" lineend="229" name="_maintain_pool" signature="_maintain_pool(self)">
          <variable citdl="Pool" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="448" lineend="452" name="terminate" signature="terminate(self)">
          <variable citdl="Pool" ilk="argument" name="self" />
        </scope>
        <scope doc="Asynchronous version of `apply()` method." ilk="function" line="289" lineend="297" name="apply_async" returns="ApplyResult()" signature="apply_async(self, func, args=(), kwds={}, callback=None, error_callback=None)">
          <variable ilk="argument" name="callback" />
          <variable ilk="argument" name="error_callback" />
          <variable citdl="dict" ilk="argument" name="kwds" />
          <variable ilk="argument" name="func" />
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable citdl="tuple" ilk="argument" name="args" />
          <variable citdl="ApplyResult()" line="295" name="result" />
        </scope>
        <scope ilk="function" line="323" lineend="329" name="_handle_workers" signature="_handle_workers(pool)">
          <variable citdl="Pool" ilk="argument" name="pool" />
        </scope>
        <scope ilk="function" line="442" lineend="446" name="close" signature="close(self)">
          <variable citdl="Pool" ilk="argument" name="self" />
        </scope>
        <scope doc="Equivalent of `func(*args, **kwds)`." ilk="function" line="238" lineend="243" name="apply" signature="apply(self, func, args=(), kwds={})">
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable citdl="tuple" ilk="argument" name="args" />
          <variable citdl="dict" ilk="argument" name="kwds" />
          <variable ilk="argument" name="func" />
        </scope>
        <scope ilk="function" line="231" lineend="236" name="_setup_queues" signature="_setup_queues(self)">
          <variable citdl="Pool" ilk="argument" name="self" />
        </scope>
        <scope doc="Equivalent of `map()` -- can be MUCH slower than&#xA;`Pool.map()`." ilk="function" line="253" lineend="269" name="imap" returns="IMapIterator()" signature="imap(self, func, iterable, chunksize=1)">
          <variable citdl="Pool._get_tasks()" line="265" name="task_batches" />
          <variable citdl="int" ilk="argument" name="chunksize" />
          <variable ilk="argument" name="func" />
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable ilk="argument" name="iterable" />
          <variable citdl="IMapIterator()" line="259" name="result" />
        </scope>
        <scope ilk="function" line="136" lineend="191" name="__init__" signature="__init__(self, processes=None, initializer=None, initargs=(), maxtasksperchild=None)">
          <variable citdl="tuple" ilk="argument" name="initargs" />
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable ilk="argument" name="initializer" />
          <variable citdl="cpu_count()" ilk="argument" name="processes" />
          <variable ilk="argument" name="maxtasksperchild" />
        </scope>
        <scope doc="Bring the number of pool processes up to the specified&#xA;number, for use after reaping workers which have exited." ilk="function" line="209" lineend="223" name="_repopulate_pool" signature="_repopulate_pool(self)">
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable citdl="Process()" line="214" name="w" />
        </scope>
        <scope ilk="function" line="464" lineend="470" name="_help_stuff_finish" signature="_help_stuff_finish(inqueue, task_handler, size)">
          <variable citdl="Pool" ilk="argument" name="inqueue" />
          <variable ilk="argument" name="task_handler" />
          <variable ilk="argument" name="size" />
        </scope>
        <scope ilk="function" line="454" lineend="461" name="join" signature="join(self)">
          <variable citdl="Pool" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="371" lineend="426" name="_handle_results" signature="_handle_results(outqueue, get, cache)">
          <variable citdl="Pool" ilk="argument" name="outqueue" />
          <variable citdl="get()" line="376" name="task" />
          <variable ilk="argument" name="cache" />
          <variable citdl="threading.current_thread()" line="372" name="thread" />
          <variable ilk="argument" name="get" />
        </scope>
        <scope ilk="function" line="429" lineend="435" name="_get_tasks" signature="_get_tasks(func, it, size)">
          <variable citdl="tuple()" line="432" name="x" />
          <variable citdl="iter()" ilk="argument" name="it" />
          <variable citdl="Pool" ilk="argument" name="func" />
          <variable ilk="argument" name="size" />
        </scope>
        <scope doc="Cleanup after any worker processes which have exited due to&#xA;reaching their specified lifetime." ilk="function" line="194" lineend="207" name="_join_exited_workers" returns="bool" signature="_join_exited_workers(self)">
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable line="200" name="worker" />
          <variable citdl="False" line="198" name="cleaned" />
        </scope>
        <scope doc="Asynchronous version of `map()` method." ilk="function" line="299" lineend="320" name="map_async" returns="MapResult()" signature="map_async(self, func, iterable, chunksize=None, callback=None, error_callback=None)">
          <variable citdl="int" ilk="argument" name="chunksize" />
          <variable line="309" name="extra" />
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable citdl="Pool._get_tasks()" line="315" name="task_batches" />
          <variable ilk="argument" name="callback" />
          <variable ilk="argument" name="error_callback" />
          <variable citdl="MapResult()" line="316" name="result" />
          <variable ilk="argument" name="func" />
          <variable citdl="list()" ilk="argument" name="iterable" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="threading.Thread()" line="161" name="_worker_handler" />
        <variable attributes="protected __instancevar__" citdl="tuple" line="144" name="_initargs" />
        <variable line="134" name="Process" />
        <variable attributes="protected __instancevar__" citdl="list" line="158" name="_pool" />
        <variable attributes="protected __instancevar__" citdl="threading.Thread()" line="178" name="_result_handler" />
        <variable attributes="protected __instancevar__" citdl="self._outqueue._reader.recv" line="236" name="_quick_get" />
        <variable attributes="protected __instancevar__" citdl="int" line="141" name="_state" />
        <variable attributes="protected __instancevar__" citdl="cpu_count()" line="157" name="_processes" />
        <variable attributes="protected __instancevar__" citdl="queue.Queue()" line="139" name="_taskqueue" />
        <variable attributes="protected __instancevar__" citdl="threading.Thread()" line="170" name="_task_handler" />
        <variable attributes="protected __instancevar__" citdl="SimpleQueue()" line="234" name="_outqueue" />
        <variable attributes="protected __instancevar__" citdl="SimpleQueue()" line="233" name="_inqueue" />
        <variable attributes="protected __instancevar__" citdl="dict" line="140" name="_cache" />
        <variable attributes="protected __instancevar__" line="142" name="_maxtasksperchild" />
        <variable attributes="protected __instancevar__" citdl="self._inqueue._writer.send" line="235" name="_quick_put" />
        <variable attributes="protected __instancevar__" line="143" name="_initializer" />
        <variable attributes="protected __instancevar__" citdl="Finalize()" line="186" name="_terminate" />
      </scope>
      <scope classrefs="object" doc="Process objects represent activity that is run in a separate process&#xA;The class is analagous to `threading.Thread`" ilk="class" name="Process">
        <scope doc="Method to be run in sub-process; can be overridden in sub-&#xA;class" ilk="function" name="run" signature="run(self)" />
        <scope doc="Terminate process; sends SIGTERM signal or uses&#xA;TerminateProcess()" ilk="function" name="terminate" signature="terminate(self)" />
        <scope ilk="function" name="__init__" signature="__init__(self, group=None, target=None, name=None, args=(), kwargs={})" />
        <scope doc="Wait until child process terminates" ilk="function" name="join" signature="join(self, timeout=None)" />
        <scope doc="Start child process" ilk="function" name="start" signature="start(self)" />
        <scope ilk="function" name="_bootstrap" signature="_bootstrap(self)" />
        <scope ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return whether process is alive" ilk="function" name="is_alive" signature="is_alive(self)" />
      </scope>
      <variable citdl="int" line="54" name="RUN" />
      <variable citdl="int" line="56" name="TERMINATE" />
      <scope classrefs="Pool" doc="&#xA;" ilk="class" line="708" lineend="730" name="ThreadPool">
        <scope ilk="function" line="722" lineend="730" name="_help_stuff_finish" signature="_help_stuff_finish(inqueue, task_handler, size)">
          <variable citdl="ThreadPool" ilk="argument" name="inqueue" />
          <variable ilk="argument" name="task_handler" />
          <variable ilk="argument" name="size" />
        </scope>
        <scope ilk="function" line="715" lineend="719" name="_setup_queues" signature="_setup_queues(self)">
          <variable citdl="ThreadPool" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="712" lineend="713" name="__init__" signature="__init__(self, processes=None, initializer=None, initargs=())">
          <variable citdl="tuple" ilk="argument" name="initargs" />
          <variable citdl="ThreadPool" ilk="argument" name="self" />
          <variable ilk="argument" name="processes" />
          <variable ilk="argument" name="initializer" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._inqueue.put" line="718" name="_quick_put" />
        <variable attributes="protected __instancevar__" citdl="queue.Queue()" line="717" name="_outqueue" />
        <variable attributes="protected __instancevar__" citdl="self._outqueue.get" line="719" name="_quick_get" />
        <variable attributes="protected __instancevar__" citdl="queue.Queue()" line="716" name="_inqueue" />
      </scope>
      <scope classrefs="ProcessError" doc="&#xA;" ilk="class" name="TimeoutError" />
      <variable citdl="list" line="35" name="__all__" />
      <import module="collections" />
      <scope doc="Returns the number of CPUs in the system" ilk="function" name="cpu_count" signature="cpu_count()" />
      <scope ilk="function" name="debug" signature="debug(msg, *args)" />
      <import module="itertools" />
      <variable citdl="count" line="62" name="job_counter" />
      <scope ilk="function" line="64" lineend="65" name="mapstar" returns="list()" signature="mapstar(args)">
        <variable ilk="argument" name="args" />
      </scope>
      <import module="queue" />
      <import module="threading" />
      <import module="time" />
      <scope ilk="function" line="88" lineend="124" name="worker" signature="worker(inqueue, outqueue, initializer=None, initargs=(), maxtasks=None)">
        <variable citdl="get()" line="102" name="task" />
        <variable citdl="inqueue.get" line="91" name="get" />
        <variable citdl="int" line="99" name="completed" />
        <variable citdl="outqueue.put" line="90" name="put" />
        <variable ilk="argument" name="initializer" />
        <variable ilk="argument" name="outqueue" />
        <variable ilk="argument" name="inqueue" />
        <variable ilk="argument" name="maxtasks" />
        <variable citdl="tuple" ilk="argument" name="initargs" />
        <variable citdl="MaybeEncodingError" line="119" name="wrapped" />
        <variable citdl="tuple" line="113" name="result" />
      </scope>
    </scope>
    