<scope doc="Generic (shallow and deep) copying operations.&#xA;Interface summary:  import copy  x = copy.copy(y)        # make a shallow copy of y x = copy.deepcopy(y)    # make a deep copy of y  For module specific errors, copy.Error is raised.  The difference between shallow and deep copying is only relevant for" ilk="blob" lang="Python" name="copy">
      <scope classrefs="Exception" doc="&#xA;" ilk="class" line="56" lineend="57" name="Error" />
      <variable citdl="NoneType" line="63" name="PyStringMap" />
      <variable citdl="list" line="65" name="__all__" />
      <import module="builtins" />
      <scope doc="Shallow copy operation on arbitrary Python objects." ilk="function" line="67" lineend="97" name="copy" returns="copy.copier()" signature="copy(x)">
        <variable citdl="getattr()" line="83" name="reductor" />
        <variable ilk="argument" name="x" />
        <variable citdl="reductor()" line="85" name="rv" />
        <variable citdl="_copy_dispatch.get()" line="75" name="copier" />
        <variable citdl="type()" line="73" name="cls" />
      </scope>
      <scope doc="Deep copy operation on arbitrary Python objects." ilk="function" line="129" lineend="178" name="deepcopy" returns="_deepcopy_atomic()" signature="deepcopy(x, memo=None, _nil=[])">
        <variable citdl="getattr()" line="160" name="reductor" />
        <variable citdl="reductor()" line="162" name="rv" />
        <variable citdl="id()" line="138" name="d" />
        <variable citdl="int" line="150" name="issc" />
        <variable citdl="dict" ilk="argument" name="memo" />
        <variable citdl="_deepcopy_dispatch.get()" line="145" name="copier" />
        <variable citdl="copier()" line="139" name="y" />
        <variable citdl="list" ilk="argument" name="_nil" />
        <variable ilk="argument" name="x" />
        <variable citdl="type()" line="143" name="cls" />
      </scope>
      <variable citdl="dict" name="dispatch_table" />
      <scope classrefs="Exception" doc="&#xA;" ilk="class" line="58" name="error" />
      <variable citdl="str" name="name" />
      <scope classrefs="object" doc="set() -&gt; new empty set object&#xA;set(iterable) -&gt; new set object  Build an unordered collection of unique elements." ilk="class" line="109" name="t">
        <scope doc="x.__ror__(y) &lt;==&gt; y|x" ilk="function" name="__ror__" signature="x.__ror__(y) &lt;==&gt; y|x" />
        <scope doc="Remove all elements of another set from this set." ilk="function" name="difference_update" />
        <scope doc="x.__isub__(y) &lt;==&gt; x-y" ilk="function" name="__isub__" signature="x.__isub__(y) &lt;==&gt; x-y" />
        <scope doc="Return the symmetric difference of two sets as a new set." ilk="function" name="symmetric_difference" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="Remove and return an arbitrary set element." ilk="function" name="pop" />
        <scope doc="Report whether this set contains another set." ilk="function" name="issuperset" />
        <scope doc="Report whether another set contains this set." ilk="function" name="issubset" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="Remove an element from a set; it must be a member." ilk="function" name="remove" />
        <scope doc="x.__and__(y) &lt;==&gt; x&amp;y" ilk="function" name="__and__" signature="x.__and__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope ilk="function" name="__init__" />
        <scope doc="x.__rand__(y) &lt;==&gt; y&amp;x" ilk="function" name="__rand__" signature="x.__rand__(y) &lt;==&gt; y&amp;x" />
        <scope doc="Return the intersection of two sets as a new set." ilk="function" name="intersection" />
        <scope doc="Return the difference of two or more sets as a new set." ilk="function" name="difference" />
        <scope doc="x.__iand__(y) &lt;==&gt; x&amp;y" ilk="function" name="__iand__" signature="x.__iand__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x." ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x." />
        <scope doc="Return the union of sets as a new set." ilk="function" name="union" />
        <scope doc="Remove an element from a set if it is a member." ilk="function" name="discard" />
        <scope doc="Add an element to a set." ilk="function" name="add" />
        <scope doc="x.__ixor__(y) &lt;==&gt; x^y" ilk="function" name="__ixor__" signature="x.__ixor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="Update a set with the symmetric difference of itself and&#xA;another." ilk="function" name="symmetric_difference_update" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Update a set with the union of itself and others." ilk="function" name="update" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__or__(y) &lt;==&gt; x|y" ilk="function" name="__or__" signature="x.__or__(y) &lt;==&gt; x|y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="Return a shallow copy of a set." ilk="function" name="copy" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__rxor__(y) &lt;==&gt; y^x" ilk="function" name="__rxor__" signature="x.__rxor__(y) &lt;==&gt; y^x" />
        <scope doc="Return True if two sets have a null intersection." ilk="function" name="isdisjoint" />
        <scope doc="Remove all elements from this set." ilk="function" name="clear" />
        <scope doc="Update a set with the intersection of itself and another." ilk="function" name="intersection_update" />
        <scope doc="x.__xor__(y) &lt;==&gt; x^y" ilk="function" name="__xor__" signature="x.__xor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__ior__(y) &lt;==&gt; x|y" ilk="function" name="__ior__" signature="x.__ior__(y) &lt;==&gt; x|y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <import module="weakref" />
      <scope attributes="protected __hidden__" ilk="function" line="122" lineend="123" name="_copy_with_copy_method" returns="x.copy()" signature="_copy_with_copy_method(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="117" lineend="118" name="_copy_with_constructor" returns="type()()" signature="_copy_with_constructor(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="102" lineend="103" name="_copy_immutable" signature="_copy_immutable(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="180" name="_deepcopy_dispatch" />
      <scope attributes="protected __hidden__" ilk="function" line="182" lineend="183" name="_deepcopy_atomic" signature="_deepcopy_atomic(x, memo)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="memo" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="100" name="_copy_dispatch" />
      <scope attributes="protected __hidden__" ilk="function" line="242" lineend="243" name="_deepcopy_method" returns="type()()" signature="_deepcopy_method(x, memo)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="memo" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="205" lineend="210" name="_deepcopy_list" returns="list" signature="_deepcopy_list(x, memo)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="memo" />
        <variable citdl="list" line="206" name="y" />
      </scope>
      <scope attributes="protected __hidden__" doc="Keeps a reference to the object x in the memo.&#xA;&#xA;Because we remember objects by their id, we have&#xA;to assure that possibly temporary objects are kept&#xA;alive by referencing them.&#xA;We store a reference at the id of the memo, which should&#xA;normally not be used unless someone tries to deepcopy&#xA;the memo itself..." ilk="function" line="246" lineend="260" name="_keep_alive" signature="_keep_alive(x, memo)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="memo" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="262" lineend="315" name="_reconstruct" returns="callable()" signature="_reconstruct(x, info, deep, memo=None)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="info" />
        <variable ilk="argument" name="deep" />
        <variable citdl="dict" ilk="argument" name="memo" />
        <variable citdl="len()" line="268" name="n" />
        <variable citdl="deepcopy()" line="272" name="state" />
        <variable line="276" name="listiter" />
        <variable line="280" name="dictiter" />
        <variable citdl="deepcopy()" line="284" name="args" />
        <variable citdl="callable()" line="285" name="y" />
        <variable line="297" name="slotstate" />
        <variable citdl="deepcopy()" line="307" name="item" />
        <variable citdl="deepcopy()" line="312" name="key" />
        <variable citdl="deepcopy()" line="313" name="value" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="213" lineend="229" name="_deepcopy_tuple" returns="list" signature="_deepcopy_tuple(x, memo)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="memo" />
        <variable citdl="list" line="214" name="y" />
        <variable citdl="id()" line="217" name="d" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="232" lineend="237" name="_deepcopy_dict" returns="dict" signature="_deepcopy_dict(x, memo)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="memo" />
        <variable citdl="dict" line="233" name="y" />
      </scope>
      <scope attributes="protected __hidden__" ilk="class" line="322" lineend="323" name="_EmptyClass" />
      <scope attributes="protected __hidden__" ilk="function" line="325" lineend="385" name="_test" signature="_test()">
        <import line="366" module="reprlib" />
        <variable citdl="list" line="326" name="l" />
        <variable citdl="copy()" line="328" name="l1" />
        <scope ilk="class" line="334" lineend="353" name="C">
          <scope attributes="__ctor__" ilk="function" line="335" lineend="344" name="__init__" signature="C(arg=None)">
            <import line="339" module="sys" />
            <variable citdl="C" ilk="argument" name="self" />
            <variable ilk="argument" name="arg" />
            <variable citdl="__file__" line="340" name="file" />
          </scope>
          <variable attributes="__instancevar__" citdl="int" line="336" name="a" />
          <variable attributes="__instancevar__" line="337" name="arg" />
          <variable attributes="__instancevar__" citdl="open()" line="343" name="fp" />
          <scope ilk="function" line="345" lineend="346" name="__getstate__" returns="dict" signature="__getstate__()">
            <variable citdl="C" ilk="argument" name="self" />
          </scope>
          <scope ilk="function" line="347" lineend="349" name="__setstate__" signature="__setstate__(state)">
            <variable citdl="C" ilk="argument" name="self" />
            <variable ilk="argument" name="state" />
          </scope>
          <scope ilk="function" line="350" lineend="353" name="__deepcopy__" returns="self.__class__()" signature="__deepcopy__(memo=None)">
            <variable citdl="C" ilk="argument" name="self" />
            <variable ilk="argument" name="memo" />
            <variable citdl="self.__class__()" line="351" name="new" />
          </scope>
        </scope>
        <variable citdl="C" line="354" name="c" />
        <variable citdl="copy()" line="356" name="l2" />
        <variable citdl="copy()" line="365" name="l3" />
        <scope classrefs="dict" ilk="class" line="376" lineend="382" name="odict">
          <scope attributes="__ctor__" ilk="function" line="377" lineend="379" name="__init__" signature="odict(d={})">
            <variable citdl="odict" ilk="argument" name="self" />
            <variable citdl="dict" ilk="argument" name="d" />
          </scope>
          <variable attributes="__instancevar__" citdl="int" line="378" name="a" />
          <scope ilk="function" line="380" lineend="382" name="__setitem__" signature="__setitem__(k, i)">
            <variable citdl="odict" ilk="argument" name="self" />
            <variable ilk="argument" name="k" />
            <variable ilk="argument" name="i" />
          </scope>
        </scope>
        <variable citdl="odict" line="383" name="o" />
        <variable citdl="deepcopy()" line="384" name="x" />
      </scope>
    </scope>
    