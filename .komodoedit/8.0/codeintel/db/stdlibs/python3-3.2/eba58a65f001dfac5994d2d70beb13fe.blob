<scope doc="dyld emulation&#xA;" ilk="blob" lang="Python" name="ctypes.macholib.dyld">
      <variable citdl="list" line="17" name="DEFAULT_FRAMEWORK_FALLBACK" />
      <variable citdl="list" line="24" name="DEFAULT_LIBRARY_FALLBACK" />
      <variable citdl="list" line="10" name="__all__" />
      <scope classrefs="object" doc="accumulate(iterable) --&gt; accumulate object&#xA;Return series of accumulated sums." ilk="class" name="accumulate">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope classrefs="object" doc="chain(*iterables) --&gt; chain object&#xA;Return a chain object whose .__next__() method returns elements from the first iterable until it is exhausted, then elements from the next iterable, until all of the iterables are exhausted." ilk="class" name="chain">
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
      </scope>
      <scope classrefs="object" doc="combinations(iterable, r) --&gt; combinations object&#xA;Return successive r-length combinations of elements in the iterable.  combinations(range(4), 3) --&gt; (0,1,2), (0,1,3), (0,2,3), (1,2,3)" ilk="class" name="combinations">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope classrefs="object" doc="combinations_with_replacement(iterable, r) --&gt; combinations_with_replacement object&#xA;Return successive r-length combinations of elements in the iterable allowing individual elements to have successive repeats. combinations_with_replacement(&apos;ABC&apos;, 2) --&gt; AA AB AC BB BC CC" ilk="class" name="combinations_with_replacement">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope classrefs="object" doc="compress(data, selectors) --&gt; iterator over selected data&#xA;Return data elements corresponding to true selector elements. Forms a shorter iterator from selected data elements using the selectors to choose the data elements." ilk="class" name="compress">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope classrefs="object" doc="count(start=0, step=1) --&gt; count object&#xA;Return a count object whose .__next__() method returns consecutive values. Equivalent to:  def count(firstval=0, step=1): x = firstval while 1: yield x x += step" ilk="class" name="count">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <scope classrefs="object" doc="cycle(iterable) --&gt; cycle object&#xA;Return elements from the iterable until it is exhausted. Then repeat the sequence indefinitely." ilk="class" name="cycle">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope classrefs="object" doc="dropwhile(predicate, iterable) --&gt; dropwhile object&#xA;Drop items from the iterable while predicate(item) is true. Afterwards, return every element until the iterable is exhausted." ilk="class" name="dropwhile">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope ilk="function" line="94" lineend="114" name="dyld_default_search" signature="dyld_default_search(name, env=None)">
        <variable citdl="dyld_fallback_framework_path()" line="100" name="fallback_framework_path" />
        <variable citdl="framework_info()" line="97" name="framework" />
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="env" />
        <variable citdl="dyld_fallback_library_path()" line="104" name="fallback_library_path" />
      </scope>
      <scope ilk="function" line="31" lineend="37" name="dyld_env" returns="list" signature="dyld_env(env, var)">
        <variable ilk="argument" name="var" />
        <variable citdl="env.get()" line="34" name="rval" />
        <variable citdl="os.environ" ilk="argument" name="env" />
      </scope>
      <scope ilk="function" line="87" lineend="92" name="dyld_executable_path_search" signature="dyld_executable_path_search(name, executable_path=None)">
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="executable_path" />
      </scope>
      <scope ilk="function" line="50" lineend="51" name="dyld_fallback_framework_path" returns="dyld_env()" signature="dyld_fallback_framework_path(env=None)">
        <variable ilk="argument" name="env" />
      </scope>
      <scope ilk="function" line="53" lineend="54" name="dyld_fallback_library_path" returns="dyld_env()" signature="dyld_fallback_library_path(env=None)">
        <variable ilk="argument" name="env" />
      </scope>
      <scope doc="Find a library or framework using dyld semantics" ilk="function" line="116" lineend="127" name="dyld_find" returns="path" signature="dyld_find(name, executable_path=None, env=None)">
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="env" />
        <variable ilk="argument" name="executable_path" />
      </scope>
      <scope ilk="function" line="44" lineend="45" name="dyld_framework_path" returns="dyld_env()" signature="dyld_framework_path(env=None)">
        <variable ilk="argument" name="env" />
      </scope>
      <scope ilk="function" line="39" lineend="42" name="dyld_image_suffix" returns="env.get()" signature="dyld_image_suffix(env=None)">
        <variable citdl="os.environ" ilk="argument" name="env" />
      </scope>
      <scope doc="For a potential path iterator, add DYLD_IMAGE_SUFFIX&#xA;semantics" ilk="function" line="56" lineend="68" name="dyld_image_suffix_search" returns="dyld_image_suffix_search._inject()" signature="dyld_image_suffix_search(iterator, env=None)">
        <scope attributes="protected" ilk="function" line="61" lineend="67" name="_inject" signature="_inject(iterator=iterator, suffix=suffix)">
          <variable ilk="argument" name="iterator" />
          <variable citdl="dyld_image_suffix()" ilk="argument" name="suffix" />
        </scope>
        <variable ilk="argument" name="env" />
        <variable ilk="argument" name="iterator" />
        <variable citdl="dyld_image_suffix()" line="58" name="suffix" />
      </scope>
      <scope ilk="function" line="47" lineend="48" name="dyld_library_path" returns="dyld_env()" signature="dyld_library_path(env=None)">
        <variable ilk="argument" name="env" />
      </scope>
      <scope ilk="function" line="70" lineend="85" name="dyld_override_search" signature="dyld_override_search(name, env=None)">
        <variable citdl="framework_info()" line="76" name="framework" />
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="env" />
      </scope>
      <scope doc="A dylib name can take one of the following four forms:&#xA;Location/Name.SomeVersion_Suffix.dylib&#xA;Location/Name.SomeVersion.dylib Location/Name_Suffix.dylib" ilk="function" name="dylib_info" signature="dylib_info(filename)" />
      <scope classrefs="object" doc="filterfalse(function or None, sequence) --&gt; filterfalse object&#xA;Return those items of sequence for which function(item) is false. If function is None, return the items that are false." ilk="class" name="filterfalse">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope doc="Find a framework using dyld semantics in a very loose&#xA;manner." ilk="function" line="129" lineend="150" name="framework_find" returns="dyld_find()" signature="framework_find(fn, executable_path=None, env=None)">
        <variable citdl="fn.rfind()" line="142" name="fmwk_index" />
        <variable ilk="argument" name="executable_path" />
        <variable citdl="os.path.join()" ilk="argument" name="fn" />
        <variable ilk="argument" name="env" />
      </scope>
      <scope doc="A framework name can take one of the following four forms:&#xA;Location/Name.framework/Versions/SomeVersion/Name_Suffix&#xA;Location/Name.framework/Versions/SomeVersion/Name&#xA;Location/Name.framework/Name_Suffix" ilk="function" name="framework_info" signature="framework_info(filename)" />
      <scope classrefs="object" doc="groupby(iterable[, keyfunc]) -&gt; create an iterator which returns&#xA;(key, sub-iterator) grouped by each value of key(value)." ilk="class" name="groupby">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope classrefs="object" doc="islice(iterable, [start,] stop [, step]) --&gt; islice object&#xA;Return an iterator whose next() method returns selected values from an iterable.  If start is specified, will skip all preceding elements; otherwise, start defaults to zero.  Step defaults to one.  If specified as another value, step determines how many values are skipped between successive calls.  Works like a slice() on a list but returns an iterator." ilk="class" name="islice">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <import module="os" />
      <scope classrefs="object" doc="permutations(iterable[, r]) --&gt; permutations object&#xA;Return successive r-length permutations of elements in the iterable.  permutations(range(3), 2) --&gt; (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)" ilk="class" name="permutations">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope classrefs="object" doc="product(*iterables) --&gt; product object&#xA;Cartesian product of input iterables.  Equivalent to nested for-loops.  For example, product(A, B) returns the same as:  ((x,y) for x in A for y in B). The leftmost iterators are in the outermost for-loop, so the output tuples cycle in a manner similar to an odometer (with the rightmost element changing on every iteration).  To compute the product of an iterable with itself, specify the number of repetitions with the optional repeat keyword argument. For example, product(A, repeat=4) means the same as product(A, A, A, A)." ilk="class" name="product">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope classrefs="object" doc="repeat(object [,times]) -&gt; create an iterator which returns the object&#xA;for the specified number of times.  If not specified, returns the object endlessly." ilk="class" name="repeat">
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <scope classrefs="object" doc="starmap(function, sequence) --&gt; starmap object&#xA;Return an iterator whose values are returned from the function evaluated with a argument tuple taken from the given sequence." ilk="class" name="starmap">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope classrefs="object" doc="takewhile(predicate, iterable) --&gt; takewhile object&#xA;Return successive entries from an iterable as long as the predicate evaluates to true for each entry." ilk="class" name="takewhile">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope doc="tee(iterable, n=2) --&gt; tuple of n independent iterators." ilk="function" name="tee" signature="tee(iterable, n=2) --&gt; tuple of n independent iterators." />
      <scope ilk="function" line="152" lineend="155" name="test_dyld_find" signature="test_dyld_find()">
        <variable citdl="dict" line="153" name="env" />
      </scope>
      <scope classrefs="object" doc="zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --&gt; zip_longest object&#xA;Return an zip_longest object whose .__next__() method returns a tuple where the i-th element comes from the i-th iterable argument.  The .__next__() method continues until the longest iterable in the argument sequence is exhausted and then it raises StopIteration.  When the shorter iterables are exhausted, the fillvalue is substituted in their place.  The fillvalue defaults to None or can be specified by a keyword argument." ilk="class" name="zip_longest">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
    </scope>
    