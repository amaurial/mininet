<scope doc="Thread-local objects.&#xA;(Note that this module provides a Python version of the threading.local class.  Depending on the version of Python you&apos;re using, there may be a faster one available.  You should always import the `local` class from `threading`.)  Thread-local objects support the management of thread-local data. If you have data that you want to be local to a thread, simply create a thread-local object and use its attributes:  &gt;&gt;&gt; mydata = local()" ilk="blob" lang="Python" name="_threading_local">
      <scope ilk="function" name="RLock" signature="RLock(verbose=None, *args, **kwargs)" />
      <variable citdl="list" line="138" name="__all__" />
      <scope doc="@contextmanager decorator." ilk="function" name="contextmanager" signature="contextmanager(func)" />
      <scope ilk="function" name="current_thread" signature="current_thread()" />
      <scope classrefs="object" doc="&#xA;" ilk="class" line="208" lineend="243" name="local">
        <scope ilk="function" line="237" lineend="243" name="__delattr__" returns="object.__delattr__()" signature="__delattr__(self, name)">
          <variable citdl="local" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="211" lineend="223" name="__new__" returns="object.__new__()" signature="__new__(cls, *args, **kw)">
          <variable citdl="object.__new__()" line="214" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="_localimpl" line="215" name="impl" />
          <variable citdl="local" ilk="argument" name="cls" />
        </scope>
        <scope ilk="function" line="225" lineend="227" name="__getattribute__" returns="object.__getattribute__()" signature="__getattribute__(self, name)">
          <variable citdl="local" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="229" lineend="235" name="__setattr__" returns="object.__setattr__()" signature="__setattr__(self, name, value)">
          <variable citdl="local" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable citdl="tuple" line="209" name="__slots__" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="ref">
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope ilk="function" name="__init__" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope attributes="protected __hidden__" doc="A class managing thread-local dicts" ilk="class" line="150" lineend="191" name="_localimpl">
        <variable citdl="tuple" line="152" name="__slots__" />
        <scope attributes="__ctor__" ilk="function" line="154" lineend="160" name="__init__" signature="_localimpl()">
          <variable citdl="_localimpl" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str()" line="158" name="key" />
        <variable attributes="__instancevar__" citdl="dict" line="160" name="dicts" />
        <scope doc="Return the dict for the current thread. Raises KeyError if none&#xA;defined." ilk="function" line="162" lineend="166" name="get_dict" signature="get_dict()">
          <variable citdl="_localimpl" ilk="argument" name="self" />
          <variable citdl="current_thread()" line="165" name="thread" />
        </scope>
        <scope doc="Create a new dict for the current thread, and return it." ilk="function" line="168" lineend="191" name="create_dict" returns="dict" signature="create_dict()">
          <variable citdl="_localimpl" ilk="argument" name="self" />
          <variable citdl="dict" line="170" name="localdict" />
          <variable citdl="str()" line="171" name="key" />
          <variable citdl="current_thread()" line="172" name="thread" />
          <variable citdl="id()" line="173" name="idt" />
          <scope ilk="function" line="174" lineend="178" name="local_deleted" signature="local_deleted(_, key=key)">
            <variable ilk="argument" name="_" />
            <variable citdl="str()" ilk="argument" name="key" />
            <variable citdl="wrthread()" line="176" name="thread" />
          </scope>
          <scope ilk="function" line="179" lineend="186" name="thread_deleted" signature="thread_deleted(_, idt=idt)">
            <variable ilk="argument" name="_" />
            <variable citdl="id()" ilk="argument" name="idt" />
            <variable citdl="wrlocal()" line="184" name="local" />
            <variable citdl="local.dicts.pop()" line="186" name="dct" />
          </scope>
          <variable citdl="ref()" line="187" name="wrlocal" />
          <variable citdl="ref()" line="188" name="wrthread" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="195" name="_patch" signature="_patch(self)">
        <variable ilk="argument" name="self" />
        <variable citdl="object.__getattribute__()" line="196" name="impl" />
        <variable citdl="impl.get_dict()" line="198" name="dct" />
      </scope>
    </scope>
    