<scope doc="BaseHTTPServer that implements the Python WSGI protocol (PEP 3333)&#xA;This is both an example of how WSGI can be implemented, and a basis for running simple web applications on a local machine, such as might be done when testing or debugging an application.  It has not been reviewed for security issues, however, and we strongly recommend that you use a &quot;real&quot; web server for production use.  For example usage, see the &apos;if __name__==&quot;__main__&quot;&apos; block at the end of the module.  See also the BaseHTTPServer module docs for other API information." ilk="blob" lang="Python" name="wsgiref.simple_server">
      <scope classrefs="StreamRequestHandler" doc="HTTP request handler base class.&#xA;The following explanation of HTTP serves to guide you through the code as well as to expose any misunderstandings I may have about HTTP (so you don&apos;t need to read the code to figure out I&apos;m wrong :-).  HTTP (HyperText Transfer Protocol) is an extensible protocol on top of a reliable stream transport (e.g. TCP/IP).  The protocol recognizes three parts to a request:  1. One line identifying the request type and path" ilk="class" name="BaseHTTPRequestHandler">
        <scope doc="Handle multiple requests if necessary." ilk="function" name="handle" signature="handle(self)" />
        <scope doc="Parse a request (internal)." ilk="function" name="parse_request" signature="parse_request(self)" />
        <scope doc="Return the current date and time formatted for a message&#xA;header." ilk="function" name="date_time_string" signature="date_time_string(self, timestamp=None)" />
        <scope doc="Handle a single HTTP request." ilk="function" name="handle_one_request" signature="handle_one_request(self)" />
        <scope doc="Return the server software version string." ilk="function" name="version_string" signature="version_string(self)" />
        <scope doc="Return the client address formatted for logging." ilk="function" name="address_string" signature="address_string(self)" />
        <scope doc="Return the current time formatted for logging." ilk="function" name="log_date_time_string" signature="log_date_time_string(self)" />
        <scope doc="Log an accepted request." ilk="function" name="log_request" signature="log_request(self, code=&apos;-&apos;, size=&apos;-&apos;)" />
        <scope doc="Send the response header only." ilk="function" name="send_response_only" signature="send_response_only(self, code, message=None)" />
        <scope doc="Log an arbitrary message." ilk="function" name="log_message" signature="log_message(self, format, *args)" />
        <scope doc="Send a MIME header." ilk="function" name="send_header" signature="send_header(self, keyword, value)" />
        <scope doc="Send the blank line ending the MIME headers." ilk="function" name="end_headers" signature="end_headers(self)" />
        <scope doc="Send and log an error reply." ilk="function" name="send_error" signature="send_error(self, code, message=None)" />
        <scope doc="Log an error." ilk="function" name="log_error" signature="log_error(self, format, *args)" />
        <scope doc="Decide what to do with an &quot;Expect: 100-continue&quot; header." ilk="function" name="handle_expect_100" signature="handle_expect_100(self)" />
        <scope doc="Send the response header and log the response code." ilk="function" name="send_response" signature="send_response(self, code, message=None)" />
      </scope>
      <scope classrefs="TCPServer" doc="&#xA;" ilk="class" name="HTTPServer">
        <scope doc="Override server_bind to store the server name." ilk="function" name="server_bind" signature="server_bind(self)" />
      </scope>
      <scope classrefs="SimpleHandler" doc="&#xA;" ilk="class" name="ServerHandler">
        <scope ilk="function" name="close" signature="close(self)" />
      </scope>
      <scope classrefs="BaseHandler" doc="Handler that&apos;s just initialized with streams, environment, etc.&#xA;This handler subclass is intended for synchronous HTTP/1.0 origin servers, and handles sending the entire response output, given the correct inputs.  Usage::  handler = SimpleHandler( inp,out,err,env, multithread=False, multiprocess=True ) handler.run(app)" ilk="class" name="SimpleHandler">
        <scope ilk="function" name="get_stderr" signature="get_stderr(self)" />
        <scope ilk="function" name="_flush" signature="_flush(self)" />
        <scope ilk="function" name="get_stdin" signature="get_stdin(self)" />
        <scope ilk="function" name="_write" signature="_write(self, data)" />
        <scope ilk="function" name="add_cgi_vars" signature="add_cgi_vars(self)" />
        <scope ilk="function" name="__init__" signature="__init__(self, stdin, stdout, stderr, environ, multithread=True, multiprocess=False)" />
      </scope>
      <scope classrefs="BaseHTTPRequestHandler" doc="&#xA;" ilk="class" name="WSGIRequestHandler">
        <scope ilk="function" name="get_stderr" signature="get_stderr(self)" />
        <scope doc="Handle a single HTTP request" ilk="function" name="handle" signature="handle(self)" />
        <scope ilk="function" name="get_environ" signature="get_environ(self)" />
      </scope>
      <scope classrefs="HTTPServer" doc="BaseHTTPServer that implements the Python WSGI protocol&#xA;" ilk="class" name="WSGIServer">
        <scope ilk="function" name="setup_environ" signature="setup_environ(self)" />
        <scope doc="Override server_bind to store the server name." ilk="function" name="server_bind" signature="server_bind(self)" />
        <scope ilk="function" name="set_app" signature="set_app(self, application)" />
        <scope ilk="function" name="get_app" signature="get_app(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="demo_app" signature="demo_app(environ, start_response)" />
      <scope doc="Create a new WSGI server listening on `host` and `port` for&#xA;`app`" ilk="function" name="make_server" signature="make_server(host, port, app, server_class=&lt;class &apos;wsgiref.simple_server.WSGIServer&apos;&gt;, handler_class=&lt;class &apos;wsgiref.simple_server.WSGIRequestHandler&apos;&gt;)" />
      <variable citdl="str" name="server_version" />
      <variable citdl="str" name="software_version" />
      <import module="sys" />
      <variable citdl="str" name="sys_version" />
      <import module="urllib" />
    </scope>
    