<scope doc="Common operations on Posix pathnames.&#xA;Instead of importing this module directly, import os and refer to this module as os.path.  The &quot;os.path&quot; name is an alias for this module on Posix systems; on other systems (e.g. Mac, Windows), os.path provides the same operations in a manner specific to that platform, and is an alias to another module (e.g. macpath, ntpath).  Some of this can actually be useful on non-Posix systems too, e.g. for manipulation of the pathname component of URLs." ilk="blob" lang="Python" name="posixpath">
      <variable citdl="list" line="19" name="__all__" />
      <scope doc="Return an absolute path." ilk="function" line="367" lineend="375" name="abspath" returns="normpath()" signature="abspath(path)">
        <variable citdl="join()" ilk="argument" name="path" />
        <variable citdl="os.getcwdb()" line="371" name="cwd" />
      </scope>
      <variable citdl="NoneType" line="35" name="altsep" />
      <scope doc="Returns the final component of a pathname" ilk="function" line="129" lineend="133" name="basename" returns="list" signature="basename(p)">
        <variable citdl="p.rfind()" line="132" name="i" />
        <variable ilk="argument" name="p" />
        <variable citdl="_get_sep()" line="131" name="sep" />
      </scope>
      <scope doc="Given a list of pathnames, returns the longest common&#xA;leading component" ilk="function" name="commonprefix" signature="commonprefix(m)" />
      <variable citdl="str" line="29" name="curdir" />
      <variable citdl="str" line="34" name="defpath" />
      <variable citdl="str" line="36" name="devnull" />
      <scope doc="Returns the directory component of a pathname" ilk="function" line="138" lineend="145" name="dirname" returns="list" signature="dirname(p)">
        <variable citdl="p.rfind()" line="141" name="i" />
        <variable ilk="argument" name="p" />
        <variable citdl="head.rstrip()" line="142" name="head" />
        <variable citdl="_get_sep()" line="140" name="sep" />
      </scope>
      <scope doc="Test whether a path exists." ilk="function" name="exists" signature="exists(path)" />
      <scope doc="Expand ~ and ~user constructions." ilk="function" line="235" lineend="270" name="expanduser" returns="pwent.pw_dir" signature="expanduser(path)">
        <variable citdl="list" line="256" name="name" />
        <variable citdl="_get_sep()" line="244" name="sep" />
        <variable citdl="path.find()" line="245" name="i" />
        <variable citdl="pwd.getpwnam()" line="260" name="pwent" />
        <variable citdl="os.fsencode()" line="251" name="userhome" />
        <variable citdl="str" line="239" name="tilde" />
        <variable ilk="argument" name="path" />
        <variable citdl="str" line="266" name="root" />
      </scope>
      <scope doc="Expand shell variables of form $var and ${var}." ilk="function" line="280" lineend="323" name="expandvars" returns="list" signature="expandvars(path)">
        <variable citdl="_varprogb.search" line="290" name="search" />
        <variable citdl="str" line="292" name="end" />
        <variable citdl="m.group()" line="308" name="name" />
        <variable citdl="int" line="302" name="i" />
        <variable line="307" name="j" />
        <variable citdl="search()" line="304" name="m" />
        <variable attributes="protected" citdl="re.compile()" line="298" name="_varprog" />
        <variable citdl="value.encode()" line="315" name="value" />
        <variable citdl="str" line="291" name="start" />
        <variable citdl="list" line="314" name="tail" />
        <variable attributes="protected" citdl="re.compile()" line="289" name="_varprogb" />
        <variable citdl="list" ilk="argument" name="path" />
      </scope>
      <variable citdl="str" line="31" name="extsep" />
      <import module="genericpath" />
      <scope doc="Return the last access time of a file, reported by&#xA;os.stat()." ilk="function" name="getatime" signature="getatime(filename)" />
      <scope doc="Return the metadata change time of a file, reported by&#xA;os.stat()." ilk="function" name="getctime" signature="getctime(filename)" />
      <scope doc="Return the last modification time of a file, reported by&#xA;os.stat()." ilk="function" name="getmtime" signature="getmtime(filename)" />
      <scope doc="Return the size of a file, reported by os.stat()." ilk="function" name="getsize" signature="getsize(filename)" />
      <scope doc="Test whether a path is absolute" ilk="function" line="61" lineend="64" name="isabs" returns="s.startswith()" signature="isabs(s)">
        <variable ilk="argument" name="s" />
        <variable citdl="_get_sep()" line="63" name="sep" />
      </scope>
      <scope doc="Return true if the pathname refers to an existing directory." ilk="function" name="isdir" signature="isdir(s)" />
      <scope doc="Test whether a path is a regular file" ilk="function" name="isfile" signature="isfile(path)" />
      <scope doc="Test whether a path is a symbolic link" ilk="function" line="151" lineend="157" name="islink" returns="bool" signature="islink(path)">
        <variable ilk="argument" name="path" />
        <variable citdl="os.lstat()" line="154" name="st" />
      </scope>
      <scope doc="Test whether a path is a mount point" ilk="function" line="201" lineend="223" name="ismount" returns="bool" signature="ismount(path)">
        <variable citdl="s1.st_ino" line="219" name="ino1" />
        <variable citdl="join()" line="209" name="parent" />
        <variable citdl="os.lstat()" line="212" name="s2" />
        <variable citdl="os.lstat()" line="207" name="s1" />
        <variable citdl="s2.st_ino" line="220" name="ino2" />
        <variable citdl="s2.st_dev" line="216" name="dev2" />
        <variable citdl="s1.st_dev" line="215" name="dev1" />
        <variable ilk="argument" name="path" />
      </scope>
      <scope doc="Join two or more pathname components, inserting &apos;/&apos; as&#xA;needed." ilk="function" line="71" lineend="84" name="join" returns="b" signature="join(a, *p)">
        <variable ilk="argument" name="a" />
        <variable attributes="varargs" ilk="argument" name="p" />
        <variable citdl="b" line="76" name="path" />
        <variable citdl="_get_sep()" line="75" name="sep" />
      </scope>
      <scope doc="Test whether a path exists." ilk="function" line="161" lineend="167" name="lexists" returns="bool" signature="lexists(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <scope doc="Normalize case of pathname." ilk="function" line="49" lineend="55" name="normcase" signature="normcase(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope doc="Normalize path, eliminating double slashes, etc." ilk="function" line="330" lineend="364" name="normpath" returns="sep.join()" signature="normpath(path)">
        <variable citdl="str" line="333" name="sep" />
        <variable citdl="str" line="336" name="dotdot" />
        <variable citdl="list" line="350" name="comps" />
        <variable citdl="str" line="334" name="empty" />
        <variable citdl="path.startswith()" line="344" name="initial_slashes" />
        <variable citdl="sep.join()" ilk="argument" name="path" />
        <variable citdl="list" line="351" name="new_comps" />
        <variable citdl="str" line="335" name="dot" />
      </scope>
      <import module="os" />
      <variable citdl="str" line="30" name="pardir" />
      <variable citdl="str" line="33" name="pathsep" />
      <scope doc="Return the canonical path of the specified filename,&#xA;eliminating any symbolic links encountered in the path." ilk="function" line="381" lineend="407" name="realpath" returns="abspath()" signature="realpath(filename)">
        <variable citdl="_resolve_link()" line="399" name="resolved" />
        <variable citdl="join()" line="404" name="newpath" />
        <variable citdl="str" line="385" name="sep" />
        <variable citdl="list" line="391" name="bits" />
        <variable citdl="join()" line="396" name="component" />
        <variable citdl="str" line="386" name="empty" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Return a relative version of a path" ilk="function" line="432" lineend="459" name="relpath" returns="join()" signature="relpath(path, start=None)">
        <variable citdl="str" line="441" name="pardir" />
        <variable citdl="len()" line="456" name="rel_list" />
        <variable citdl="str" line="440" name="sep" />
        <variable citdl="len()" line="454" name="i" />
        <variable citdl="str" ilk="argument" name="start" />
        <variable citdl="str" line="439" name="curdir" />
        <variable citdl="list" line="451" name="path_list" />
        <variable ilk="argument" name="path" />
        <variable citdl="list" line="450" name="start_list" />
      </scope>
      <scope doc="Test whether two pathnames reference the same actual file" ilk="function" line="172" lineend="176" name="samefile" returns="samestat()" signature="samefile(f1, f2)">
        <variable ilk="argument" name="f1" />
        <variable ilk="argument" name="f2" />
        <variable citdl="os.stat()" line="174" name="s1" />
        <variable citdl="os.stat()" line="175" name="s2" />
      </scope>
      <scope doc="Test whether two open file objects reference the same file" ilk="function" line="182" lineend="186" name="sameopenfile" returns="samestat()" signature="sameopenfile(fp1, fp2)">
        <variable citdl="os.fstat()" line="185" name="s2" />
        <variable citdl="os.fstat()" line="184" name="s1" />
        <variable ilk="argument" name="fp1" />
        <variable ilk="argument" name="fp2" />
      </scope>
      <scope doc="Test whether two stat buffers reference the same file" ilk="function" line="192" lineend="195" name="samestat" returns="bool" signature="samestat(s1, s2)">
        <variable ilk="argument" name="s2" />
        <variable ilk="argument" name="s1" />
      </scope>
      <variable citdl="str" line="32" name="sep" />
      <scope doc="Split a pathname." ilk="function" line="92" lineend="100" name="split" returns="tuple" signature="split(p)">
        <variable citdl="p.rfind()" line="96" name="i" />
        <variable ilk="argument" name="p" />
        <variable citdl="head.rstrip()" line="97" name="head" />
        <variable citdl="list" line="97" name="tail" />
        <variable citdl="_get_sep()" line="95" name="sep" />
      </scope>
      <scope doc="Split a pathname into drive and path." ilk="function" line="121" lineend="124" name="splitdrive" returns="tuple" signature="splitdrive(p)">
        <variable ilk="argument" name="p" />
      </scope>
      <scope doc="Split the extension from a pathname." ilk="function" line="108" lineend="115" name="splitext" returns="genericpath._splitext()" signature="splitext(p)">
        <variable citdl="str" line="111" name="extsep" />
        <variable citdl="genericpath._splitext.__doc__" line="116" name="__doc__" />
        <variable ilk="argument" name="p" />
        <variable citdl="str" line="110" name="sep" />
      </scope>
      <import module="stat" />
      <variable citdl="bool" line="430" name="supports_unicode_filenames" />
      <import module="sys" />
      <scope attributes="protected __hidden__" doc="Internal helper function.  Takes a path and follows symlinks&#xA;until we either arrive at something that isn&apos;t a symlink, or&#xA;encounter a path we&apos;ve seen before (meaning that there&apos;s a loop)." ilk="function" line="410" lineend="428" name="_resolve_link" returns="normpath()" signature="_resolve_link(path)">
        <variable citdl="normpath()" ilk="argument" name="path" />
        <variable citdl="set()" line="415" name="paths_seen" />
        <variable citdl="os.readlink()" line="422" name="resolved" />
        <variable citdl="dirname()" line="424" name="dir" />
      </scope>
      <variable attributes="protected __hidden__" line="277" name="_varprog" />
      <scope attributes="protected __hidden__" ilk="function" line="38" lineend="42" name="_get_sep" returns="str" signature="_get_sep(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <variable attributes="protected __hidden__" line="278" name="_varprogb" />
    </scope>
    