<scope doc="Class for profiling Python code.&#xA;" ilk="blob" lang="Python" name="profile">
      <scope classrefs="OptionContainer" doc="Class attributes:&#xA;standard_option_list : [Option] list of standard options that will be accepted by all instances of this parser class (intended to be overridden by subclasses).  Instance attributes: usage : string a usage string for your program.  Before it is displayed to the user, &quot;%prog&quot; will be expanded to the name of your program (self.prog or os.path.basename(sys.argv[0])). prog : string" ilk="class" name="OptionParser">
        <scope ilk="function" name="_populate_option_list" signature="_populate_option_list(self, option_list, add_help=True)" />
        <scope ilk="function" name="_process_long_opt" signature="_process_long_opt(self, rargs, values)" />
        <scope doc="_process_args(largs : [string], rargs : [string], values :&#xA;Values)" ilk="function" name="_process_args" signature="_process_args(self, largs, rargs, values)" />
        <scope ilk="function" name="get_usage" signature="get_usage(self)" />
        <scope doc="Declare that you are done with this OptionParser." ilk="function" name="destroy" signature="destroy(self)" />
        <scope doc="-&gt; (values : Values, args : [string])" ilk="function" name="check_values" signature="check_values(values : Values, args : [string])" />
        <scope doc="Set parsing to not stop on the first non-option, allowing&#xA;interspersing switches with command arguments." ilk="function" name="enable_interspersed_args" signature="enable_interspersed_args(self)" />
        <scope ilk="function" name="set_usage" signature="set_usage(self, usage)" />
        <scope ilk="function" name="set_process_default_values" signature="set_process_default_values(self, process)" />
        <scope ilk="function" name="__init__" signature="__init__(self, usage=None, option_list=None, option_class=&lt;class &apos;optparse.Option&apos;&gt;, version=None, conflict_handler=&apos;error&apos;, description=None, formatter=None, add_help_option=True, prog=None, epilog=None)" />
        <scope ilk="function" name="add_option_group" signature="add_option_group(self, *args, **kwargs)" />
        <scope ilk="function" name="_get_args" signature="_get_args(self, args)" />
        <scope doc="Print the version message for this program (self.version) to&#xA;&apos;file&apos; (default stdout)." ilk="function" name="print_version" signature="print_version(file : file = stdout)" />
        <scope ilk="function" name="get_version" signature="get_version(self)" />
        <scope ilk="function" name="format_epilog" signature="format_epilog(self, formatter)" />
        <scope ilk="function" name="exit" signature="exit(self, status=0, msg=None)" />
        <scope ilk="function" name="get_option_group" signature="get_option_group(self, opt_str)" />
        <scope doc="Print an extended help message, listing all options and any&#xA;help text provided with them, to &apos;file&apos; (default stdout)." ilk="function" name="print_help" signature="print_help(file : file = stdout)" />
        <scope doc="Set parsing to stop on the first non-option." ilk="function" name="disable_interspersed_args" signature="disable_interspersed_args(self)" />
        <scope ilk="function" name="expand_prog_name" signature="expand_prog_name(self, s)" />
        <scope ilk="function" name="_add_help_option" signature="_add_help_option(self)" />
        <scope ilk="function" name="get_description" signature="get_description(self)" />
        <scope ilk="function" name="get_default_values" signature="get_default_values(self)" />
        <scope ilk="function" name="get_prog_name" signature="get_prog_name(self)" />
        <scope ilk="function" name="set_default" signature="set_default(self, dest, value)" />
        <scope doc="Determine which long option string &apos;opt&apos; matches, ie." ilk="function" name="_match_long_opt" returns="str" signature="_match_long_opt(opt : string) -&gt; string" />
        <scope doc="parse_args(args : [string] = sys.argv[1:], values : Values =&#xA;None) -&gt; (values : Values, args : [string])" ilk="function" name="parse_args" signature="parse_args(self, args=None, values=None)" />
        <scope ilk="function" name="format_help" signature="format_help(self, formatter=None)" />
        <scope ilk="function" name="_create_option_list" signature="_create_option_list(self)" />
        <scope ilk="function" name="set_defaults" signature="set_defaults(self, **kwargs)" />
        <scope ilk="function" name="_add_version_option" signature="_add_version_option(self)" />
        <scope ilk="function" name="_get_all_options" signature="_get_all_options(self)" />
        <scope ilk="function" name="format_option_help" signature="format_option_help(self, formatter=None)" />
        <scope ilk="function" name="_process_short_opts" signature="_process_short_opts(self, rargs, values)" />
        <scope doc="Print a usage message incorporating &apos;msg&apos; to stderr and&#xA;exit." ilk="function" name="error" signature="error(msg : string)" />
        <scope ilk="function" name="_init_parsing_state" signature="_init_parsing_state(self)" />
        <scope doc="Print the usage message for the current program (self.usage)&#xA;to &apos;file&apos; (default stdout)." ilk="function" name="print_usage" signature="print_usage(file : file = stdout)" />
      </scope>
      <scope classrefs="object" doc="Profiler class.&#xA;self.cur is always a tuple.  Each such tuple corresponds to a stack frame that is currently active (self.cur[-2]).  The following are the definitions of its members.  We use this external &quot;parallel stack&quot; to avoid contaminating the program that we are profiling. (old profiler used to write into the frames local dictionary!!) Derived classes can change the definition of some entries, as long as they leave [-2:] intact (frame and previous tuple).  In case an internal error is detected, the -3 element is used as the function name.  [ 0] = Time that needs to be charged to the parent frame&apos;s function." ilk="class" line="106" lineend="565" name="Profile">
        <scope doc="# This method is more useful to profile a single function&#xA;call." ilk="function" line="445" lineend="451" name="runcall" returns="Profile.runcall.func()" signature="runcall(self, func, *args, **kw)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable ilk="argument" name="func" />
        </scope>
        <scope ilk="function" line="231" lineend="241" name="trace_dispatch_mac" signature="trace_dispatch_mac(self, frame, event, arg)">
          <variable citdl="Profile.trace_dispatch_i.timer()" line="233" name="t" />
          <variable ilk="argument" name="arg" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="event" />
          <variable citdl="os.times" line="232" name="timer" />
          <variable citdl="Profile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="272" lineend="292" name="trace_dispatch_call" returns="int" signature="trace_dispatch_call(self, frame, t)">
          <variable citdl="frame.f_code" line="283" name="fcode" />
          <variable ilk="argument" name="t" />
          <variable citdl="tuple" line="284" name="fn" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable citdl="dict" line="286" name="timings" />
        </scope>
        <scope ilk="function" line="294" lineend="303" name="trace_dispatch_c_call" returns="int" signature="trace_dispatch_c_call(self, frame, t)">
          <variable citdl="dict" line="297" name="timings" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable citdl="tuple" line="295" name="fn" />
          <variable ilk="argument" name="t" />
        </scope>
        <scope ilk="function" line="494" lineend="503" name="calibrate" returns="self._calibrate_inner()" signature="calibrate(self, m, verbose=0)">
          <variable citdl="int" line="498" name="saved_bias" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="m" />
          <variable citdl="int" ilk="argument" name="verbose" />
        </scope>
        <scope ilk="function" line="430" lineend="433" name="run" returns="self.runctx()" signature="run(self, cmd)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable citdl="dict" line="432" name="dict" />
        </scope>
        <scope ilk="function" line="391" lineend="399" name="simulate_cmd_complete" signature="simulate_cmd_complete(self)">
          <variable citdl="_get_time_resource" line="392" name="get_time" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable citdl="Profile.trace_dispatch_l.get_time()" line="393" name="t" />
        </scope>
        <scope ilk="function" line="147" lineend="194" name="__init__" signature="__init__(self, timer=None, bias=None)">
          <scope ilk="function" line="190" lineend="191" name="get_time_timer" returns="Profile.__init__.get_time_timer.sum()" signature="get_time_timer(timer=timer, sum=sum)">
            <variable ilk="argument" name="timer" />
            <variable citdl="sum" ilk="argument" name="sum" />
          </scope>
          <variable citdl="len()" line="176" name="length" />
          <variable citdl="int" ilk="argument" name="bias" />
          <variable citdl="timer()" line="174" name="t" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="timer" />
        </scope>
        <scope ilk="function" line="305" lineend="340" name="trace_dispatch_return" returns="int" signature="trace_dispatch_return(self, frame, t)">
          <variable citdl="ret" line="315" name="frame_total" />
          <variable citdl="int" line="328" name="cc" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable citdl="dict" line="320" name="timings" />
          <variable ilk="argument" name="t" />
          <variable ilk="argument" name="frame" />
          <variable line="314" name="rit" />
          <variable citdl="ret" line="327" name="ct" />
        </scope>
        <scope ilk="function" line="359" lineend="362" name="set_cmd" signature="set_cmd(self, cmd)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
        </scope>
        <scope ilk="function" line="379" lineend="386" name="simulate_call" signature="simulate_call(self, name)">
          <variable line="382" name="pframe" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable citdl="fake_code" line="380" name="code" />
          <variable ilk="argument" name="name" />
          <variable citdl="fake_frame" line="385" name="frame" />
        </scope>
        <scope ilk="function" line="413" lineend="415" name="create_stats" signature="create_stats(self)">
          <variable citdl="Profile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="216" lineend="226" name="trace_dispatch_i" signature="trace_dispatch_i(self, frame, event, arg)">
          <variable citdl="get_time()" line="218" name="t" />
          <variable ilk="argument" name="arg" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="event" />
          <variable citdl="os.times" line="217" name="timer" />
          <variable citdl="Profile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="402" lineend="404" name="print_stats" signature="print_stats(self, sort=-1)">
          <variable citdl="int" ilk="argument" name="sort" />
          <variable citdl="Profile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="505" lineend="565" name="_calibrate_inner" returns="get_time()" signature="_calibrate_inner(self, m, verbose)">
          <scope ilk="function" line="514" lineend="516" name="f1" signature="f1(n)">
            <variable ilk="argument" name="n" />
            <variable citdl="int" line="516" name="x" />
          </scope>
          <variable ilk="argument" name="verbose" />
          <scope ilk="function" line="518" lineend="520" name="f" signature="f(m, f1=f1)">
            <variable ilk="argument" name="m" />
            <variable citdl="Profile._calibrate_inner.f1" ilk="argument" name="f1" />
          </scope>
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="m" />
          <variable citdl="get_time()" line="525" name="t0" />
          <variable citdl="get_time()" line="527" name="t1" />
          <variable citdl="" line="535" name="p" />
          <variable citdl="float" line="545" name="reported_time" />
          <variable citdl="float" line="544" name="total_calls" />
          <variable citdl="_get_time_resource" line="506" name="get_time" />
          <variable citdl="get_time()" line="562" name="mean" />
          <variable citdl="get_time()" line="528" name="elapsed_noprofile" />
          <variable citdl="get_time()" line="539" name="elapsed_profile" />
        </scope>
        <scope ilk="function" line="417" lineend="424" name="snapshot_stats" signature="snapshot_stats(self)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable citdl="callers.copy()" line="420" name="callers" />
          <variable citdl="int" line="421" name="nc" />
        </scope>
        <scope ilk="function" line="264" lineend="269" name="trace_dispatch_exception" returns="int" signature="trace_dispatch_exception(self, frame, t)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="t" />
        </scope>
        <scope ilk="function" line="407" lineend="411" name="dump_stats" signature="dump_stats(self, file)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="open()" line="408" name="f" />
        </scope>
        <scope ilk="function" line="198" lineend="211" name="trace_dispatch" signature="trace_dispatch(self, frame, event, arg)">
          <variable citdl="timer()" line="210" name="r" />
          <variable citdl="timer()" line="200" name="t" />
          <variable ilk="argument" name="arg" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable citdl="os.times" line="199" name="timer" />
          <variable ilk="argument" name="event" />
        </scope>
        <scope ilk="function" line="435" lineend="442" name="runctx" returns="Profile" signature="runctx(self, cmd, globals, locals)">
          <variable ilk="argument" name="globals" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="locals" />
        </scope>
        <scope ilk="function" line="245" lineend="255" name="trace_dispatch_l" signature="trace_dispatch_l(self, frame, event, arg)">
          <variable citdl="Profile.trace_dispatch_l.get_time()" line="247" name="t" />
          <variable ilk="argument" name="arg" />
          <variable citdl="_get_time_resource" line="246" name="get_time" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="event" />
        </scope>
        <variable attributes="__instancevar__" citdl="os.times" line="159" name="timer" />
        <variable attributes="__instancevar__" citdl="str" line="150" name="cmd" />
        <variable attributes="__instancevar__" citdl="dict" line="418" name="stats" />
        <variable attributes="__instancevar__" citdl="arg.__name__" line="151" name="c_func_name" />
        <scope ilk="class" line="374" lineend="377" name="fake_frame">
          <scope attributes="__ctor__" ilk="function" line="375" lineend="377" name="__init__" signature="fake_frame(code, prior)">
            <variable citdl="fake_frame" ilk="argument" name="self" />
            <variable ilk="argument" name="code" />
            <variable ilk="argument" name="prior" />
          </scope>
          <variable attributes="__instancevar__" line="376" name="f_code" />
          <variable attributes="__instancevar__" line="377" name="f_back" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="148" name="timings" />
        <variable attributes="__instancevar__" citdl="get_time()" line="193" name="t" />
        <variable citdl="int" line="145" name="bias" />
        <variable citdl="dict" line="343" name="dispatch" />
        <variable attributes="__instancevar__" citdl="Profile.__init__.get_time_timer" line="161" name="get_time" />
        <scope ilk="class" line="364" lineend="372" name="fake_code">
          <scope attributes="__ctor__" ilk="function" line="365" lineend="369" name="__init__" signature="fake_code(filename, line, name)">
            <variable citdl="fake_code" ilk="argument" name="self" />
            <variable ilk="argument" name="filename" />
            <variable ilk="argument" name="line" />
            <variable ilk="argument" name="name" />
          </scope>
          <variable attributes="__instancevar__" line="366" name="co_filename" />
          <variable attributes="__instancevar__" line="367" name="co_line" />
          <variable attributes="__instancevar__" line="368" name="co_name" />
          <variable attributes="__instancevar__" citdl="int" line="369" name="co_firstlineno" />
          <scope ilk="function" line="371" lineend="372" name="__repr__" returns="repr()" signature="__repr__()">
            <variable citdl="fake_code" ilk="argument" name="self" />
          </scope>
        </scope>
        <variable attributes="__instancevar__" citdl="self.trace_dispatch" line="160" name="dispatcher" />
        <variable attributes="__instancevar__" citdl="tuple" line="149" name="cur" />
      </scope>
      <variable citdl="list" line="33" name="__all__" />
      <scope ilk="function" line="569" lineend="600" name="main" returns="OptionParser()" signature="main()">
        <variable citdl="compile()" line="590" name="code" />
        <variable citdl="str" line="570" name="usage" />
        <variable citdl="dict" line="591" name="globs" />
        <variable line="583" name="args" />
        <variable citdl="OptionParser()" line="571" name="parser" />
        <variable line="587" name="progname" />
        <variable line="583" name="options" />
      </scope>
      <import module="marshal" />
      <import module="os" />
      <scope doc="Run statement under profiler optionally saving results in&#xA;filename" ilk="function" line="48" lineend="67" name="run" returns="prof.print_stats()" signature="run(statement, filename=None, sort=-1)">
        <variable citdl="int" ilk="argument" name="sort" />
        <variable citdl="Profile()" line="59" name="prof" />
        <variable ilk="argument" name="statement" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Run statement under profiler, supplying your own globals and&#xA;locals, optionally saving results in filename." ilk="function" line="69" lineend="84" name="runctx" returns="prof.print_stats()" signature="runctx(statement, globals, locals, filename=None, sort=-1)">
        <variable citdl="int" ilk="argument" name="sort" />
        <variable ilk="argument" name="globals" />
        <variable ilk="argument" name="statement" />
        <variable citdl="Profile()" line="75" name="prof" />
        <variable ilk="argument" name="locals" />
        <variable ilk="argument" name="filename" />
      </scope>
      <import module="sys" />
      <import module="time" />
      <variable attributes="__hidden__" line="98" name="resgetrusage" signature="resgetrusage()" />
      <scope attributes="protected __hidden__" ilk="function" line="99" lineend="101" name="_get_time_resource" signature="_get_time_resource(timer=resgetrusage)">
        <variable ilk="argument" name="timer" />
        <variable citdl="timer()" line="100" name="t" />
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="95" name="_has_res" />
      <scope attributes="protected __hidden__" ilk="function" line="87" lineend="89" name="_get_time_times" signature="_get_time_times(timer=os.times)">
        <variable citdl="os.times" ilk="argument" name="timer" />
        <variable citdl="timer()" line="88" name="t" />
      </scope>
    </scope>
    