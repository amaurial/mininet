<scope doc="# Copyright (C) 2001-2007 Python Software Foundation&#xA;# Author: Ben Gertzfield, Barry Warsaw # Contact: email-sig@python.org" ilk="blob" lang="Python" name="email.charset">
      <variable citdl="dict" line="68" name="ALIASES" />
      <variable citdl="int" line="24" name="BASE64" />
      <variable citdl="dict" line="37" name="CHARSETS" />
      <variable citdl="dict" line="97" name="CODEC_MAP" />
      <scope classrefs="object" doc="Map character sets to their email properties.&#xA;This class provides information about the requirements imposed on email for a specific character set.  It also provides convenience routines for converting between character sets, given the availability of the applicable codecs.  Given a character set, it will do its best to provide information on how to use that character set in an email in an RFC-compliant way.  Certain character sets must be encoded with quoted-printable or base64 when used in email headers or bodies.  Certain character sets must be converted outright, and are not allowed in email.  Instances of this" ilk="class" line="167" lineend="399" name="Charset">
        <scope ilk="function" line="252" lineend="253" name="__ne__" returns="bool" signature="__ne__(self, other)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" line="303" lineend="363" name="header_encode_lines" returns="list" signature="header_encode_lines(self, string, maxlengths)">
          <variable citdl="list" line="341" name="current_line" />
          <variable ilk="argument" name="maxlengths" />
          <variable ilk="argument" name="string" />
          <variable citdl="len()" line="328" name="extra" />
          <variable citdl="partial()" line="324" name="encoder" />
          <variable citdl="EMPTYSTRING.join()" line="355" name="joined_line" />
          <variable citdl="self._get_encoder()" line="323" name="encoder_module" />
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable citdl="get_output_charset()" line="327" name="charset" />
          <variable citdl="list" line="340" name="lines" />
          <variable citdl="EMPTYSTRING.join()" line="345" name="this_line" />
          <variable citdl="next()" line="342" name="maxlen" />
          <variable citdl="encoder_module.header_length()" line="346" name="length" />
          <variable citdl="CODEC_MAP.get()" line="321" name="codec" />
          <variable line="354" name="separator" />
          <variable citdl="_encode()" line="322" name="header_bytes" />
        </scope>
        <scope ilk="function" line="365" lineend="378" name="_get_encoder" returns="email.base64mime" signature="_get_encoder(self, header_bytes)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable ilk="argument" name="header_bytes" />
          <variable citdl="email.base64mime.header_length()" line="371" name="len64" />
          <variable citdl="email.quoprimime.header_length()" line="372" name="lenqp" />
        </scope>
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" line="284" lineend="301" name="header_encode" returns="encoder_module.header_encode()" signature="header_encode(self, string)">
          <variable citdl="self._get_encoder()" line="298" name="encoder_module" />
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable citdl="_encode()" line="296" name="header_bytes" />
          <variable citdl="CODEC_MAP.get()" line="295" name="codec" />
          <variable ilk="argument" name="string" />
        </scope>
        <scope ilk="function" line="244" lineend="245" name="__str__" returns="self.input_charset.lower()" signature="__str__(self)">
          <variable citdl="Charset" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the content-transfer-encoding used for body encoding." ilk="function" line="255" lineend="274" name="get_body_encoding" returns="str" signature="get_body_encoding(self)">
          <variable citdl="Charset" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the output character set." ilk="function" line="276" lineend="282" name="get_output_charset" returns="ALIASES.get()" signature="get_output_charset(self)">
          <variable citdl="Charset" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="247" name="__repr__" signature="__repr__(self)" />
        <scope doc="Body-encode a string by converting it first to bytes." ilk="function" line="380" lineend="399" name="body_encode" returns="email.base64mime.body_encode()" signature="body_encode(self, string)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable citdl="string.encode()" ilk="argument" name="string" />
        </scope>
        <scope ilk="function" line="249" lineend="250" name="__eq__" returns="bool" signature="__eq__(self, other)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="211" lineend="242" name="__init__" signature="__init__(self, input_charset=&apos;us-ascii&apos;)">
          <variable citdl="input_charset.lower()" ilk="argument" name="input_charset" />
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable line="229" name="henc" />
          <variable line="229" name="benc" />
          <variable citdl="ALIASES.get()" line="229" name="conv" />
        </scope>
        <variable attributes="__instancevar__" citdl="CODEC_MAP.get()" line="239" name="input_codec" />
        <variable attributes="__instancevar__" line="235" name="body_encoding" />
        <variable attributes="__instancevar__" citdl="ALIASES.get()" line="225" name="input_charset" />
        <variable attributes="__instancevar__" line="234" name="header_encoding" />
        <variable attributes="__instancevar__" citdl="ALIASES.get()" line="236" name="output_charset" />
        <variable attributes="__instancevar__" citdl="CODEC_MAP.get()" line="241" name="output_codec" />
      </scope>
      <variable citdl="str" line="30" name="DEFAULT_CHARSET" />
      <variable citdl="str" line="32" name="EMPTYSTRING" />
      <variable citdl="int" line="23" name="QP" />
      <variable citdl="int" line="28" name="RFC2047_CHROME_LEN" />
      <variable citdl="int" line="25" name="SHORTEST" />
      <variable citdl="str" line="31" name="UNKNOWN8BIT" />
      <variable citdl="list" line="5" name="__all__" />
      <scope doc="Add a character set alias." ilk="function" line="137" lineend="143" name="add_alias" signature="add_alias(alias, canonical)">
        <variable ilk="argument" name="alias" />
        <variable ilk="argument" name="canonical" />
      </scope>
      <scope doc="Add character set properties to the global registry." ilk="function" line="109" lineend="134" name="add_charset" signature="add_charset(charset, header_enc=None, body_enc=None, output_charset=None)">
        <variable ilk="argument" name="output_charset" />
        <variable ilk="argument" name="charset" />
        <variable ilk="argument" name="header_enc" />
        <variable ilk="argument" name="body_enc" />
      </scope>
      <scope doc="Add a codec that map characters in the given charset to/from&#xA;Unicode." ilk="function" line="146" lineend="153" name="add_codec" signature="add_codec(charset, codecname)">
        <variable ilk="argument" name="codecname" />
        <variable ilk="argument" name="charset" />
      </scope>
      <import module="email" />
      <scope doc="Set the Content-Transfer-Encoding header to 7bit or 8bit." ilk="function" name="encode_7or8bit" signature="encode_7or8bit(msg)" />
      <import module="errors" />
      <scope classrefs="object" doc="partial(func, *args, **keywords) - new function with partial application&#xA;of the given arguments and keywords." ilk="class" name="partial">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope ilk="function" name="__setstate__" />
        <scope ilk="function" name="__reduce__" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="159" lineend="163" name="_encode" returns="string.encode()" signature="_encode(string, codec)">
        <variable ilk="argument" name="string" />
        <variable ilk="argument" name="codec" />
      </scope>
    </scope>
    