<scope doc="distutils.filelist&#xA;Provides the FileList class, used for poking about the filesystem and building lists of files." ilk="blob" lang="Python" name="distutils.filelist">
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#xA;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#xA;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="object" doc="A list of files built by on exploring the filesystem and filtered by&#xA;applying various patterns to what we find there.  Instance attributes: dir directory from which files will be taken -- only used if &apos;allfiles&apos; not supplied to constructor files list of filenames currently being built/filtered/manipulated allfiles complete list of files under consideration (ie. without any" ilk="class" line="13" lineend="238" name="FileList">
        <scope ilk="function" line="56" lineend="61" name="sort" signature="sort(self)">
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable citdl="sorted()" line="58" name="sortable_files" />
        </scope>
        <scope doc="Select strings (presumably filenames) from &apos;self.files&apos; that&#xA;match &apos;pattern&apos;, a Unix-style wildcard (glob) pattern." ilk="function" line="179" lineend="218" name="include_pattern" returns="bool" signature="include_pattern(self, pattern, anchor=1, prefix=None, is_regex=0)">
          <variable citdl="int" ilk="argument" name="is_regex" />
          <variable ilk="argument" name="prefix" />
          <variable citdl="True" line="204" name="files_found" />
          <variable citdl="translate_pattern()" line="205" name="pattern_re" />
          <variable ilk="argument" name="pattern" />
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="anchor" />
        </scope>
        <scope ilk="function" line="66" lineend="70" name="remove_duplicates" signature="remove_duplicates(self)">
          <variable citdl="FileList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="34" lineend="35" name="set_allfiles" signature="set_allfiles(self, allfiles)">
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable ilk="argument" name="allfiles" />
        </scope>
        <scope ilk="function" line="53" lineend="54" name="extend" signature="extend(self, items)">
          <variable ilk="argument" name="items" />
          <variable citdl="FileList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="103" lineend="174" name="process_template_line" signature="process_template_line(self, line)">
          <variable line="109" name="patterns" />
          <variable line="109" name="action" />
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
          <variable line="109" name="dir" />
          <variable line="109" name="dir_pattern" />
        </scope>
        <scope doc="Remove strings (presumably filenames) from &apos;files&apos; that&#xA;match &apos;pattern&apos;." ilk="function" line="221" lineend="238" name="exclude_pattern" returns="bool" signature="exclude_pattern(self, pattern, anchor=1, prefix=None, is_regex=0)">
          <variable citdl="int" ilk="argument" name="is_regex" />
          <variable ilk="argument" name="prefix" />
          <variable citdl="False" line="229" name="files_found" />
          <variable citdl="translate_pattern()" line="230" name="pattern_re" />
          <variable ilk="argument" name="pattern" />
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="anchor" />
        </scope>
        <scope ilk="function" line="75" lineend="101" name="_parse_template_line" returns="tuple" signature="_parse_template_line(self, line)">
          <variable citdl="list" line="79" name="patterns" />
          <variable citdl="line.split()" line="76" name="words" />
          <variable line="77" name="action" />
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
          <variable citdl="convert_path()" line="91" name="dir" />
          <variable citdl="convert_path()" line="97" name="dir_pattern" />
        </scope>
        <scope ilk="function" line="37" lineend="38" name="findall" signature="findall(self, dir=&apos;.&apos;)">
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable citdl="os.curdir" ilk="argument" name="dir" />
        </scope>
        <scope doc="Print &apos;msg&apos; to stdout if the global DEBUG (taken from the&#xA;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" line="40" lineend="46" name="debug_print" signature="debug_print(self, msg)">
          <variable ilk="argument" name="msg" />
          <variable citdl="FileList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="28" lineend="32" name="__init__" signature="__init__(self, warn=None, debug_print=None)">
          <variable ilk="argument" name="warn" />
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable ilk="argument" name="debug_print" />
        </scope>
        <scope ilk="function" line="50" lineend="51" name="append" signature="append(self, item)">
          <variable ilk="argument" name="item" />
          <variable citdl="FileList" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="32" name="files" />
        <variable attributes="__instancevar__" citdl="findall()" line="31" name="allfiles" />
      </scope>
      <scope doc="Return &apos;pathname&apos; as a name that will work on the native&#xA;filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <scope doc="Find all files under &apos;dir&apos; and return the list of full&#xA;filenames (relative to &apos;dir&apos;)." ilk="function" line="244" lineend="272" name="findall" returns="list" signature="findall(dir=&apos;.&apos;)">
        <variable citdl="os.stat()" line="266" name="stat" />
        <variable citdl="list" line="250" name="list" />
        <variable citdl="stack.pop" line="252" name="pop" />
        <variable citdl="os.listdir()" line="257" name="names" />
        <variable citdl="stack.append" line="253" name="push" />
        <variable citdl="os.path.join()" line="261" name="fullname" />
        <variable citdl="list" line="251" name="stack" />
        <variable citdl="pop()" ilk="argument" name="dir" />
        <variable line="267" name="mode" />
      </scope>
      <import module="fnmatch" />
      <scope doc="Translate a shell-like glob pattern to a regular expression;&#xA;return a string containing the regex." ilk="function" line="275" lineend="292" name="glob_to_re" returns="re.sub()" signature="glob_to_re(pattern)">
        <variable citdl="fnmatch.translate()" line="281" name="pattern_re" />
        <variable ilk="argument" name="pattern" />
      </scope>
      <import module="log" />
      <import module="os" />
      <import module="re" />
      <scope doc="Translate a shell-like wildcard pattern to a compiled&#xA;regular expression." ilk="function" line="295" lineend="321" name="translate_pattern" returns="re.compile()" signature="translate_pattern(pattern, anchor=1, prefix=None, is_regex=0)">
        <variable citdl="int" ilk="argument" name="is_regex" />
        <variable ilk="argument" name="prefix" />
        <variable citdl="list" line="315" name="prefix_re" />
        <variable citdl="str" line="308" name="pattern_re" />
        <variable ilk="argument" name="pattern" />
        <variable citdl="glob_to_re()" line="314" name="empty_pattern" />
        <variable citdl="int" ilk="argument" name="anchor" />
      </scope>
      <variable citdl="str" line="7" name="__revision__" />
    </scope>
    