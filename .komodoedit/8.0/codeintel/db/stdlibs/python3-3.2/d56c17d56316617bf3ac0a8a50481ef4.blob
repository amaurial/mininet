<scope doc="Support module for CGI (Common Gateway Interface) scripts.&#xA;This module defines a number of utilities for use by CGI scripts written in Python." ilk="blob" lang="Python" name="cgi">
      <scope classrefs="_BufferedIOBase" doc="BytesIO([buffer]) -&gt; object&#xA;Create a buffered I/O implementation using an in-memory bytes buffer, ready for reading and writing." ilk="class" name="BytesIO">
        <scope doc="Call readline() repeatedly and return a list of the lines so&#xA;read." ilk="function" name="readlines" returns="list" signature="readlines([size]) -&gt; list of strings, each a line from the file." />
        <scope doc="Retrieve the entire contents of the BytesIO object." ilk="function" name="getvalue" signature="getvalue() -&gt; bytes." />
        <scope ilk="function" name="writable" />
        <scope doc="flush() -&gt; None.  Does nothing." ilk="function" name="flush" signature="flush() -&gt; None.  Does nothing." />
        <scope doc="close() -&gt; None.  Disable all I/O operations." ilk="function" name="close" signature="close() -&gt; None.  Disable all I/O operations." />
        <scope doc="Seek to byte offset pos relative to position indicated by&#xA;whence: 0  Start of stream (the default)." ilk="function" name="seek" signature="seek(pos, whence=0) -&gt; int.  Change stream position." />
        <scope ilk="function" name="__init__" />
        <scope doc="Returns number of bytes read (0 for EOF), or None if the&#xA;object is set not to block as has no data to read." ilk="function" name="readinto" signature="readinto(bytearray) -&gt; int.  Read up to len(b) bytes into b." />
        <scope ilk="function" name="readable" />
        <scope doc="Return the number of bytes written." ilk="function" name="write" signature="write(bytes) -&gt; int.  Write bytes to file." />
        <scope ilk="function" name="__getstate__" />
        <scope doc="tell() -&gt; current file position, an integer" ilk="function" name="tell" signature="tell() -&gt; current file position, an integer" />
        <scope doc="Always returns False since BytesIO objects are not connected&#xA;to a tty-like device." ilk="function" name="isatty" signature="isatty() -&gt; False." />
        <scope doc="Size defaults to the current file position, as returned by&#xA;tell()." ilk="function" name="truncate" signature="truncate([size]) -&gt; int.  Truncate the file to at most size bytes." />
        <scope ilk="function" name="__setstate__" />
        <scope doc="If the size argument is negative, read until EOF is reached." ilk="function" name="read" signature="read([size]) -&gt; read at most size bytes, returned as a string." />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="If the size argument is negative or omitted, read until EOF&#xA;is reached." ilk="function" name="read1" signature="read1(size) -&gt; read at most size bytes, returned as a string." />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope ilk="function" name="seekable" />
        <scope doc="Retain newline." ilk="function" name="readline" signature="readline([size]) -&gt; next line from the file, as a string." />
        <scope doc="Note that newlines are not added." ilk="function" name="writelines" signature="writelines(sequence_of_strings) -&gt; None.  Write strings to the file." />
        <scope doc="Get a read-write view over the contents of the BytesIO&#xA;object." ilk="function" name="getbuffer" signature="getbuffer() -&gt; bytes." />
      </scope>
      <scope classrefs="object" doc="A feed-style parser of email.&#xA;" ilk="class" name="FeedParser">
        <scope doc="Push more data into the parser." ilk="function" name="feed" signature="feed(self, data)" />
        <scope ilk="function" name="_pop_message" signature="_pop_message(self)" />
        <scope ilk="function" name="_call_parse" signature="_call_parse(self)" />
        <scope ilk="function" name="_parse_headers" signature="_parse_headers(self, lines)" />
        <scope ilk="function" name="_new_message" signature="_new_message(self)" />
        <scope ilk="function" name="_parsegen" signature="_parsegen(self)" />
        <scope doc="# Non-public interface for supporting Parser&apos;s headersonly&#xA;flag" ilk="function" name="_set_headersonly" signature="_set_headersonly(self)" />
        <scope doc="Parse all remaining data and return the root message object." ilk="function" name="close" signature="close(self)" />
        <scope doc="_factory is called with no arguments to create a new message&#xA;obj" ilk="function" name="__init__" signature="__init__(self, _factory=&lt;class &apos;email.message.Message&apos;&gt;)" />
      </scope>
      <scope classrefs="object" doc="Store a sequence of fields, reading multipart/form-data.&#xA;This class provides naming, typing, files stored on disk, and more.  At the top level, it is accessible like a dictionary, whose keys are the field names.  (Note: None can occur as a field name.) The items are either a Python list (if there&apos;s multiple values) or another FieldStorage or MiniFieldStorage object.  If it&apos;s a single object, it has the following attributes:  name: the field name, if specified; otherwise None  filename: the filename, if specified; otherwise None; this is the" ilk="class" line="351" lineend="851" name="FieldStorage">
        <scope doc="Internal: skip lines until outer boundary if defined." ilk="function" line="801" lineend="821" name="skip_lines" signature="skip_lines(self)">
          <variable citdl="str" line="806" name="last_boundary" />
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable citdl="self.fp.readline()" line="809" name="line" />
          <variable citdl="str" line="805" name="next_boundary" />
          <variable citdl="line.endswith()" line="807" name="last_line_lfend" />
          <variable citdl="line.strip()" line="815" name="strippedline" />
        </scope>
        <scope doc="Dictionary style indexing." ilk="function" line="567" lineend="579" name="__getitem__" returns="list" signature="__getitem__(self, key)">
          <variable citdl="list" line="571" name="found" />
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Dictionary style keys() method." ilk="function" line="614" lineend="618" name="keys" returns="FieldStorage.list()" signature="keys(self)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <scope doc="Return list of received values." ilk="function" line="603" lineend="612" name="getlist" returns="list" signature="getlist(self, key)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable line="606" name="value" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Dictionary style get() method, including &apos;value&apos; lookup." ilk="function" line="581" lineend="590" name="getvalue" returns="value.value" signature="getvalue(self, key, default=None)">
          <variable ilk="argument" name="default" />
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable line="584" name="value" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="551" lineend="552" name="__iter__" returns="iter()" signature="__iter__(self)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <scope doc="line is always bytes, not string" ilk="function" name="_FieldStorage__write" signature="_FieldStorage__write(self, line)" />
        <scope doc="Constructor. Read multipart/* until last part." ilk="function" line="394" lineend="544" name="__init__" signature="__init__(self, fp=None, headers=None, outerboundary=b&apos;&apos;, environ=environ({&apos;TMP&apos;: &apos;C:\\Users\\toddw\\AppData\\Local\\Temp&apos;, &apos;COMPUTERNAME&apos;: &apos;CROC&apos;, &apos;LIB&apos;: &apos;c:\\Program Files (x86)\\Microsoft Visual Studio .NET 2003\\SDK\\v1.1\\Lib\\&apos;, &apos;USERDOMAIN&apos;: &apos;croc&apos;, &apos;VS100COMNTOOLS&apos;: &apos;C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\Common7\\Tools\\&apos;, &apos;PSMODULEPATH&apos;: &apos;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\&apos;, &apos;VS90COMNTOOLS&apos;: &apos;C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\Common7\\Tools\\&apos;, &apos;COMMONPROGRAMFILES&apos;: &apos;C:\\Program Files (x86)\\Common Files&apos;, &apos;PROCESSOR_IDENTIFIER&apos;: &apos;Intel64 Family 6 Model 23 Stepping 7, GenuineIntel&apos;, &apos;PROGRAMFILES&apos;: &apos;C:\\Program Files (x86)&apos;, &apos;PROCESSOR_REVISION&apos;: &apos;1707&apos;, &apos;PATH&apos;: &apos;C:\\Program Files (x86)\\ActiveState Komodo IDE 7\\;C:\\Program Files (x86)\\ActiveState Komodo Edit 6\\;C:\\Program Files (x86)\\ActiveState Komodo Edit 7\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Python\\Python26;C:\\Python\\Python26\\Scripts;C:\\Python\\Python32;C:\\Python\\Python31;C:\\Python\\Python30;C:\\Python\\Python27;C:\\Python\\Python25;C:\\Python\\Python24;C:\\Python\\Python23;C:\\Perl\\Perl-5.8\\bin;C:\\Perl\\Perl-5.10\\bin;C:\\Perl\\Perl-5.12\\bin;C:\\Perl\\Perl-5.14\\bin;C:\\Tcl\\Tcl-8.5\\bin;C:\\Tcl\\Tcl-8.4\\bin;C:\\Ruby\\Ruby187\\bin;C:\\Ruby\\Ruby191\\bin;C:\\Ruby\\Ruby192\\bin;C:\\Ruby\\Ruby193\\bin;C:\\Php\\Php-53;C:\\Php\\Php-52;C:\\Php\\Php-51;C:\\Php\\Php-50;C:\\Php\\Php-44;C:\\Program Files (x86)\\Subversion-1.7;C:\\Program Files\\Mercurial;C:\\mozilla-build\\wget;C:\\mozilla-build\\info-zip;C:\\wix2;C:\\Program Files (x86)\\PuTTY;C:\\Program Files (x86)\\Git\\cmd;C:\\Users\\toddw\\AppData\\Roaming\\npm;C:\\Program Files (x86)\\nodejs\\;C:\\Program Files\\Microsoft Windows Performance Toolkit\\;C:\\as\\komodo-devel\\util\\black;C:\\bin;C:\\as\\komodo-devel\\mozilla\\bin-win32&apos;, &apos;SYSTEMROOT&apos;: &apos;C:\\Windows&apos;, &apos;PROGRAMFILES(X86)&apos;: &apos;C:\\Program Files (x86)&apos;, &apos;COMSPEC&apos;: &apos;C:\\Windows\\system32\\cmd.exe&apos;, &apos;TEMP&apos;: &apos;C:\\Users\\toddw\\AppData\\Local\\Temp&apos;, &apos;COMMONPROGRAMFILES(X86)&apos;: &apos;C:\\Program Files (x86)\\Common Files&apos;, &apos;PROCESSOR_ARCHITECTURE&apos;: &apos;x86&apos;, &apos;VS71COMNTOOLS&apos;: &apos;c:\\Program Files (x86)\\Microsoft Visual Studio .NET 2003\\Common7\\Tools\\&apos;, &apos;ALLUSERSPROFILE&apos;: &apos;C:\\ProgramData&apos;, &apos;LOCALAPPDATA&apos;: &apos;C:\\Users\\toddw\\AppData\\Local&apos;, &apos;HOMEPATH&apos;: &apos;\\Users\\toddw&apos;, &apos;VS80COMNTOOLS&apos;: &apos;C:\\Program Files (x86)\\Microsoft Visual Studio 8\\Common7\\Tools\\&apos;, &apos;PROGRAMW6432&apos;: &apos;C:\\Program Files&apos;, &apos;USERNAME&apos;: &apos;toddw&apos;, &apos;LOGONSERVER&apos;: &apos;\\\\CROC&apos;, &apos;PROMPT&apos;: &apos;$P$G&apos;, &apos;SESSIONNAME&apos;: &apos;Console&apos;, &apos;PROGRAMDATA&apos;: &apos;C:\\ProgramData&apos;, &apos;VIM_EXE_DIR&apos;: &apos;C:\\Program Files (x86)\\Vim\\vim73&apos;, &apos;PATHEXT&apos;: &apos;.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.tcl;.RB;.RBW&apos;, &apos;INCLUDE&apos;: &apos;c:\\Program Files (x86)\\Microsoft Visual Studio .NET 2003\\SDK\\v1.1\\include\\&apos;, &apos;FP_NO_HOST_CHECK&apos;: &apos;NO&apos;, &apos;WINDIR&apos;: &apos;C:\\Windows&apos;, &apos;APPDATA&apos;: &apos;C:\\Users\\toddw\\AppData\\Roaming&apos;, &apos;HOMEDRIVE&apos;: &apos;C:&apos;, &apos;SYSTEMDRIVE&apos;: &apos;C:&apos;, &apos;DXSDK_DIR&apos;: &apos;C:\\Program Files (x86)\\Microsoft DirectX SDK (June 2010)\\&apos;, &apos;NUMBER_OF_PROCESSORS&apos;: &apos;4&apos;, &apos;VBOX_INSTALL_PATH&apos;: &apos;C:\\Program Files\\Oracle\\VirtualBox\\&apos;, &apos;PROCESSOR_LEVEL&apos;: &apos;6&apos;, &apos;PROCESSOR_ARCHITEW6432&apos;: &apos;AMD64&apos;, &apos;COMMONPROGRAMW6432&apos;: &apos;C:\\Program Files\\Common Files&apos;, &apos;OS&apos;: &apos;Windows_NT&apos;, &apos;PUBLIC&apos;: &apos;C:\\Users\\Public&apos;, &apos;USERPROFILE&apos;: &apos;C:\\Users\\toddw&apos;}), keep_blank_values=0, strict_parsing=0, limit=None, encoding=&apos;utf-8&apos;, errors=&apos;replace&apos;)">
          <variable citdl="BytesIO()" ilk="argument" name="fp" />
          <variable citdl="dict" line="487" name="pdict" />
          <variable citdl="str" ilk="argument" name="encoding" />
          <variable citdl="str" line="513" name="ctype" />
          <variable citdl="int" line="525" name="clen" />
          <variable citdl="int" ilk="argument" name="strict_parsing" />
          <variable citdl="str" ilk="argument" name="outerboundary" />
          <variable citdl="qs.encode()" line="445" name="qs" />
          <variable citdl="str" ilk="argument" name="errors" />
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="keep_blank_values" />
          <variable citdl="dict" ilk="argument" name="headers" />
          <variable ilk="argument" name="limit" />
          <variable citdl="os.environ" ilk="argument" name="environ" />
          <variable citdl="str" line="437" name="method" />
          <variable citdl="str" line="487" name="cdisp" />
        </scope>
        <scope doc="Return the first value received." ilk="function" line="592" lineend="601" name="getfirst" returns="value.value" signature="getfirst(self, key, default=None)">
          <variable ilk="argument" name="default" />
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable line="595" name="value" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="630" lineend="631" name="__nonzero__" returns="bool()" signature="__nonzero__(self)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <scope doc="Dictionary style __contains__ method." ilk="function" line="620" lineend="624" name="__contains__" returns="any()" signature="__contains__(self, key)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Internal: read a part that is itself multipart." ilk="function" line="652" lineend="695" name="read_multi" signature="read_multi(self, environ, keep_blank_values, strict_parsing)">
          <variable citdl="str" line="676" name="hdr_text" />
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable citdl="FeedParser()" line="675" name="parser" />
          <variable ilk="argument" name="keep_blank_values" />
          <variable citdl="parser.close()" line="687" name="headers" />
          <variable citdl="klass()" line="688" name="part" />
          <variable ilk="argument" name="environ" />
          <variable citdl="self.__class__" line="666" name="klass" />
          <variable citdl="self.fp.readline()" line="667" name="first_line" />
          <variable ilk="argument" name="strict_parsing" />
          <variable citdl="urllib.parse.parse_qsl()" line="659" name="query" />
          <variable citdl="str" line="654" name="ib" />
          <variable citdl="self.fp.readline()" line="678" name="data" />
          <variable line="664" name="FieldStorageClass" />
        </scope>
        <scope doc="Overridable: return a readable &amp; writable file." ilk="function" line="823" lineend="851" name="make_file" returns="tempfile.TemporaryFile()" signature="make_file(self)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="554" lineend="565" name="__getattr__" returns="self.file.read()" signature="__getattr__(self, name)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="self.file.read()" line="559" name="value" />
        </scope>
        <scope doc="Internal: read lines until outerboundary." ilk="function" line="761" lineend="799" name="read_lines_to_outerboundary" signature="read_lines_to_outerboundary(self)">
          <variable attributes="protected" citdl="int" line="770" name="_read" />
          <variable citdl="str" line="787" name="odelim" />
          <variable citdl="str" line="768" name="delim" />
          <variable citdl="str" line="766" name="next_boundary" />
          <variable citdl="True" line="769" name="last_line_lfend" />
          <variable citdl="line.rstrip()" line="781" name="strippedline" />
          <variable citdl="str" line="767" name="last_boundary" />
          <variable citdl="list" line="774" name="line" />
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal: read lines until EOF or outerboundary." ilk="function" line="725" lineend="734" name="read_lines" signature="read_lines(self)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal: read data in query string format." ilk="function" line="633" lineend="648" name="read_urlencoded" signature="read_urlencoded(self)">
          <variable citdl="urllib.parse.parse_qsl()" line="643" name="query" />
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable citdl="qs.decode()" line="635" name="qs" />
        </scope>
        <scope doc="Internal: read lines until EOF." ilk="function" line="751" lineend="759" name="read_lines_to_eof" signature="read_lines_to_eof(self)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable citdl="self.fp.readline()" line="754" name="line" />
        </scope>
        <scope doc="Internal: read binary data." ilk="function" line="708" lineend="723" name="read_binary" signature="read_binary(self)">
          <variable citdl="self.fp.read()" line="714" name="data" />
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable citdl="int()" line="711" name="todo" />
        </scope>
        <scope doc="Internal: read an atomic part." ilk="function" line="697" lineend="704" name="read_single" signature="read_single(self)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <scope doc="Dictionary style len(x) support." ilk="function" line="626" lineend="628" name="__len__" returns="len()" signature="__len__(self)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a printable representation." ilk="function" line="546" lineend="549" name="__repr__" returns="tuple" signature="__repr__(self)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="491" name="disposition_options" />
        <variable attributes="__instancevar__" citdl="str" line="474" name="encoding" />
        <variable attributes="__instancevar__" citdl="int" line="538" name="done" />
        <variable attributes="__instancevar__" citdl="BytesIO()" line="710" name="file" />
        <variable attributes="__instancevar__" citdl="int" line="439" name="strict_parsing" />
        <variable citdl="int" line="706" name="bufsize" />
        <variable attributes="protected __instancevar__" citdl="bool" line="498" name="_binary_file" />
        <variable attributes="__instancevar__" citdl="str" line="475" name="errors" />
        <variable attributes="__instancevar__" line="495" name="filename" />
        <variable attributes="__instancevar__" citdl="int" line="438" name="keep_blank_values" />
        <variable line="650" name="FieldStorageClass" />
        <variable attributes="__instancevar__" citdl="int" line="483" name="bytes_read" />
        <variable attributes="__instancevar__" citdl="str" line="518" name="type" />
        <variable attributes="__instancevar__" citdl="fp.buffer" line="467" name="fp" />
        <variable attributes="private __instancevar__" line="743" name="__file" />
        <variable attributes="__instancevar__" citdl="str" line="521" name="innerboundary" />
        <variable attributes="__instancevar__" citdl="str" line="490" name="disposition" />
        <variable attributes="__instancevar__" line="442" name="qs_on_post" />
        <variable attributes="__instancevar__" citdl="str" line="481" name="outerboundary" />
        <scope attributes="private" doc="line is always bytes, not string" ilk="function" line="736" lineend="749" name="__write" signature="__write(line)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
          <variable citdl="self.__file.getvalue()" line="741" name="data" />
        </scope>
        <variable attributes="__instancevar__" line="492" name="name" />
        <variable attributes="__instancevar__" citdl="list" line="537" name="list" />
        <variable attributes="__instancevar__" citdl="dict" line="477" name="headers" />
        <variable attributes="__instancevar__" citdl="int" line="533" name="length" />
        <variable attributes="__instancevar__" citdl="int" line="484" name="limit" />
        <variable attributes="__instancevar__" citdl="dict" line="519" name="type_options" />
      </scope>
      <scope classrefs="object" doc="Like FieldStorage, for use when no file uploads are possible.&#xA;" ilk="class" line="326" lineend="348" name="MiniFieldStorage">
        <scope doc="Return printable representation." ilk="function" line="346" lineend="348" name="__repr__" returns="tuple" signature="__repr__(self)">
          <variable citdl="MiniFieldStorage" ilk="argument" name="self" />
        </scope>
        <scope doc="Constructor from field name and value." ilk="function" line="340" lineend="343" name="__init__" signature="__init__(self, name, value)">
          <variable citdl="MiniFieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable citdl="dict" line="337" name="disposition_options" />
        <variable line="334" name="file" />
        <variable line="332" name="list" />
        <variable attributes="__instancevar__" line="343" name="value" />
        <variable line="331" name="filename" />
        <variable citdl="dict" line="338" name="headers" />
        <variable line="336" name="disposition" />
        <variable citdl="dict" line="335" name="type_options" />
        <variable line="333" name="type" />
        <variable attributes="__instancevar__" line="342" name="name" />
      </scope>
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.&#xA;The initial_value argument sets the value of object.  The newline argument is like the one of TextIOWrapper&apos;s constructor." ilk="class" name="StringIO">
        <scope ilk="function" name="writable" />
        <scope doc="Truncate size to pos." ilk="function" name="truncate" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Read at most n characters, returned as a string." ilk="function" name="read" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope ilk="function" name="readable" />
        <scope doc="Retrieve the entire contents of the object." ilk="function" name="getvalue" />
        <scope doc="Write string to file." ilk="function" name="write" />
        <scope ilk="function" name="seekable" />
        <scope doc="Close the IO object." ilk="function" name="close" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Tell the current file position." ilk="function" name="tell" />
        <scope ilk="function" name="__init__" />
      </scope>
      <scope classrefs="_TextIOBase" doc="Character and line based layer over a BufferedIOBase object, buffer.&#xA;encoding gives the name of the encoding that the stream will be decoded or encoded with. It defaults to locale.getpreferredencoding.  errors determines the strictness of encoding and decoding (see the codecs.register) and defaults to &quot;strict&quot;.  newline can be None, &apos;&apos;, &apos;\n&apos;, &apos;\r&apos;, or &apos;\r\n&apos;.  It controls the handling of line endings. If it is None, universal newlines is enabled.  With this enabled, on input, the lines endings &apos;\n&apos;, &apos;\r&apos;, or &apos;\r\n&apos; are translated to &apos;\n&apos; before being returned to the" ilk="class" name="TextIOWrapper">
        <scope ilk="function" name="writable" />
        <scope ilk="function" name="flush" />
        <scope ilk="function" name="close" />
        <scope ilk="function" name="seek" />
        <scope ilk="function" name="__init__" />
        <scope ilk="function" name="readable" />
        <scope ilk="function" name="write" />
        <scope ilk="function" name="__getstate__" />
        <scope ilk="function" name="tell" />
        <scope ilk="function" name="isatty" />
        <scope ilk="function" name="truncate" />
        <scope ilk="function" name="read" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope ilk="function" name="seekable" />
        <scope ilk="function" name="readline" />
        <scope ilk="function" name="detach" />
        <scope ilk="function" name="fileno" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <variable citdl="list" line="44" name="__all__" />
      <scope doc="Write a log message to the log file. See initlog() for docs." ilk="function" line="91" lineend="93" name="dolog" signature="dolog(fmt, *args)">
        <variable ilk="argument" name="fmt" />
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
      <scope doc="Deprecated API." ilk="function" line="1003" lineend="1012" name="escape" returns="s.replace()" signature="escape(s, quote=None)">
        <variable ilk="argument" name="quote" />
        <variable citdl="s.replace()" ilk="argument" name="s" />
      </scope>
      <import module="html" />
      <scope doc="Write a log message, if there is a log file." ilk="function" line="56" lineend="89" name="initlog" signature="initlog(*allargs)">
        <variable citdl="open()" line="82" name="logfp" />
        <variable attributes="varargs" ilk="argument" name="allargs" />
        <variable citdl="dolog" line="86" name="log" />
      </scope>
      <import module="locale" />
      <scope doc="Write a log message, if there is a log file." ilk="function" line="99" name="log" signature="log(*allargs)" />
      <variable citdl="str" line="53" name="logfile" />
      <variable citdl="NoneType" line="54" name="logfp" />
      <variable citdl="int" line="107" name="maxlen" />
      <scope doc="Dummy function, assigned to log when logging is disabled." ilk="function" line="95" lineend="97" name="nolog" signature="nolog(*allargs)">
        <variable attributes="varargs" ilk="argument" name="allargs" />
      </scope>
      <import module="os" />
      <scope doc="Parse a query in the environment or from a file (default&#xA;stdin)" ilk="function" line="109" lineend="172" name="parse" returns="parse_multipart()" signature="parse(fp=None, environ=os.environ, keep_blank_values=0, strict_parsing=0)">
        <variable citdl="sys.stdin" ilk="argument" name="fp" />
        <variable citdl="str" line="153" name="qs" />
        <variable line="146" name="pdict" />
        <variable citdl="str" line="135" name="encoding" />
        <variable line="146" name="ctype" />
        <variable citdl="int" ilk="argument" name="keep_blank_values" />
        <variable citdl="os.environ" ilk="argument" name="environ" />
        <variable citdl="int" ilk="argument" name="strict_parsing" />
        <variable citdl="int()" line="150" name="clength" />
      </scope>
      <scope doc="Parse a Content-type like header." ilk="function" line="302" lineend="320" name="parse_header" returns="tuple" signature="parse_header(line)">
        <variable citdl="_parseparam()" line="308" name="parts" />
        <variable citdl="dict" line="310" name="pdict" />
        <variable citdl="parts.__next__()" line="309" name="key" />
        <variable citdl="p.find()" line="312" name="i" />
        <variable ilk="argument" name="line" />
        <variable citdl="list" line="315" name="value" />
        <variable line="314" name="name" />
      </scope>
      <scope doc="Parse multipart input." ilk="function" line="190" lineend="287" name="parse_multipart" returns="dict" signature="parse_multipart(fp, pdict)">
        <variable ilk="argument" name="fp" />
        <variable ilk="argument" name="pdict" />
        <variable citdl="int" line="230" name="bytes" />
        <variable citdl="dict" line="226" name="partdict" />
        <variable citdl="str" line="224" name="nextpart" />
        <variable citdl="str" line="227" name="terminator" />
        <variable line="275" name="key" />
        <variable citdl="list" line="250" name="line" />
        <variable citdl="fp.read()" line="231" name="data" />
        <variable line="279" name="name" />
        <variable citdl="list" line="248" name="lines" />
        <variable citdl="http.client.parse_headers()" line="234" name="headers" />
        <variable line="275" name="params" />
        <variable citdl="str" line="217" name="boundary" />
        <variable citdl="headers.get()" line="235" name="clength" />
        <variable citdl="str" line="225" name="lastpart" />
      </scope>
      <scope doc="Parse a query given as a string argument." ilk="function" line="178" lineend="182" name="parse_qs" returns="urllib.parse.parse_qs()" signature="parse_qs(qs, keep_blank_values=0, strict_parsing=0)">
        <variable citdl="int" ilk="argument" name="keep_blank_values" />
        <variable citdl="int" ilk="argument" name="strict_parsing" />
        <variable ilk="argument" name="qs" />
      </scope>
      <scope doc="Parse a query given as a string argument." ilk="function" line="184" lineend="188" name="parse_qsl" returns="urllib.parse.parse_qsl()" signature="parse_qsl(qs, keep_blank_values=0, strict_parsing=0)">
        <variable citdl="int" ilk="argument" name="keep_blank_values" />
        <variable citdl="int" ilk="argument" name="strict_parsing" />
        <variable ilk="argument" name="qs" />
      </scope>
      <scope ilk="function" line="949" lineend="954" name="print_arguments" signature="print_arguments()" />
      <scope doc="Dump the current directory as HTML." ilk="function" line="937" lineend="947" name="print_directory" signature="print_directory()">
        <variable citdl="os.getcwd()" line="942" name="pwd" />
      </scope>
      <scope doc="Dump the shell environment as HTML." ilk="function" line="910" lineend="919" name="print_environ" signature="print_environ(environ=os.environ)">
        <variable citdl="sorted()" line="912" name="keys" />
        <variable citdl="os.environ" ilk="argument" name="environ" />
      </scope>
      <scope doc="Dump a list of environment variables used by CGI as HTML." ilk="function" line="956" lineend="997" name="print_environ_usage" signature="print_environ_usage()" />
      <scope ilk="function" line="896" lineend="908" name="print_exception" signature="print_exception(type=None, value=None, tb=None, limit=None)">
        <variable ilk="argument" name="tb" />
        <variable citdl="traceback.format_tb()" line="902" name="list" />
        <variable ilk="argument" name="limit" />
        <variable ilk="argument" name="value" />
        <variable ilk="argument" name="type" />
      </scope>
      <scope doc="Dump the contents of a form as HTML." ilk="function" line="921" lineend="935" name="print_form" signature="print_form(form)">
        <variable citdl="sorted()" line="923" name="keys" />
        <variable line="931" name="value" />
        <variable ilk="argument" name="form" />
      </scope>
      <import module="sys" />
      <import module="tempfile" />
      <scope doc="Robust test CGI script, usable as main program." ilk="function" line="857" lineend="894" name="test" signature="test(environ=os.environ)">
        <variable citdl="int" line="886" name="maxlen" />
        <variable citdl="os.environ" ilk="argument" name="environ" />
        <scope ilk="function" line="876" lineend="877" name="g" signature="g(f=f)">
          <variable citdl="test.f" ilk="argument" name="f" />
        </scope>
        <variable citdl="FieldStorage" line="868" name="form" />
        <scope ilk="function" line="874" lineend="875" name="f" signature="f()" />
      </scope>
      <import module="urllib" />
      <scope ilk="function" line="1015" lineend="1021" name="valid_boundary" returns="re.match()" signature="valid_boundary(s, _vb_pattern=None)">
        <variable ilk="argument" name="s" />
        <variable citdl="str" ilk="argument" name="_vb_pattern" />
      </scope>
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
      <variable attributes="__hidden__" citdl="str" line="28" name="__version__" />
      <scope attributes="protected __hidden__" ilk="function" line="290" lineend="300" name="_parseparam" signature="_parseparam(s)">
        <variable citdl="list" ilk="argument" name="s" />
        <variable citdl="s.find()" line="293" name="end" />
        <variable citdl="list" line="298" name="f" />
      </scope>
    </scope>
    