<scope doc="A class supporting chat-style (command/response) protocols.&#xA;This class adds support for &apos;chat&apos; style protocols - where one side sends a &apos;command&apos;, and the other sends a response (examples would be the common internet protocols - smtp, nntp, ftp, etc..).  The handle_read() method looks at the input stream for the current &apos;terminator&apos; (usually &apos;\r\n&apos; for single-line responses, &apos;\r\n.\r\n&apos; for multi-line output), calling self.found_terminator() on its receipt.  for example:" ilk="blob" lang="Python" name="asynchat">
      <scope classrefs="dispatcher" doc="This is an abstract class.  You must derive from this class, and add&#xA;the two methods collect_incoming_data() and found_terminator()" ilk="class" line="65" lineend="274" name="async_chat">
        <scope ilk="function" line="228" name="initiate_send" signature="initiate_send(self)">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable citdl="int" line="241" name="obs" />
          <variable citdl="bytes()" line="243" name="data" />
          <variable citdl="self.send()" line="257" name="num_sent" />
          <variable line="230" name="first" />
        </scope>
        <scope doc="Set the input delimiter." ilk="function" line="111" lineend="115" name="set_terminator" signature="set_terminator(self, term)">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable citdl="bytes()" ilk="argument" name="term" />
        </scope>
        <scope ilk="function" line="97" lineend="98" name="collect_incoming_data" signature="collect_incoming_data(self, data)">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="125" lineend="191" name="handle_read" signature="handle_read(self)">
          <variable citdl="find_prefix_at_end()" line="170" name="index" />
          <variable citdl="len()" line="143" name="lb" />
          <variable citdl="get_terminator()" line="144" name="terminator" />
          <variable citdl="len()" line="169" name="terminator_len" />
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable citdl="bytes()" line="128" name="data" />
          <variable citdl="get_terminator()" line="151" name="n" />
        </scope>
        <scope doc="predicate for inclusion in the writable for select()" ilk="function" line="220" lineend="222" name="writable" returns="bool" signature="writable(self)">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="208" lineend="210" name="push_with_producer" signature="push_with_producer(self, producer)">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable ilk="argument" name="producer" />
        </scope>
        <scope ilk="function" line="108" lineend="109" name="found_terminator" signature="found_terminator(self)">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <scope doc="automatically close this channel once the outgoing queue is&#xA;empty" ilk="function" line="224" lineend="226" name="close_when_done" signature="close_when_done(self)">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="80" lineend="95" name="__init__" signature="__init__(self, sock=None, map=None)">
          <variable ilk="argument" name="map" />
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable ilk="argument" name="sock" />
        </scope>
        <scope ilk="function" line="117" lineend="118" name="get_terminator" returns="bytes()" signature="get_terminator(self)">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="193" lineend="194" name="handle_write" signature="handle_write(self)">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="270" lineend="274" name="discard_buffers" signature="discard_buffers(self)">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="100" lineend="101" name="_collect_incoming_data" signature="_collect_incoming_data(self, data)">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope doc="predicate for inclusion in the readable for select()" ilk="function" line="212" lineend="218" name="readable" returns="int" signature="readable(self)">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="103" lineend="106" name="_get_data" returns="str.join()" signature="_get_data(self)">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable citdl="str.join()" line="104" name="d" />
        </scope>
        <scope ilk="function" line="196" lineend="197" name="handle_close" signature="handle_close(self)">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="199" lineend="206" name="push" signature="push(self, data)">
          <variable citdl="int" line="200" name="sabs" />
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="__instancevar__" citdl="deque()" line="94" name="producer_fifo" />
        <variable attributes="__instancevar__" citdl="list" line="90" name="incoming" />
        <variable attributes="__instancevar__" citdl="str" line="82" name="ac_in_buffer" />
        <variable citdl="int" line="72" name="ac_out_buffer_size" />
        <variable citdl="str" line="78" name="encoding" />
        <variable citdl="int" line="71" name="ac_in_buffer_size" />
        <variable attributes="__instancevar__" citdl="bytes()" line="115" name="terminator" />
        <variable citdl="int" line="77" name="use_encoding" />
      </scope>
      <import module="asyncore" />
      <scope ilk="function" line="52" lineend="63" name="buffer" returns="list" signature="buffer(obj, start=None, stop=None)">
        <variable citdl="int" ilk="argument" name="start" />
        <variable citdl="len()" ilk="argument" name="stop" />
        <variable ilk="argument" name="obj" />
        <variable citdl="list" line="61" name="x" />
      </scope>
      <scope classrefs="object" doc="deque(iterable[, maxlen]) --&gt; deque object&#xA;Build an ordered collection with optimized access from its endpoints." ilk="class" name="deque">
        <scope doc="Add an element to the left side of the deque." ilk="function" name="appendleft" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="Remove and return the rightmost element." ilk="function" name="pop" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="D.remove(value)" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope ilk="function" name="__init__" />
        <scope doc="Extend the left side of the deque with elements from the&#xA;iterable" ilk="function" name="extendleft" />
        <scope doc="Add an element to the right side of the deque." ilk="function" name="append" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Remove and return the leftmost element." ilk="function" name="popleft" />
        <scope doc="x.__setitem__(i, y) &lt;==&gt; x[i]=y" ilk="function" name="__setitem__" signature="x.__setitem__(i, y) &lt;==&gt; x[i]=y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="D.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="D.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="x.__delitem__(y) &lt;==&gt; del x[y]" ilk="function" name="__delitem__" signature="x.__delitem__(y) &lt;==&gt; del x[y]" />
        <scope doc="Extend the right side of the deque with elements from the&#xA;iterable" ilk="function" name="extend" />
        <scope doc="Rotate the deque n steps to the right (default n=1)." ilk="function" name="rotate" />
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="D.reverse()" />
        <scope doc="Remove all elements from the deque." ilk="function" name="clear" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__iadd__(y) &lt;==&gt; x+=y" ilk="function" name="__iadd__" signature="x.__iadd__(y) &lt;==&gt; x+=y" />
        <scope doc="return a reverse iterator over the deque" ilk="function" name="__reversed__" signature="D.__reversed__()" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="__copy__" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" line="292" lineend="315" name="fifo">
        <scope ilk="function" line="299" lineend="300" name="__len__" returns="len()" signature="__len__(self)">
          <variable citdl="fifo" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="293" lineend="297" name="__init__" signature="__init__(self, list=None)">
          <variable citdl="fifo" ilk="argument" name="self" />
          <variable ilk="argument" name="list" />
        </scope>
        <scope ilk="function" line="308" lineend="309" name="push" signature="push(self, data)">
          <variable citdl="fifo" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="302" lineend="303" name="is_empty" returns="bool" signature="is_empty(self)">
          <variable citdl="fifo" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="311" lineend="315" name="pop" returns="tuple" signature="pop(self)">
          <variable citdl="fifo" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="305" lineend="306" name="first" signature="first(self)">
          <variable citdl="fifo" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="deque()" line="295" name="list" />
      </scope>
      <scope ilk="function" line="332" lineend="336" name="find_prefix_at_end" returns="len()" signature="find_prefix_at_end(haystack, needle)">
        <variable ilk="argument" name="haystack" />
        <variable ilk="argument" name="needle" />
        <variable citdl="len()" line="333" name="l" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" line="276" lineend="290" name="simple_producer">
        <scope ilk="function" line="278" lineend="280" name="__init__" signature="__init__(self, data, buffer_size=512)">
          <variable citdl="int" ilk="argument" name="buffer_size" />
          <variable citdl="simple_producer" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="282" lineend="290" name="more" returns="list" signature="more(self)">
          <variable citdl="simple_producer" ilk="argument" name="self" />
          <variable citdl="list" line="284" name="result" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="280" name="buffer_size" />
        <variable attributes="__instancevar__" citdl="list" line="279" name="data" />
      </scope>
      <import module="socket" />
    </scope>
    