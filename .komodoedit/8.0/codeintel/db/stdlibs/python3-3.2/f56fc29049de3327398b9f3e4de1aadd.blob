<scope doc="Provides classes to represent module version numbers (one class for&#xA;each style of version numbering).  There are currently two such classes implemented: StrictVersion and LooseVersion.  Every version number class implements the following interface: * the &apos;parse&apos; method takes a string and parses it to some internal representation; if the string is an invalid version number, &apos;parse&apos; raises a ValueError exception * the class constructor takes an optional string argument which, if supplied, is passed to &apos;parse&apos; * __str__ reconstructs the string that was passed to &apos;parse&apos; (or" ilk="blob" lang="Python" name="distutils.version">
      <scope classrefs="Version" doc="Version numbering for anarchists and software realists.&#xA;Implements the standard interface for version number classes as described above.  A version number consists of a series of numbers, separated by either periods or strings of letters.  When comparing version numbers, the numeric components will be compared numerically, and the alphabetic components lexically.  The following are all valid version numbers, in no particular order:  1.5.1 1.5.2b2 161" ilk="class" line="273" lineend="346" name="LooseVersion">
        <scope ilk="function" line="329" lineend="330" name="__str__" signature="__str__(self)">
          <variable citdl="LooseVersion" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="313" lineend="326" name="parse" signature="parse(self, vstring)">
          <variable citdl="LooseVersion" ilk="argument" name="self" />
          <variable citdl="list" line="318" name="components" />
          <variable ilk="argument" name="vstring" />
        </scope>
        <scope ilk="function" line="337" lineend="346" name="_cmp" returns="int" signature="_cmp(self, other)">
          <variable citdl="LooseVersion" ilk="argument" name="self" />
          <variable citdl="" ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="333" lineend="334" name="__repr__" returns="str" signature="__repr__(self)">
          <variable citdl="LooseVersion" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="308" lineend="310" name="__init__" signature="__init__(self, vstring=None)">
          <variable citdl="LooseVersion" ilk="argument" name="self" />
          <variable ilk="argument" name="vstring" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="326" name="version" />
        <variable attributes="__instancevar__" line="317" name="vstring" />
        <variable citdl="re.compile()" line="306" name="component_re" />
      </scope>
      <scope classrefs="Version" doc="Version numbering for anal retentives and software idealists.&#xA;Implements the standard interface for version number classes as described above.  A version number consists of two or three dot-separated numeric components, with an optional &quot;pre-release&quot; tag on the end.  The pre-release tag consists of the letter &apos;a&apos; or &apos;b&apos; followed by a number.  If the numeric components of two version numbers are equal, then one with a pre-release tag will always be deemed earlier (lesser) than one without.  The following are valid version numbers (shown in the order that would be obtained by sorting according to the supplied cmp function):" ilk="class" line="99" lineend="204" name="StrictVersion">
        <scope ilk="function" line="140" lineend="156" name="parse" signature="parse(self, vstring)">
          <variable line="145" name="prerelease_num" />
          <variable line="145" name="major" />
          <variable citdl="StrictVersion" ilk="argument" name="self" />
          <variable ilk="argument" name="vstring" />
          <variable line="145" name="patch" />
          <variable line="145" name="prerelease" />
          <variable line="145" name="minor" />
          <variable citdl="self.version_re.match()" line="141" name="match" />
        </scope>
        <scope ilk="function" line="172" lineend="204" name="_cmp" returns="int" signature="_cmp(self, other)">
          <variable citdl="StrictVersion" ilk="argument" name="self" />
          <variable citdl="" ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="159" lineend="169" name="__str__" returns="str.join()" signature="__str__(self)">
          <variable citdl="StrictVersion" ilk="argument" name="self" />
          <variable citdl="str.join()" line="162" name="vstring" />
        </scope>
        <variable attributes="__instancevar__" citdl="tuple()" line="149" name="version" />
        <variable attributes="__instancevar__" citdl="tuple" line="154" name="prerelease" />
        <variable citdl="re.compile()" line="136" name="version_re" />
      </scope>
      <scope classrefs="object" doc="Abstract base class for version numbering classes.  Just provides&#xA;constructor (__init__) and reproducer (__repr__), because those seem to be the same for all version numbering classes; and route rich comparisons to _cmp." ilk="class" line="31" lineend="79" name="Version">
        <scope ilk="function" line="51" lineend="55" name="__ne__" returns="bool" signature="__ne__(self, other)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="self._cmp()" line="52" name="c" />
        </scope>
        <scope ilk="function" line="63" lineend="67" name="__le__" returns="bool" signature="__le__(self, other)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="self._cmp()" line="64" name="c" />
        </scope>
        <scope ilk="function" line="42" lineend="43" name="__repr__" returns="tuple" signature="__repr__(self)">
          <variable citdl="Version" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="38" lineend="40" name="__init__" signature="__init__(self, vstring=None)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="vstring" />
        </scope>
        <scope ilk="function" line="69" lineend="73" name="__gt__" returns="bool" signature="__gt__(self, other)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="self._cmp()" line="70" name="c" />
        </scope>
        <scope ilk="function" line="57" lineend="61" name="__lt__" returns="bool" signature="__lt__(self, other)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="self._cmp()" line="58" name="c" />
        </scope>
        <scope ilk="function" line="45" lineend="49" name="__eq__" returns="bool" signature="__eq__(self, other)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="self._cmp()" line="46" name="c" />
        </scope>
        <scope ilk="function" line="75" lineend="79" name="__ge__" returns="bool" signature="__ge__(self, other)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="self._cmp()" line="76" name="c" />
        </scope>
      </scope>
      <import module="re" />
    </scope>
    