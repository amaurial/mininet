<scope doc="Heap queue algorithm (a.k.a. priority queue).&#xA;Heaps are arrays for which a[k] &lt;= a[2*k+1] and a[k] &lt;= a[2*k+2] for all k, counting elements from 0.  For the sake of comparison, non-existing elements are considered to be infinite.  The interesting property of a heap is that a[0] is always its smallest element.  Usage:  heap = []            # creates an empty heap heappush(heap, item) # pushes a new item on the heap item = heappop(heap) # pops the smallest item from the heap" ilk="blob" lang="Python" name="heapq">
      <variable citdl="str" line="33" name="__about__" />
      <variable citdl="list" line="127" name="__all__" />
      <import module="bisect" />
      <scope classrefs="object" doc="chain(*iterables) --&gt; chain object&#xA;Return a chain object whose .__next__() method returns elements from the first iterable until it is exhausted, then elements from the next iterable, until all of the iterables are exhausted." ilk="class" name="chain">
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
      </scope>
      <scope classrefs="object" doc="count(start=0, step=1) --&gt; count object&#xA;Return a count object whose .__next__() method returns consecutive values. Equivalent to:  def count(firstval=0, step=1): x = firstval while 1: yield x x += step" ilk="class" name="count">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <scope doc="Transform list into a heap, in-place, in O(len(heap)) time." ilk="function" line="172" lineend="181" name="heapify" signature="heapify(x)">
        <variable ilk="argument" name="x" />
        <variable citdl="len()" line="174" name="n" />
      </scope>
      <scope doc="Pop the smallest item off the heap, maintaining the heap&#xA;invariant." ilk="function" line="138" lineend="147" name="heappop" returns="heap.pop()" signature="heappop(heap)">
        <variable citdl="heap.pop()" line="140" name="lastelt" />
        <variable citdl="heap.pop()" line="142" name="returnitem" />
        <variable ilk="argument" name="heap" />
      </scope>
      <scope doc="Push item onto heap, maintaining the heap invariant." ilk="function" line="133" lineend="136" name="heappush" signature="heappush(heap, item)">
        <variable ilk="argument" name="item" />
        <variable ilk="argument" name="heap" />
      </scope>
      <scope doc="Push item on the heap, then pop and return the smallest item&#xA;from the heap." ilk="function" line="165" lineend="170" name="heappushpop" signature="heappushpop(heap, item)">
        <variable ilk="argument" name="item" />
        <variable ilk="argument" name="heap" />
      </scope>
      <scope doc="Pop and return the current smallest value, and add the new&#xA;item." ilk="function" line="149" lineend="163" name="heapreplace" signature="heapreplace(heap, item)">
        <variable ilk="argument" name="item" />
        <variable line="160" name="returnitem" />
        <variable ilk="argument" name="heap" />
      </scope>
      <scope classrefs="object" doc="islice(iterable, [start,] stop [, step]) --&gt; islice object&#xA;Return an iterator whose next() method returns selected values from an iterable.  If start is specified, will skip all preceding elements; otherwise, start defaults to zero.  Step defaults to one.  If specified as another value, step determines how many values are skipped between successive calls.  Works like a slice() on a list but returns an iterator." ilk="class" name="islice">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope doc="Merge multiple sorted inputs into a single sorted output." ilk="function" line="311" name="merge" signature="merge(*iterables)">
        <variable attributes="protected" citdl="StopIteration" line="322" name="_StopIteration" />
        <variable citdl="h.append" line="325" name="h_append" />
        <variable attributes="protected" citdl="heappop" line="322" name="_heappop" />
        <variable attributes="protected" citdl="heapreplace" line="322" name="_heapreplace" />
        <variable attributes="varargs" ilk="argument" name="iterables" />
        <variable citdl="list" line="324" name="h" />
        <variable citdl="it.__next__" line="328" name="next" />
      </scope>
      <scope doc="Find the n largest elements in a dataset." ilk="function" line="385" lineend="420" name="nlargest" returns="list" signature="nlargest(n, iterable, key=None)">
        <variable citdl="list()" line="394" name="head" />
        <variable line="417" name="in1" />
        <variable line="417" name="in2" />
        <variable ilk="argument" name="n" />
        <variable citdl="_nlargest()" line="413" name="result" />
        <variable ilk="argument" name="key" />
        <variable citdl="zip()" line="393" name="it" />
        <variable ilk="argument" name="iterable" />
        <variable citdl="len()" line="403" name="size" />
      </scope>
      <scope doc="Find the n smallest elements in a dataset." ilk="function" line="348" lineend="382" name="nsmallest" returns="list" signature="nsmallest(n, iterable, key=None)">
        <variable citdl="list()" line="356" name="head" />
        <variable line="379" name="in1" />
        <variable line="379" name="in2" />
        <variable ilk="argument" name="n" />
        <variable citdl="_nsmallest()" line="375" name="result" />
        <variable ilk="argument" name="key" />
        <variable citdl="zip()" line="355" name="it" />
        <variable ilk="argument" name="iterable" />
        <variable citdl="len()" line="365" name="size" />
      </scope>
      <scope classrefs="object" doc="repeat(object [,times]) -&gt; create an iterator which returns the object&#xA;for the specified number of times.  If not specified, returns the object endlessly." ilk="class" name="repeat">
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <scope doc="tee(iterable, n=2) --&gt; tuple of n independent iterators." ilk="function" name="tee" signature="tee(iterable, n=2) --&gt; tuple of n independent iterators." />
      <variable attributes="__hidden__" citdl="list" line="428" name="sort" />
      <variable attributes="protected __hidden__" citdl="nsmallest" line="347" name="_nsmallest" />
      <variable attributes="protected __hidden__" citdl="nlargest" line="384" name="_nlargest" />
      <scope attributes="protected __hidden__" ilk="function" line="285" lineend="303" name="_siftup" signature="_siftup(heap, pos)">
        <variable ilk="argument" name="heap" />
        <variable citdl="int" ilk="argument" name="pos" />
        <variable citdl="len()" line="286" name="endpos" />
        <variable line="287" name="startpos" />
        <variable line="288" name="newitem" />
        <variable citdl="int" line="290" name="childpos" />
        <variable citdl="int" line="293" name="rightpos" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="232" lineend="244" name="_siftdown" signature="_siftdown(heap, startpos, pos)">
        <variable ilk="argument" name="heap" />
        <variable ilk="argument" name="startpos" />
        <variable citdl="int" ilk="argument" name="pos" />
        <variable line="233" name="newitem" />
        <variable citdl="int" line="237" name="parentpos" />
        <variable line="238" name="parent" />
      </scope>
      <variable attributes="__hidden__" citdl="list" line="424" name="heap" />
      <variable attributes="__hidden__" citdl="list" line="425" name="data" />
    </scope>
    