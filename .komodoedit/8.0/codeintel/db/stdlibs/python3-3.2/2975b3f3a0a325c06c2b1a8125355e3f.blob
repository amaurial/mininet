<scope doc="JSON (JavaScript Object Notation) &lt;http://json.org&gt; is a subset of&#xA;JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data interchange format.  :mod:`json` exposes an API familiar to users of the standard library :mod:`marshal` and :mod:`pickle` modules. It is the externally maintained version of the :mod:`json` library contained in Python 2.6, but maintains compatibility with Python 2.4 and Python 2.5 and (currently) has significant performance advantages, even without using the optional C extension for speedups. " ilk="blob" lang="Python" name="json">
      <scope classrefs="object" doc="Simple JSON &lt;http://json.org&gt; decoder&#xA;Performs the following translations in decoding by default:  +---------------+-------------------+ | JSON          | Python            | +===============+===================+ | object        | dict              | +---------------+-------------------+ | array         | list              | +---------------+-------------------+ | string        | str               |" ilk="class" name="JSONDecoder">
        <scope doc="Decode a JSON document from ``s`` (a ``str`` beginning with&#xA;a JSON document) and return a 2-tuple of the Python&#xA;representation and the index in ``s`` where the document&#xA;ended." ilk="function" name="raw_decode" signature="raw_decode(self, s, idx=0)" />
        <scope doc="Return the Python representation of ``s`` (a ``str``&#xA;instance containing a JSON document)." ilk="function" name="decode" signature="decode(self, s, _w=&lt;built-in method match of _sre.SRE_Pattern object at 0x04996228&gt;)" />
        <scope doc="``object_hook``, if specified, will be called with the&#xA;result of every JSON object decoded and its return value&#xA;will be used in place of the given ``dict``." ilk="function" name="__init__" signature="__init__(self, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)" />
      </scope>
      <scope classrefs="object" doc="Extensible JSON &lt;http://json.org&gt; encoder for Python data structures.&#xA;Supports the following objects and types by default:  +-------------------+---------------+ | Python            | JSON          | +===================+===============+ | dict              | object        | +-------------------+---------------+ | list, tuple       | array         | +-------------------+---------------+ | str               | string        |" ilk="class" name="JSONEncoder">
        <scope doc="Implement this method in a subclass such that it returns a&#xA;serializable object for ``o``, or calls the base&#xA;implementation (to raise a ``TypeError``)." ilk="function" name="default" signature="default(self, o)" />
        <scope doc="Constructor for JSONEncoder, with sensible defaults." ilk="function" name="__init__" signature="__init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)" />
        <scope doc="Return a JSON string representation of a Python data&#xA;structure." ilk="function" name="encode" signature="encode(self, o)" />
        <scope doc="Encode the given object and yield each string representation&#xA;as available." ilk="function" name="iterencode" signature="iterencode(self, o, _one_shot=False)" />
      </scope>
      <variable citdl="list" line="101" name="__all__" />
      <import module="decoder" />
      <scope doc="Serialize ``obj`` as a JSON formatted stream to ``fp`` (a&#xA;``.write()``-supporting file-like object)." ilk="function" line="121" lineend="177" name="dump" signature="dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, **kw)">
        <variable ilk="argument" name="fp" />
        <variable ilk="argument" name="obj" />
        <variable ilk="argument" name="default" />
        <variable citdl="True" ilk="argument" name="check_circular" />
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable citdl="False" ilk="argument" name="skipkeys" />
        <variable citdl="True" ilk="argument" name="allow_nan" />
        <variable ilk="argument" name="indent" />
        <variable citdl="True" ilk="argument" name="ensure_ascii" />
        <variable ilk="argument" name="separators" />
        <variable citdl="_default_encoder.iterencode()" line="166" name="iterable" />
        <variable citdl="JSONEncoder" ilk="argument" name="cls" />
      </scope>
      <scope doc="Serialize ``obj`` to a JSON formatted ``str``." ilk="function" line="180" lineend="231" name="dumps" returns="_default_encoder.encode()" signature="dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, **kw)">
        <variable ilk="argument" name="obj" />
        <variable ilk="argument" name="default" />
        <variable citdl="True" ilk="argument" name="check_circular" />
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable citdl="False" ilk="argument" name="skipkeys" />
        <variable citdl="True" ilk="argument" name="allow_nan" />
        <variable ilk="argument" name="indent" />
        <variable citdl="True" ilk="argument" name="ensure_ascii" />
        <variable ilk="argument" name="separators" />
        <variable citdl="JSONEncoder" ilk="argument" name="cls" />
      </scope>
      <import module="encoder" />
      <scope doc="Deserialize ``fp`` (a ``.read()``-supporting file-like&#xA;object containing a JSON document) to a Python object." ilk="function" line="237" lineend="262" name="load" returns="loads()" signature="load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)">
        <variable ilk="argument" name="fp" />
        <variable ilk="argument" name="parse_constant" />
        <variable ilk="argument" name="parse_float" />
        <variable ilk="argument" name="object_hook" />
        <variable ilk="argument" name="parse_int" />
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable ilk="argument" name="object_pairs_hook" />
        <variable ilk="argument" name="cls" />
      </scope>
      <scope doc="Deserialize ``s`` (a ``str`` instance containing a JSON&#xA;document) to a Python object." ilk="function" line="265" lineend="320" name="loads" returns="_default_decoder.decode()" signature="loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)">
        <variable ilk="argument" name="parse_constant" />
        <variable ilk="argument" name="parse_float" />
        <variable ilk="argument" name="object_hook" />
        <variable ilk="argument" name="encoding" />
        <variable ilk="argument" name="parse_int" />
        <variable ilk="argument" name="s" />
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable ilk="argument" name="object_pairs_hook" />
        <variable citdl="JSONDecoder" ilk="argument" name="cls" />
      </scope>
      <import module="scanner" />
      <variable attributes="__hidden__" citdl="str" line="106" name="__author__" />
      <variable attributes="protected __hidden__" citdl="JSONEncoder()" line="111" name="_default_encoder" />
      <variable attributes="__hidden__" citdl="str" line="100" name="__version__" />
      <variable attributes="protected __hidden__" citdl="JSONDecoder()" line="234" name="_default_decoder" />
    </scope>
    