<scope doc="Strptime-related classes and functions.&#xA;CLASSES: LocaleTime -- Discovers and stores locale-specific time information TimeRE -- Creates regexes for pattern matching a string of text containing time information  FUNCTIONS: _getlang -- Figure out what language is being used for the locale strptime -- Calculates the time struct represented by the passed-in string" ilk="blob" lang="Python" name="_strptime">
      <variable citdl="int" name="ASCII" />
      <variable citdl="int" name="IGNORECASE" />
      <scope classrefs="object" doc="Stores and handles locale-specific information related to time.&#xA;ATTRIBUTES: f_weekday -- full weekday names (7-item list) a_weekday -- abbreviated weekday names (7-item list) f_month -- full month names (13-item list; dummy value in [0], which is added by code) a_month -- abbreviated month names (13-item list, dummy value in [0], which is added by code) am_pm -- AM/PM representation (2-item list) LC_date_time -- format string for date/time representation (string) LC_date -- format string for date representation (string)" ilk="class" line="33" lineend="175" name="LocaleTime">
        <scope ilk="function" name="_LocaleTime__calc_am_pm" signature="_LocaleTime__calc_am_pm(self)" />
        <scope ilk="function" name="_LocaleTime__calc_weekday" signature="_LocaleTime__calc_weekday(self)" />
        <scope ilk="function" name="_LocaleTime__calc_date_time" signature="_LocaleTime__calc_date_time(self)" />
        <scope ilk="function" name="_LocaleTime__pad" signature="_LocaleTime__pad(self, seq, front)" />
        <scope ilk="function" name="_LocaleTime__calc_timezone" signature="_LocaleTime__calc_timezone(self)" />
        <scope ilk="function" name="_LocaleTime__calc_month" signature="_LocaleTime__calc_month(self)" />
        <scope doc="Set all attributes." ilk="function" line="52" lineend="79" name="__init__" signature="__init__(self)">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="_getlang()" line="72" name="lang" />
        <scope attributes="private" ilk="function" line="105" lineend="115" name="__calc_am_pm" signature="__calc_am_pm()">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
          <variable citdl="list" line="111" name="am_pm" />
          <variable citdl="time.struct_time()" line="113" name="time_tuple" />
        </scope>
        <scope attributes="private" ilk="function" line="98" lineend="103" name="__calc_month" signature="__calc_month()">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
          <variable citdl="list" line="100" name="a_month" />
          <variable citdl="list" line="101" name="f_month" />
        </scope>
        <scope attributes="private" ilk="function" line="117" lineend="160" name="__calc_date_time" signature="__calc_date_time()">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
          <variable citdl="time.struct_time()" line="125" name="time_tuple" />
          <variable citdl="list" line="126" name="date_time" />
          <variable citdl="list" line="130" name="replacement_pairs" />
          <variable citdl="current_format.replace()" line="141" name="current_format" />
          <variable citdl="str" line="154" name="U_W" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="115" name="am_pm" />
        <variable attributes="__instancevar__" citdl="list" line="103" name="f_month" />
        <scope attributes="private" ilk="function" line="81" lineend="88" name="__pad" returns="list()" signature="__pad(seq, front)">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
          <variable citdl="list()" ilk="argument" name="seq" />
          <variable ilk="argument" name="front" />
        </scope>
        <variable attributes="__instancevar__" line="159" name="LC_date" />
        <scope attributes="private" ilk="function" line="162" lineend="175" name="__calc_timezone" signature="__calc_timezone()">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
          <variable citdl="frozenset()" line="170" name="no_saving" />
          <variable citdl="frozenset()" line="172" name="has_saving" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="95" name="a_weekday" />
        <variable attributes="__instancevar__" citdl="list" line="96" name="f_weekday" />
        <variable attributes="__instancevar__" line="158" name="LC_date_time" />
        <variable attributes="__instancevar__" citdl="tuple" line="175" name="timezone" />
        <scope attributes="private" ilk="function" line="90" lineend="96" name="__calc_weekday" signature="__calc_weekday()">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
          <variable citdl="list" line="93" name="a_weekday" />
          <variable citdl="list" line="94" name="f_weekday" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="102" name="a_month" />
        <variable attributes="__instancevar__" line="160" name="LC_time" />
      </scope>
      <scope classrefs="dict" doc="Handle conversion from format directives to regexes.&#xA;" ilk="class" line="178" lineend="268" name="TimeRE">
        <scope doc="Return a compiled re object for the format string." ilk="function" line="266" lineend="268" name="compile" returns="re_compile()" signature="compile(self, format)">
          <variable citdl="TimeRE" ilk="argument" name="self" />
          <variable ilk="argument" name="format" />
        </scope>
        <scope doc="Return regex pattern for the format string." ilk="function" line="243" lineend="264" name="pattern" returns="tuple" signature="pattern(self, format)">
          <variable citdl="re_compile()" line="256" name="whitespace_replacement" />
          <variable citdl="format.index()" line="259" name="directive_index" />
          <variable citdl="re_compile()" line="254" name="regex_chars" />
          <variable citdl="regex_chars.sub()" ilk="argument" name="format" />
          <variable citdl="TimeRE" ilk="argument" name="self" />
          <variable citdl="str" line="250" name="processed_format" />
        </scope>
        <scope doc="Convert a list to a regex string for matching a directive." ilk="function" name="_TimeRE__seqToRE" signature="_TimeRE__seqToRE(self, to_convert, directive)" />
        <scope doc="Create keys/values." ilk="function" line="181" lineend="222" name="__init__" signature="__init__(self, locale_time=None)">
          <variable ilk="argument" name="locale_time" />
          <variable citdl="TimeRE" ilk="argument" name="self" />
          <variable citdl="super()" line="191" name="base" />
        </scope>
        <variable attributes="__instancevar__" citdl="LocaleTime" line="188" name="locale_time" />
        <scope attributes="private" doc="Convert a list to a regex string for matching a directive.&#xA;&#xA;Want possible matching values to be from longest to shortest.  This&#xA;prevents the possibility of a match occuring for a value that also&#xA;a substring of a larger value that should have matched (e.g., &apos;abc&apos;&#xA;matching when &apos;abcdef&apos; should have been the match).&#xA;" ilk="function" line="224" lineend="241" name="__seqToRE" returns="tuple" signature="__seqToRE(to_convert, directive)">
          <variable citdl="TimeRE" ilk="argument" name="self" />
          <variable citdl="sorted()" ilk="argument" name="to_convert" />
          <variable ilk="argument" name="directive" />
          <variable citdl="str.join()" line="239" name="regex" />
        </scope>
      </scope>
      <variable citdl="list" line="27" name="__all__" />
      <import module="calendar" />
      <scope classrefs="object" doc="date(year, month, day) --&gt; date object&#xA;" ilk="class" name="datetime_date">
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="Return proleptic Gregorian ordinal." ilk="function" name="toordinal" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="Return a 3-tuple containing ISO year, week number, and&#xA;weekday." ilk="function" name="isocalendar" />
        <scope doc="Formats self with strftime." ilk="function" name="__format__" />
        <scope doc="Return time tuple, compatible with time.localtime()." ilk="function" name="timetuple" />
        <scope doc="Return the day of the week represented by the date." ilk="function" name="weekday" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="Return the day of the week represented by the date." ilk="function" name="isoweekday" />
        <scope doc="Return date with new specified fields." ilk="function" name="replace" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="Return string in ISO 8601 format, YYYY-MM-DD." ilk="function" name="isoformat" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="Return ctime() style string." ilk="function" name="ctime" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="format -&gt; strftime() style string." ilk="function" name="strftime" />
      </scope>
      <scope classrefs="object" doc="Difference between two datetime values.&#xA;" ilk="class" name="datetime_timedelta">
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="Total seconds in the duration." ilk="function" name="total_seconds" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__bool__() &lt;==&gt; x != 0" ilk="function" name="__bool__" signature="x.__bool__() &lt;==&gt; x != 0" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="tzinfo" doc="Fixed offset from UTC implementation of tzinfo.&#xA;" ilk="class" name="datetime_timezone">
        <scope doc="datetime in UTC -&gt; datetime in local time." ilk="function" name="fromutc" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="Return fixed offset." ilk="function" name="utcoffset" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="pickle support" ilk="function" name="__getinitargs__" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="Return None." ilk="function" name="dst" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
        <scope doc="If name is specified when timezone is created, returns the&#xA;name." ilk="function" name="tzname" />
      </scope>
      <import module="locale" />
      <scope doc="Compile a regular expression pattern, returning a pattern&#xA;object." ilk="function" name="re_compile" signature="re_compile(pattern, flags=0)" />
      <scope doc="Escape all non-alphanumeric characters in pattern." ilk="function" name="re_escape" signature="re_escape(pattern)" />
      <import module="time" />
      <variable attributes="protected __hidden__" citdl="TimeRE" line="273" name="_TimeRE_cache" />
      <variable attributes="protected __hidden__" citdl="dict" line="275" name="_regex_cache" />
      <scope attributes="protected __hidden__" doc="Calculate the Julian day based on the year, week of the year, and day of&#xA;the week, with week_start_day representing whether the week of the year&#xA;assumes the week starts on Sunday or Monday (6 or 0)." ilk="function" line="277" lineend="295" name="_calc_julian_from_U_or_W" returns="int" signature="_calc_julian_from_U_or_W(year, week_of_year, day_of_week, week_starts_Mon)">
        <variable ilk="argument" name="year" />
        <variable ilk="argument" name="week_of_year" />
        <variable citdl="int" ilk="argument" name="day_of_week" />
        <variable ilk="argument" name="week_starts_Mon" />
        <variable citdl="int" line="281" name="first_weekday" />
        <variable citdl="int" line="290" name="week_0_length" />
        <variable citdl="int" line="294" name="days_to_week" />
      </scope>
      <variable attributes="protected __hidden__" citdl="_thread_allocate_lock()" line="270" name="_cache_lock" />
      <scope attributes="protected __hidden__" doc="Return a 2-tuple consisting of a time struct and an int containing&#xA;the number of microseconds based on the input string and the&#xA;format string." ilk="function" line="298" lineend="477" name="_strptime" returns="tuple" signature="_strptime(data_string, format=&apos;%a %b %d %H:%M:%S %Y&apos;)">
        <variable ilk="argument" name="data_string" />
        <variable citdl="str" ilk="argument" name="format" />
        <variable citdl="str" line="305" name="msg" />
        <variable attributes="protected" citdl="TimeRE" line="312" name="_TimeRE_cache" />
        <variable citdl="_TimeRE_cache.locale_time" line="316" name="locale_time" />
        <variable citdl="_TimeRE_cache.compile()" line="317" name="format_regex" />
        <variable citdl="str" line="324" name="bad_directive" />
        <variable citdl="format_regex.match()" line="334" name="found" />
        <variable citdl="int()" line="342" name="year" />
        <variable citdl="int" line="343" name="month" />
        <variable citdl="int" line="344" name="hour" />
        <variable citdl="int" line="345" name="tz" />
        <variable citdl="int()" line="346" name="tzoffset" />
        <variable citdl="int" line="349" name="week_of_year" />
        <variable citdl="int" line="350" name="week_of_year_start" />
        <variable citdl="int" line="353" name="weekday" />
        <variable citdl="found.groupdict()" line="354" name="found_dict" />
        <variable citdl="datetime_result.day" line="379" name="day" />
        <variable line="384" name="ampm" />
        <variable citdl="int()" line="399" name="minute" />
        <variable citdl="int()" line="401" name="second" />
        <variable line="403" name="s" />
        <variable citdl="int()" line="406" name="fraction" />
        <variable citdl="int" line="418" name="julian" />
        <variable line="428" name="z" />
        <variable line="435" name="found_zone" />
        <variable line="450" name="week_starts_Mon" />
        <variable citdl="datetime_date.fromordinal()" line="462" name="datetime_result" />
        <variable citdl="found_dict.get()" line="469" name="tzname" />
        <variable citdl="int()" line="471" name="gmtoff" />
      </scope>
      <scope attributes="protected __hidden__" doc="Return a time struct based on the input string and the&#xA;format string." ilk="function" line="479" lineend="483" name="_strptime_time" returns="time.struct_time()" signature="_strptime_time(data_string, format=&apos;%a %b %d %H:%M:%S %Y&apos;)">
        <variable ilk="argument" name="data_string" />
        <variable citdl="str" ilk="argument" name="format" />
        <variable line="482" name="tt" />
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="274" name="_CACHE_MAX_SIZE" />
      <scope attributes="protected __hidden__" ilk="function" line="29" lineend="31" name="_getlang" returns="locale.getlocale()" signature="_getlang()" />
      <scope attributes="protected __hidden__" doc="Return a class cls instance based on the input string and the&#xA;format string." ilk="function" line="485" lineend="499" name="_strptime_datetime" returns="_strptime_datetime.cls()" signature="_strptime_datetime(cls, data_string, format=&apos;%a %b %d %H:%M:%S %Y&apos;)">
        <variable ilk="argument" name="cls" />
        <variable ilk="argument" name="data_string" />
        <variable citdl="str" ilk="argument" name="format" />
        <variable line="488" name="tt" />
        <variable line="488" name="fraction" />
        <variable citdl="list" line="490" name="args" />
        <variable citdl="datetime_timedelta()" line="492" name="tzdelta" />
        <variable citdl="datetime_timezone()" line="494" name="tz" />
      </scope>
    </scope>
    