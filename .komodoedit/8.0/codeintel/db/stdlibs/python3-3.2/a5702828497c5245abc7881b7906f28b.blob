<scope doc="Additional handlers for the logging package for Python. The core package is&#xA;based on PEP 282 and comments thereto in comp.lang.python, and influenced by Apache&apos;s log4j system.  Copyright (C) 2001-2010 Vinay Sajip. All Rights Reserved.  To use, simply &apos;import logging.handlers&apos; and log away!" ilk="blob" lang="Python" name="logging.handlers">
      <scope classrefs="FileHandler" doc="Base class for handlers that rotate log files at a certain point.&#xA;Not meant to be instantiated directly.  Instead, use RotatingFileHandler or TimedRotatingFileHandler." ilk="class" line="53" lineend="83" name="BaseRotatingHandler">
        <scope doc="Use the specified filename for streamed logging" ilk="function" line="59" lineend="67" name="__init__" signature="__init__(self, filename, mode, encoding=None, delay=0)">
          <variable citdl="int" ilk="argument" name="delay" />
          <variable citdl="BaseRotatingHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="encoding" />
          <variable ilk="argument" name="mode" />
          <variable ilk="argument" name="filename" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="69" lineend="83" name="emit" signature="emit(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="BaseRotatingHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="66" name="mode" />
        <variable attributes="__instancevar__" line="67" name="encoding" />
      </scope>
      <scope classrefs="Handler" doc="A handler class which buffers logging records in memory. Whenever each&#xA;record is added to the buffer, a check is made to see if the buffer should be flushed. If it should, then flush() is expected to do what&apos;s needed." ilk="class" line="1058" lineend="1107" name="BufferingHandler">
        <scope doc="Should the handler flush its buffer?" ilk="function" line="1072" lineend="1079" name="shouldFlush" returns="bool" signature="shouldFlush(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="BufferingHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Override to implement custom flushing behaviour." ilk="function" line="1092" lineend="1098" name="flush" signature="flush(self)">
          <variable citdl="BufferingHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Close the handler." ilk="function" line="1100" lineend="1107" name="close" signature="close(self)">
          <variable citdl="BufferingHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="1081" lineend="1090" name="emit" signature="emit(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="BufferingHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Initialize the handler with the buffer size." ilk="function" line="1064" lineend="1070" name="__init__" signature="__init__(self, capacity)">
          <variable citdl="BufferingHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="capacity" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="1070" name="buffer" />
        <variable attributes="__instancevar__" line="1069" name="capacity" />
      </scope>
      <variable citdl="int" line="46" name="DEFAULT_HTTP_LOGGING_PORT" />
      <variable citdl="int" line="47" name="DEFAULT_SOAP_LOGGING_PORT" />
      <variable citdl="int" line="44" name="DEFAULT_TCP_LOGGING_PORT" />
      <variable citdl="int" line="45" name="DEFAULT_UDP_LOGGING_PORT" />
      <scope classrefs="SocketHandler" doc="A handler class which writes logging records, in pickle format, to&#xA;a datagram socket.  The pickle which is sent is that of the LogRecord&apos;s attribute dictionary (__dict__), so that the receiver does not need to have the logging module installed in order to process the logging event.  To unpickle the record at the receiving end into a LogRecord, use the makeLogRecord function." ilk="class" line="562" lineend="598" name="DatagramHandler">
        <scope doc="Initializes the handler with a specific host address and&#xA;port." ilk="function" line="573" lineend="578" name="__init__" signature="__init__(self, host, port)">
          <variable citdl="DatagramHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
        </scope>
        <scope doc="The factory method of SocketHandler is here overridden to&#xA;create a UDP socket (SOCK_DGRAM)." ilk="function" line="580" lineend="586" name="makeSocket" returns="socket.socket()" signature="makeSocket(self)">
          <variable citdl="DatagramHandler" ilk="argument" name="self" />
          <variable citdl="socket.socket()" line="585" name="s" />
        </scope>
        <scope doc="Send a pickled string to a socket." ilk="function" line="588" lineend="598" name="send" signature="send(self, s)">
          <variable citdl="DatagramHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="578" name="closeOnError" />
      </scope>
      <scope classrefs="Handler" doc="A class which sends records to a Web server, using either GET or&#xA;POST semantics." ilk="class" line="986" lineend="1056" name="HTTPHandler">
        <scope doc="Default implementation of mapping the log record into a dict&#xA;that is sent as the CGI data." ilk="function" line="1006" lineend="1012" name="mapLogRecord" returns="dict" signature="mapLogRecord(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="HTTPHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="1014" lineend="1056" name="emit" signature="emit(self, record)">
          <variable citdl="str" line="1031" name="sep" />
          <variable citdl="host.find()" line="1038" name="i" />
          <variable citdl="http.client.HTTPConnection()" line="1024" name="h" />
          <variable citdl="HTTPHandler" ilk="argument" name="self" />
          <variable citdl="str" line="1048" name="s" />
          <variable citdl="str" line="1027" name="url" />
          <variable citdl="list" line="1022" name="host" />
          <variable citdl="urllib.parse.urlencode()" line="1028" name="data" />
          <variable ilk="argument" name="record" />
        </scope>
        <scope doc="Initialize the instance with the host, the request URL, and&#xA;the method (&quot;GET&quot; or &quot;POST&quot;)" ilk="function" line="991" lineend="1004" name="__init__" signature="__init__(self, host, url, method=&apos;GET&apos;, secure=False, credentials=None)">
          <variable ilk="argument" name="host" />
          <variable citdl="False" ilk="argument" name="secure" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="credentials" />
          <variable citdl="HTTPHandler" ilk="argument" name="self" />
          <variable citdl="method.upper()" ilk="argument" name="method" />
        </scope>
        <variable attributes="__instancevar__" line="1001" name="url" />
        <variable attributes="__instancevar__" line="1004" name="credentials" />
        <variable attributes="__instancevar__" line="1000" name="host" />
        <variable attributes="__instancevar__" citdl="False" line="1003" name="secure" />
        <variable attributes="__instancevar__" citdl="method.upper()" line="1002" name="method" />
      </scope>
      <scope classrefs="BufferingHandler" doc="A handler class which buffers logging records in memory, periodically&#xA;flushing them to a target handler. Flushing occurs whenever the buffer is full, or when an event of a certain severity or greater is seen." ilk="class" line="1109" lineend="1159" name="MemoryHandler">
        <scope doc="Check for buffer full or a record at the flushLevel or&#xA;higher." ilk="function" line="1127" lineend="1132" name="shouldFlush" returns="bool" signature="shouldFlush(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="MemoryHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="For a MemoryHandler, flushing means just sending the&#xA;buffered records to the target, if there is one." ilk="function" line="1140" lineend="1151" name="flush" signature="flush(self)">
          <variable citdl="MemoryHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Flush, set the target to None and lose the buffer." ilk="function" line="1153" lineend="1159" name="close" signature="close(self)">
          <variable citdl="MemoryHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the target handler for this handler." ilk="function" line="1134" lineend="1138" name="setTarget" signature="setTarget(self, target)">
          <variable citdl="MemoryHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="target" />
        </scope>
        <scope doc="Initialize the handler with the buffer size, the level at&#xA;which flushing should occur and an optional target." ilk="function" line="1115" lineend="1125" name="__init__" signature="__init__(self, capacity, flushLevel=40, target=None)">
          <variable citdl="MemoryHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="capacity" />
          <variable ilk="argument" name="target" />
          <variable citdl="logging.ERROR" ilk="argument" name="flushLevel" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="1151" name="buffer" />
        <variable attributes="__instancevar__" line="1125" name="target" />
        <variable attributes="__instancevar__" citdl="logging.ERROR" line="1124" name="flushLevel" />
      </scope>
      <scope classrefs="Handler" doc="A handler class which sends events to the NT Event Log. Adds a&#xA;registry entry for the specified application name. If no dllname is provided, win32service.pyd (which contains some basic message placeholders) is used. Note that use of these placeholders will make your event logs big, as the entire message source is held in the log. If you want slimmer logs, you have to pass in the name of your own DLL which contains the message definitions you want to use in the event log." ilk="class" line="886" lineend="984" name="NTEventLogHandler">
        <scope doc="Return the event category for the record." ilk="function" line="932" lineend="939" name="getEventCategory" returns="int" signature="getEventCategory(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="NTEventLogHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the event type for the record." ilk="function" line="941" lineend="952" name="getEventType" returns="self.typemap.get()" signature="getEventType(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="NTEventLogHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the message ID for the event record." ilk="function" line="922" lineend="930" name="getMessageID" returns="int" signature="getMessageID(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="NTEventLogHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Clean up this handler." ilk="function" line="973" lineend="984" name="close" signature="close(self)">
          <variable citdl="NTEventLogHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="954" lineend="971" name="emit" signature="emit(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="self.format()" line="966" name="msg" />
          <variable citdl="NTEventLogHandler" ilk="argument" name="self" />
          <variable citdl="getEventType()" line="965" name="type" />
          <variable citdl="getMessageID()" line="963" name="id" />
          <variable citdl="getEventCategory()" line="964" name="cat" />
        </scope>
        <scope ilk="function" line="896" lineend="920" name="__init__" signature="__init__(self, appname, dllname=None, logtype=&apos;Application&apos;)">
          <variable citdl="str" ilk="argument" name="logtype" />
          <variable citdl="NTEventLogHandler" ilk="argument" name="self" />
          <variable citdl="os.path.split()" ilk="argument" name="dllname" />
          <variable ilk="argument" name="appname" />
        </scope>
        <variable attributes="__instancevar__" citdl="win32evtlog.EVENTLOG_ERROR_TYPE" line="909" name="deftype" />
        <variable attributes="protected __instancevar__" citdl="win32evtlogutil" line="901" name="_welu" />
        <variable attributes="__instancevar__" line="900" name="appname" />
        <variable attributes="__instancevar__" citdl="str" line="907" name="logtype" />
        <variable attributes="__instancevar__" citdl="os.path.split()" line="906" name="dllname" />
        <variable attributes="__instancevar__" citdl="dict" line="910" name="typemap" />
      </scope>
      <scope classrefs="Handler" doc="This handler sends events to a queue. Typically, it would be used together&#xA;with a multiprocessing Queue to centralise logging to file in one process (in a multi-process application), so as to avoid file write contention between processes.  This code is new in Python 3.2, but this class can be copy pasted into user code for use with earlier Python versions." ilk="class" line="1162" lineend="1226" name="QueueHandler">
        <scope doc="Enqueue a record." ilk="function" line="1180" lineend="1188" name="enqueue" signature="enqueue(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="QueueHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Prepares a record for queuing." ilk="function" line="1190" lineend="1213" name="prepare" signature="prepare(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="QueueHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="1215" lineend="1226" name="emit" signature="emit(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="QueueHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Initialise an instance, using the passed queue." ilk="function" line="1173" lineend="1178" name="__init__" signature="__init__(self, queue)">
          <variable ilk="argument" name="queue" />
          <variable citdl="QueueHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="1178" name="queue" />
      </scope>
      <scope classrefs="object" doc="This class implements an internal threaded listener which watches for&#xA;LogRecords being added to a queue, removes them and passes them to a list of handlers for processing." ilk="class" line="1229" lineend="1331" name="QueueListener">
        <scope doc="Handle a record." ilk="function" line="1277" lineend="1286" name="handle" signature="handle(self, record)">
          <variable citdl="prepare()" ilk="argument" name="record" />
          <variable citdl="QueueListener" ilk="argument" name="self" />
        </scope>
        <scope doc="Prepare a record for handling." ilk="function" line="1267" lineend="1275" name="prepare" signature="prepare(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="QueueListener" ilk="argument" name="self" />
        </scope>
        <scope doc="Dequeue a record and return it, optionally blocking." ilk="function" line="1247" lineend="1254" name="dequeue" returns="self.queue.get()" signature="dequeue(self, block)">
          <variable citdl="QueueListener" ilk="argument" name="self" />
          <variable ilk="argument" name="block" />
        </scope>
        <scope doc="Stop the listener." ilk="function" line="1320" lineend="1331" name="stop" signature="stop(self)">
          <variable citdl="QueueListener" ilk="argument" name="self" />
        </scope>
        <scope doc="Start the listener." ilk="function" line="1256" lineend="1265" name="start" signature="start(self)">
          <variable citdl="QueueListener" ilk="argument" name="self" />
        </scope>
        <scope doc="Monitor the queue for records, and ask the handler to deal&#xA;with them." ilk="function" line="1288" lineend="1318" name="_monitor" signature="_monitor(self)">
          <variable line="1296" name="q" />
          <variable citdl="dequeue()" line="1300" name="record" />
          <variable citdl="QueueListener" ilk="argument" name="self" />
          <variable citdl="hasattr()" line="1297" name="has_task_done" />
        </scope>
        <scope doc="Initialise an instance with the specified queue and&#xA;handlers." ilk="function" line="1237" lineend="1245" name="__init__" signature="__init__(self, queue, *handlers)">
          <variable ilk="argument" name="queue" />
          <variable citdl="QueueListener" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="handlers" />
        </scope>
        <variable attributes="__instancevar__" line="1242" name="queue" />
        <variable attributes="protected __instancevar__" citdl="threading.Event()" line="1244" name="_stop" />
        <variable attributes="protected __instancevar__" citdl="threading.Thread()" line="1245" name="_thread" />
        <variable attributes="protected" line="1235" name="_sentinel" />
        <variable attributes="__instancevar__" line="1243" name="handlers" />
      </scope>
      <scope classrefs="BaseRotatingHandler" doc="Handler for logging to a set of files, which switches from one file&#xA;to the next when the current file reaches a certain size." ilk="class" line="85" lineend="158" name="RotatingFileHandler">
        <scope doc="Do a rollover, as described in __init__()." ilk="function" line="122" lineend="142" name="doRollover" signature="doRollover(self)">
          <variable citdl="str" line="131" name="sfn" />
          <variable citdl="RotatingFileHandler" ilk="argument" name="self" />
          <variable citdl="str" line="132" name="dfn" />
        </scope>
        <scope doc="Determine if rollover should occur." ilk="function" line="144" lineend="158" name="shouldRollover" returns="int" signature="shouldRollover(self, record)">
          <variable citdl="self.format()" line="154" name="msg" />
          <variable ilk="argument" name="record" />
          <variable citdl="RotatingFileHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Open the specified file and use it as the stream for&#xA;logging." ilk="function" line="90" lineend="120" name="__init__" signature="__init__(self, filename, mode=&apos;a&apos;, maxBytes=0, backupCount=0, encoding=None, delay=0)">
          <variable citdl="int" ilk="argument" name="delay" />
          <variable citdl="int" ilk="argument" name="backupCount" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="RotatingFileHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="int" ilk="argument" name="maxBytes" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="120" name="backupCount" />
        <variable attributes="__instancevar__" citdl="str" line="141" name="mode" />
        <variable attributes="__instancevar__" citdl="self._open()" line="128" name="stream" />
        <variable attributes="__instancevar__" citdl="int" line="119" name="maxBytes" />
      </scope>
      <scope classrefs="Handler" doc="A handler class which sends an SMTP email for each logging event.&#xA;" ilk="class" line="809" lineend="884" name="SMTPHandler">
        <scope doc="Initialize the handler." ilk="function" line="813" lineend="843" name="__init__" signature="__init__(self, mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None)">
          <variable citdl="list" ilk="argument" name="toaddrs" />
          <variable ilk="argument" name="mailhost" />
          <variable ilk="argument" name="secure" />
          <variable ilk="argument" name="credentials" />
          <variable ilk="argument" name="fromaddr" />
          <variable citdl="SMTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="subject" />
        </scope>
        <scope doc="Determine the subject for the email." ilk="function" line="845" lineend="852" name="getSubject" signature="getSubject(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="SMTPHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="854" lineend="884" name="emit" signature="emit(self, record)">
          <variable citdl="self.format()" line="867" name="msg" />
          <variable ilk="argument" name="record" />
          <variable citdl="SMTPHandler" ilk="argument" name="self" />
          <variable citdl="smtplib.SMTP()" line="866" name="smtp" />
          <variable citdl="smtplib.SMTP_PORT" line="863" name="port" />
        </scope>
        <variable attributes="__instancevar__" line="837" name="username" />
        <variable attributes="__instancevar__" citdl="list" line="841" name="toaddrs" />
        <variable attributes="__instancevar__" line="843" name="secure" />
        <variable attributes="__instancevar__" line="833" name="mailport" />
        <variable attributes="__instancevar__" line="838" name="fromaddr" />
        <variable attributes="__instancevar__" line="833" name="mailhost" />
        <variable attributes="__instancevar__" line="842" name="subject" />
      </scope>
      <variable citdl="int" name="ST_DEV" />
      <variable citdl="int" name="ST_INO" />
      <variable citdl="int" name="ST_MTIME" />
      <variable citdl="int" line="49" name="SYSLOG_TCP_PORT" />
      <variable citdl="int" line="48" name="SYSLOG_UDP_PORT" />
      <scope classrefs="Handler" doc="A handler class which writes logging records, in pickle format, to&#xA;a streaming socket. The socket is kept open across logging calls. If the peer resets it, an attempt is made to reconnect on the next call. The pickle which is sent is that of the LogRecord&apos;s attribute dictionary (__dict__), so that the receiver does not need to have the logging module installed in order to process the logging event.  To unpickle the record at the receiving end into a LogRecord, use the makeLogRecord function." ilk="class" line="407" lineend="560" name="SocketHandler">
        <scope doc="Try to create a socket, using an exponential backoff with a&#xA;max retry time." ilk="function" line="452" lineend="478" name="createSocket" signature="createSocket(self)">
          <variable citdl="SocketHandler" ilk="argument" name="self" />
          <variable citdl="time.time()" line="458" name="now" />
          <variable citdl="int" line="463" name="attempt" />
        </scope>
        <scope doc="Pickles the record in binary format with a length prefix,&#xA;and returns it ready for transmission across the socket." ilk="function" line="507" lineend="520" name="makePickle" returns="struct.pack()" signature="makePickle(self, record)">
          <variable citdl="self.format()" line="514" name="dummy" />
          <variable citdl="pickle.dumps()" line="516" name="s" />
          <variable citdl="record.exc_info" line="512" name="ei" />
          <variable ilk="argument" name="record" />
          <variable citdl="struct.pack()" line="519" name="slen" />
          <variable citdl="SocketHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Handle an error during logging." ilk="function" line="522" lineend="534" name="handleError" signature="handleError(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="SocketHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Send a pickled string to the socket." ilk="function" line="480" lineend="505" name="send" signature="send(self, s)">
          <variable ilk="argument" name="s" />
          <variable citdl="int" line="497" name="sentsofar" />
          <variable citdl="SocketHandler" ilk="argument" name="self" />
          <variable citdl="self.sock.send()" line="500" name="sent" />
          <variable citdl="len()" line="498" name="left" />
        </scope>
        <scope doc="Closes the socket." ilk="function" line="553" lineend="560" name="close" signature="close(self)">
          <variable citdl="SocketHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="A factory method which allows subclasses to define the&#xA;precise type of socket they want." ilk="function" line="441" lineend="450" name="makeSocket" returns="socket.socket()" signature="makeSocket(self, timeout=1)">
          <variable citdl="SocketHandler" ilk="argument" name="self" />
          <variable citdl="socket.socket()" line="446" name="s" />
          <variable citdl="int" ilk="argument" name="timeout" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="536" lineend="551" name="emit" signature="emit(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="SocketHandler" ilk="argument" name="self" />
          <variable citdl="makePickle()" line="546" name="s" />
        </scope>
        <scope doc="Initializes the handler with a specific host address and&#xA;port." ilk="function" line="420" lineend="439" name="__init__" signature="__init__(self, host, port)">
          <variable citdl="SocketHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
        </scope>
        <variable attributes="__instancevar__" citdl="float" line="437" name="retryStart" />
        <variable attributes="__instancevar__" citdl="makeSocket()" line="431" name="sock" />
        <variable attributes="__instancevar__" citdl="int" line="432" name="closeOnError" />
        <variable attributes="__instancevar__" line="429" name="host" />
        <variable attributes="__instancevar__" citdl="time.time()" line="433" name="retryTime" />
        <variable attributes="__instancevar__" citdl="float" line="438" name="retryMax" />
        <variable attributes="__instancevar__" citdl="float" line="473" name="retryPeriod" />
        <variable attributes="__instancevar__" citdl="float" line="439" name="retryFactor" />
        <variable attributes="__instancevar__" line="430" name="port" />
      </scope>
      <scope classrefs="Handler" doc="A handler class which sends formatted logging records to a syslog&#xA;server. Based on Sam Rushing&apos;s syslog module: http://www.nightmare.com/squirl/python-ext/misc/syslog.py Contributed by Nicolas Untz (after which minor refactoring changes have been made)." ilk="class" line="600" lineend="807" name="SysLogHandler">
        <scope doc="Closes the socket." ilk="function" line="751" lineend="757" name="close" signature="close(self)">
          <variable citdl="SysLogHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Initialize a handler." ilk="function" line="703" lineend="726" name="__init__" signature="__init__(self, address=(&apos;localhost&apos;, 514), facility=1, socktype=2)">
          <variable citdl="socket.SOCK_DGRAM" ilk="argument" name="socktype" />
          <variable citdl="SysLogHandler" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="facility" />
          <variable citdl="tuple" ilk="argument" name="address" />
        </scope>
        <scope doc="Map a logging level name to a key in the priority_names map." ilk="function" line="759" lineend="767" name="mapPriority" returns="self.priority_map.get()" signature="mapPriority(self, levelName)">
          <variable citdl="SysLogHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="levelName" />
        </scope>
        <scope doc="Encode the facility and priority." ilk="function" line="738" lineend="749" name="encodePriority" returns="int" signature="encodePriority(self, facility, priority)">
          <variable ilk="argument" name="priority" />
          <variable citdl="SysLogHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="facility" />
        </scope>
        <scope ilk="function" line="728" lineend="736" name="_connect_unixsocket" signature="_connect_unixsocket(self, address)">
          <variable citdl="SysLogHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="address" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="771" lineend="807" name="emit" signature="emit(self, record)">
          <variable citdl="self.format()" line="778" name="msg" />
          <variable ilk="argument" name="record" />
          <variable citdl="SysLogHandler" ilk="argument" name="self" />
          <variable citdl="prio.encode()" line="785" name="prio" />
        </scope>
        <variable citdl="int" line="621" name="LOG_CRIT" />
        <variable attributes="__instancevar__" citdl="int" line="715" name="facility" />
        <variable citdl="int" line="622" name="LOG_ERR" />
        <variable citdl="int" line="620" name="LOG_ALERT" />
        <variable citdl="int" line="631" name="LOG_MAIL" />
        <variable citdl="int" line="619" name="LOG_EMERG" />
        <variable citdl="dict" line="695" name="priority_map" />
        <variable citdl="int" line="634" name="LOG_SYSLOG" />
        <variable citdl="int" line="626" name="LOG_DEBUG" />
        <variable citdl="int" line="623" name="LOG_WARNING" />
        <variable citdl="dict" line="652" name="priority_names" />
        <variable citdl="int" line="639" name="LOG_AUTHPRIV" />
        <variable citdl="int" line="632" name="LOG_DAEMON" />
        <variable citdl="int" line="625" name="LOG_INFO" />
        <variable citdl="int" line="643" name="LOG_LOCAL0" />
        <variable citdl="int" line="638" name="LOG_CRON" />
        <variable citdl="int" line="640" name="LOG_FTP" />
        <variable citdl="int" line="629" name="LOG_KERN" />
        <variable citdl="True" line="769" name="append_nul" />
        <variable attributes="__instancevar__" line="726" name="formatter" />
        <variable citdl="int" line="630" name="LOG_USER" />
        <variable citdl="int" line="637" name="LOG_UUCP" />
        <variable attributes="__instancevar__" citdl="tuple" line="714" name="address" />
        <variable attributes="__instancevar__" citdl="socket.SOCK_DGRAM" line="716" name="socktype" />
        <variable citdl="int" line="648" name="LOG_LOCAL5" />
        <variable citdl="int" line="649" name="LOG_LOCAL6" />
        <variable citdl="int" line="650" name="LOG_LOCAL7" />
        <variable citdl="int" line="636" name="LOG_NEWS" />
        <variable citdl="int" line="644" name="LOG_LOCAL1" />
        <variable citdl="int" line="645" name="LOG_LOCAL2" />
        <variable citdl="int" line="646" name="LOG_LOCAL3" />
        <variable citdl="int" line="633" name="LOG_AUTH" />
        <variable citdl="int" line="647" name="LOG_LOCAL4" />
        <variable attributes="__instancevar__" citdl="socket.socket()" line="723" name="socket" />
        <variable citdl="int" line="635" name="LOG_LPR" />
        <variable citdl="dict" line="667" name="facility_names" />
        <variable attributes="__instancevar__" citdl="int" line="719" name="unixsocket" />
        <variable citdl="int" line="624" name="LOG_NOTICE" />
      </scope>
      <scope classrefs="BaseRotatingHandler" doc="Handler for logging to a file, rotating the log file at certain timed&#xA;intervals.  If backupCount is &gt; 0, when rollover is done, no more than backupCount files are kept - the oldest ones are deleted." ilk="class" line="160" lineend="354" name="TimedRotatingFileHandler">
        <scope doc="Work out the rollover time based on the specified time." ilk="function" line="221" lineend="278" name="computeRollover" returns="int()" signature="computeRollover(self, currentTime)">
          <variable line="270" name="dstNow" />
          <variable citdl="int()" line="265" name="daysToWait" />
          <variable ilk="argument" name="currentTime" />
          <variable citdl="TimedRotatingFileHandler" ilk="argument" name="self" />
          <variable citdl="int()" line="268" name="newRolloverAt" />
          <variable line="241" name="currentSecond" />
          <variable citdl="int" line="243" name="r" />
          <variable citdl="time.localtime()" line="236" name="t" />
          <variable line="239" name="currentHour" />
          <variable line="271" name="dstAtRollover" />
          <variable line="262" name="day" />
          <variable line="240" name="currentMinute" />
          <variable citdl="int" line="225" name="result" />
        </scope>
        <scope doc="Determine the files to delete when rolling over." ilk="function" line="292" lineend="313" name="getFilesToDelete" returns="list" signature="getFilesToDelete(self)">
          <variable citdl="list" line="305" name="suffix" />
          <variable citdl="TimedRotatingFileHandler" ilk="argument" name="self" />
          <variable citdl="os.listdir()" line="299" name="fileNames" />
          <variable citdl="str" line="301" name="prefix" />
          <variable citdl="list" line="300" name="result" />
          <variable citdl="len()" line="302" name="plen" />
          <variable line="298" name="dirName" />
          <variable line="298" name="baseName" />
        </scope>
        <scope doc="Determine if rollover should occur." ilk="function" line="280" lineend="290" name="shouldRollover" returns="int" signature="shouldRollover(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="TimedRotatingFileHandler" ilk="argument" name="self" />
          <variable citdl="int()" line="287" name="t" />
        </scope>
        <scope doc="do a rollover; in this case, a date/time stamp is appended&#xA;to the filename when the rollover happens." ilk="function" line="315" lineend="354" name="doRollover" signature="doRollover(self)">
          <variable line="347" name="dstNow" />
          <variable citdl="int()" line="341" name="currentTime" />
          <variable citdl="TimedRotatingFileHandler" ilk="argument" name="self" />
          <variable citdl="computeRollover()" line="342" name="newRolloverAt" />
          <variable citdl="self.baseFilename" line="332" name="dfn" />
          <variable citdl="self.computeRollover()" line="327" name="t" />
          <variable citdl="time.gmtime()" line="329" name="timeTuple" />
          <variable line="348" name="dstAtRollover" />
        </scope>
        <scope ilk="function" line="168" lineend="219" name="__init__" signature="__init__(self, filename, when=&apos;h&apos;, interval=1, backupCount=0, encoding=None, delay=False, utc=False)">
          <variable citdl="False" ilk="argument" name="utc" />
          <variable citdl="int" ilk="argument" name="backupCount" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="TimedRotatingFileHandler" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="interval" />
          <variable citdl="str" ilk="argument" name="when" />
          <variable ilk="argument" name="filename" />
          <variable citdl="False" ilk="argument" name="delay" />
          <variable citdl="int()" line="216" name="t" />
        </scope>
        <variable attributes="__instancevar__" citdl="int()" line="207" name="dayOfWeek" />
        <variable attributes="__instancevar__" citdl="False" line="172" name="utc" />
        <variable attributes="__instancevar__" citdl="int" line="171" name="backupCount" />
        <variable attributes="__instancevar__" citdl="str" line="187" name="suffix" />
        <variable attributes="__instancevar__" citdl="self._open()" line="325" name="stream" />
        <variable attributes="__instancevar__" citdl="int" line="186" name="interval" />
        <variable attributes="__instancevar__" citdl="when.upper()" line="170" name="when" />
        <variable attributes="__instancevar__" citdl="str" line="339" name="mode" />
        <variable attributes="__instancevar__" citdl="computeRollover()" line="219" name="rolloverAt" />
        <variable attributes="__instancevar__" citdl="str" line="188" name="extMatch" />
      </scope>
      <scope classrefs="FileHandler" doc="A handler for logging to a file, which watches the file&#xA;to see if it has changed while in use. This can happen because of usage of programs such as newsyslog and logrotate which perform log file rotation. This handler, intended for use under Unix, watches the file to see if it has changed since the last emit. (A file has changed if its device or inode have changed.) If it has changed, the old file stream is closed, and the file opened to get a new stream.  This handler is not appropriate for use under Windows, because under Windows open files cannot be moved or renamed - logging" ilk="class" line="356" lineend="405" name="WatchedFileHandler">
        <scope ilk="function" line="376" lineend="382" name="__init__" signature="__init__(self, filename, mode=&apos;a&apos;, encoding=None, delay=0)">
          <variable citdl="int" ilk="argument" name="delay" />
          <variable citdl="os.stat()" line="381" name="stat" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="WatchedFileHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="384" lineend="405" name="emit" signature="emit(self, record)">
          <variable ilk="argument" name="record" />
          <variable citdl="WatchedFileHandler" ilk="argument" name="self" />
          <variable citdl="int" line="394" name="changed" />
          <variable citdl="os.stat()" line="393" name="stat" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="379" name="ino" />
        <variable attributes="__instancevar__" citdl="self._open()" line="401" name="stream" />
        <variable attributes="__instancevar__" citdl="int" line="379" name="dev" />
      </scope>
      <import module="codecs" />
      <import module="logging" />
      <import module="os" />
      <import module="pickle" />
      <import module="queue" />
      <import module="re" />
      <import module="socket" />
      <import module="struct" />
      <import module="threading" />
      <import module="time" />
      <variable attributes="__hidden__" line="33" name="threading" />
      <variable attributes="protected __hidden__" citdl="int" line="51" name="_MIDNIGHT" />
      <variable attributes="__hidden__" line="38" name="codecs" />
    </scope>
    