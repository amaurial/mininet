<scope doc="This module provides socket operations and some related functions.&#xA;On Unix, it supports IP (Internet Protocol) and Unix domain sockets. On other systems, it only supports IP. Functions specific for a socket are available as methods of the socket object.  Functions:  socket() -- create a new socket object socketpair() -- create a pair of new socket objects [*] fromfd() -- create a socket object from an open file descriptor [*] gethostname() -- return the current hostname" ilk="blob" lang="Python" name="socket">
      <variable citdl="int" name="AF_APPLETALK" />
      <variable citdl="int" name="AF_DECnet" />
      <variable citdl="int" name="AF_INET" />
      <variable citdl="int" name="AF_INET6" />
      <variable citdl="int" name="AF_IPX" />
      <variable citdl="int" name="AF_IRDA" />
      <variable citdl="int" name="AF_SNA" />
      <variable citdl="int" name="AF_UNSPEC" />
      <variable citdl="int" name="AI_ADDRCONFIG" />
      <variable citdl="int" name="AI_ALL" />
      <variable citdl="int" name="AI_CANONNAME" />
      <variable citdl="int" name="AI_NUMERICHOST" />
      <variable citdl="int" name="AI_NUMERICSERV" />
      <variable citdl="int" name="AI_PASSIVE" />
      <variable citdl="int" name="AI_V4MAPPED" />
      <variable citdl="PyCapsule" name="CAPI" />
      <variable citdl="int" name="EAGAIN" />
      <variable citdl="int" name="EAI_AGAIN" />
      <variable citdl="int" name="EAI_BADFLAGS" />
      <variable citdl="int" name="EAI_FAIL" />
      <variable citdl="int" name="EAI_FAMILY" />
      <variable citdl="int" name="EAI_MEMORY" />
      <variable citdl="int" name="EAI_NODATA" />
      <variable citdl="int" name="EAI_NONAME" />
      <variable citdl="int" name="EAI_SERVICE" />
      <variable citdl="int" name="EAI_SOCKTYPE" />
      <variable citdl="int" name="EBADF" />
      <variable citdl="int" name="EINTR" />
      <variable citdl="int" name="EWOULDBLOCK" />
      <variable citdl="int" name="INADDR_ALLHOSTS_GROUP" />
      <variable citdl="int" name="INADDR_ANY" />
      <variable citdl="int" name="INADDR_BROADCAST" />
      <variable citdl="int" name="INADDR_LOOPBACK" />
      <variable citdl="int" name="INADDR_MAX_LOCAL_GROUP" />
      <variable citdl="int" name="INADDR_NONE" />
      <variable citdl="int" name="INADDR_UNSPEC_GROUP" />
      <variable citdl="int" name="IPPORT_RESERVED" />
      <variable citdl="int" name="IPPORT_USERRESERVED" />
      <variable citdl="int" name="IPPROTO_ICMP" />
      <variable citdl="int" name="IPPROTO_IP" />
      <variable citdl="int" name="IPPROTO_RAW" />
      <variable citdl="int" name="IPPROTO_TCP" />
      <variable citdl="int" name="IPPROTO_UDP" />
      <variable citdl="int" name="IPV6_CHECKSUM" />
      <variable citdl="int" name="IPV6_DONTFRAG" />
      <variable citdl="int" name="IPV6_HOPLIMIT" />
      <variable citdl="int" name="IPV6_HOPOPTS" />
      <variable citdl="int" name="IPV6_JOIN_GROUP" />
      <variable citdl="int" name="IPV6_LEAVE_GROUP" />
      <variable citdl="int" name="IPV6_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_MULTICAST_IF" />
      <variable citdl="int" name="IPV6_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_PKTINFO" />
      <variable citdl="int" name="IPV6_RECVRTHDR" />
      <variable citdl="int" name="IPV6_RTHDR" />
      <variable citdl="int" name="IPV6_UNICAST_HOPS" />
      <variable citdl="int" name="IPV6_V6ONLY" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_RECVDSTADDR" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TTL" />
      <variable citdl="int" name="MSG_CTRUNC" />
      <variable citdl="int" name="MSG_DONTROUTE" />
      <variable citdl="int" name="MSG_OOB" />
      <variable citdl="int" name="MSG_PEEK" />
      <variable citdl="int" name="MSG_TRUNC" />
      <variable citdl="int" name="NI_DGRAM" />
      <variable citdl="int" name="NI_MAXHOST" />
      <variable citdl="int" name="NI_MAXSERV" />
      <variable citdl="int" name="NI_NAMEREQD" />
      <variable citdl="int" name="NI_NOFQDN" />
      <variable citdl="int" name="NI_NUMERICHOST" />
      <variable citdl="int" name="NI_NUMERICSERV" />
      <variable citdl="int" name="RCVALL_MAX" />
      <variable citdl="int" name="RCVALL_OFF" />
      <variable citdl="int" name="RCVALL_ON" />
      <variable citdl="int" name="RCVALL_SOCKETLEVELONLY" />
      <variable citdl="int" name="SHUT_RD" />
      <variable citdl="int" name="SHUT_RDWR" />
      <variable citdl="int" name="SHUT_WR" />
      <variable citdl="int" name="SIO_KEEPALIVE_VALS" />
      <variable citdl="int" name="SIO_RCVALL" />
      <variable citdl="int" name="SOCK_DGRAM" />
      <variable citdl="int" name="SOCK_RAW" />
      <variable citdl="int" name="SOCK_RDM" />
      <variable citdl="int" name="SOCK_SEQPACKET" />
      <variable citdl="int" name="SOCK_STREAM" />
      <variable citdl="int" name="SOL_IP" />
      <variable citdl="int" name="SOL_SOCKET" />
      <variable citdl="int" name="SOL_TCP" />
      <variable citdl="int" name="SOL_UDP" />
      <variable citdl="int" name="SOMAXCONN" />
      <variable citdl="int" name="SO_ACCEPTCONN" />
      <variable citdl="int" name="SO_BROADCAST" />
      <variable citdl="int" name="SO_DEBUG" />
      <variable citdl="int" name="SO_DONTROUTE" />
      <variable citdl="int" name="SO_ERROR" />
      <variable citdl="int" name="SO_EXCLUSIVEADDRUSE" />
      <variable citdl="int" name="SO_KEEPALIVE" />
      <variable citdl="int" name="SO_LINGER" />
      <variable citdl="int" name="SO_OOBINLINE" />
      <variable citdl="int" name="SO_RCVBUF" />
      <variable citdl="int" name="SO_RCVLOWAT" />
      <variable citdl="int" name="SO_RCVTIMEO" />
      <variable citdl="int" name="SO_REUSEADDR" />
      <variable citdl="int" name="SO_SNDBUF" />
      <variable citdl="int" name="SO_SNDLOWAT" />
      <variable citdl="int" name="SO_SNDTIMEO" />
      <variable citdl="int" name="SO_TYPE" />
      <variable citdl="int" name="SO_USELOOPBACK" />
      <scope classrefs="RawIOBase" doc="Raw I/O implementation for stream sockets.&#xA;This class supports the makefile() method on sockets.  It provides the raw I/O interface on top of a socket object." ilk="class" name="SocketIO">
        <scope doc="Return the file descriptor of the underlying socket." ilk="function" name="fileno" signature="fileno(self)" />
        <scope doc="Read up to len(b) bytes into the writable buffer *b* and&#xA;return the number of bytes read." ilk="function" name="readinto" signature="readinto(self, b)" />
        <scope doc="True if the SocketIO is open for reading." ilk="function" name="readable" signature="readable(self)" />
        <scope doc="True if the SocketIO is open for writing." ilk="function" name="writable" signature="writable(self)" />
        <scope doc="Write the given bytes or bytearray object *b* to the socket&#xA;and return the number of bytes written." ilk="function" name="write" signature="write(self, b)" />
        <scope doc="Close the SocketIO object." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="__init__" signature="__init__(self, sock, mode)" />
      </scope>
      <scope classrefs="object" doc="socket([family[, type[, proto]]]) -&gt; socket object&#xA;Open a socket of the given type.  The family argument specifies the address family; it defaults to AF_INET.  The type argument specifies whether this is a stream (SOCK_STREAM, this is the default) or datagram (SOCK_DGRAM) socket.  The protocol argument defaults to 0, specifying the default protocol.  Keyword arguments are accepted.  A socket object represents one endpoint of a network connection.  Methods of socket objects (keyword arguments not allowed): " ilk="class" name="SocketType">
        <scope doc="Shut down the reading side of the socket (flag == SHUT_RD),&#xA;the writing side of the socket (flag == SHUT_WR), or both&#xA;ends (flag == SHUT_RDWR)." ilk="function" name="shutdown" signature="shutdown(flag)" />
        <scope doc="Returns the timeout in seconds (float) associated with&#xA;socket operations." ilk="function" name="gettimeout" signature="gettimeout() -&gt; timeout" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="Connect the socket to a remote address." ilk="function" name="connect" signature="connect(address)" />
        <scope doc="Return the address of the local endpoint." ilk="function" name="getsockname" signature="getsockname() -&gt; address info" />
        <scope doc="Close the socket. It cannot be used after this call." ilk="function" name="close" signature="close()" />
        <scope doc="Like recv_into(buffer[, nbytes[, flags]]) but also return&#xA;the sender&apos;s address info." ilk="function" name="recvfrom_into" signature="recvfrom_into(buffer[, nbytes[, flags]]) -&gt; (nbytes, address info)" />
        <scope ilk="function" name="__init__" />
        <scope doc="Get a socket option." ilk="function" name="getsockopt" signature="getsockopt(level, option[, buffersize]) -&gt; value" />
        <scope doc="This is like connect(address), but returns an error code&#xA;(the errno value) instead of raising an exception when an&#xA;error occurs." ilk="function" name="connect_ex" signature="connect_ex(address) -&gt; errno" />
        <scope doc="Send a data string to the socket." ilk="function" name="send" signature="send(data[, flags]) -&gt; count" />
        <scope doc="A version of recv() that stores its data into a buffer&#xA;rather than creating a new string." ilk="function" name="recv_into" signature="recv_into(buffer, [nbytes[, flags]]) -&gt; nbytes_read" />
        <scope doc="Enable a server to accept connections." ilk="function" name="listen" signature="listen(backlog)" />
        <scope doc="Set a socket option." ilk="function" name="setsockopt" signature="setsockopt(level, option, value)" />
        <scope doc="Control the socket with WSAIoctl syscall." ilk="function" name="ioctl" returns="long" signature="ioctl(cmd, option) -&gt; long" />
        <scope doc="Return the address of the remote endpoint." ilk="function" name="getpeername" signature="getpeername() -&gt; address info" />
        <scope doc="Close the socket object without closing the underlying file&#xA;descriptor.The object cannot be used after this call, but&#xA;the file descriptorcan be reused for other purposes." ilk="function" name="detach" signature="detach()" />
        <scope doc="Receive up to buffersize bytes from the socket." ilk="function" name="recv" signature="recv(buffersize[, flags]) -&gt; data" />
        <scope doc="Set the socket to blocking (flag is true) or non-blocking&#xA;(false)." ilk="function" name="setblocking" signature="setblocking(flag)" />
        <scope doc="Return the integer file descriptor of the socket." ilk="function" name="fileno" returns="int" signature="fileno() -&gt; integer" />
        <scope doc="Bind the socket to a local address." ilk="function" name="bind" signature="bind(address)" />
        <scope doc="Wait for an incoming connection." ilk="function" name="_accept" signature="_accept() -&gt; (integer, address info)" />
        <scope doc="Like recv(buffersize, flags) but also return the sender&apos;s&#xA;address info." ilk="function" name="recvfrom" signature="recvfrom(buffersize[, flags]) -&gt; (data, address info)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="Like send(data, flags) but allows specifying the destination&#xA;address." ilk="function" name="sendto" signature="sendto(data[, flags], address) -&gt; count" />
        <scope doc="Send a data string to the socket." ilk="function" name="sendall" signature="sendall(data[, flags])" />
        <scope doc="Set a timeout on socket operations." ilk="function" name="settimeout" signature="settimeout(timeout)" />
      </scope>
      <variable citdl="int" name="TCP_MAXSEG" />
      <variable citdl="int" name="TCP_NODELAY" />
      <variable citdl="list" name="__all__" />
      <import module="_socket" />
      <scope doc="Connect to *address* and return the socket object." ilk="function" name="create_connection" signature="create_connection(address, timeout=&lt;object object at 0x02AC9038&gt;, source_address=None)" />
      <scope doc="Duplicate an integer socket file descriptor." ilk="function" name="dup" returns="int" signature="dup(integer) -&gt; integer" />
      <import module="errno" />
      <scope classrefs="IOError" doc="&#xA;" ilk="class" name="error" />
      <variable citdl="dict" name="errorTab" />
      <scope doc="Create a socket object from a duplicate of the given file&#xA;descriptor." ilk="function" name="fromfd" signature="fromfd(fd, family, type[, proto]) -&gt; socket object" />
      <scope classrefs="error" doc="&#xA;" ilk="class" name="gaierror" />
      <scope doc="-&gt; list of (family, socktype, proto, canonname, sockaddr)" ilk="function" name="getaddrinfo" signature="getaddrinfo(host, port [, family, socktype, proto, flags])" />
      <scope doc="Returns the default timeout in seconds (float) for new&#xA;socket objects." ilk="function" name="getdefaulttimeout" signature="getdefaulttimeout() -&gt; timeout" />
      <scope doc="Get fully qualified domain name from name." ilk="function" name="getfqdn" signature="getfqdn(name=&apos;&apos;)" />
      <scope doc="Return the true host name, a list of aliases, and a list of&#xA;IP addresses, for a host." ilk="function" name="gethostbyaddr" signature="gethostbyaddr(host) -&gt; (name, aliaslist, addresslist)" />
      <scope doc="Return the IP address (a string of the form&#xA;&apos;255.255.255.255&apos;) for a host." ilk="function" name="gethostbyname" signature="gethostbyname(host) -&gt; address" />
      <scope doc="Return the true host name, a list of aliases, and a list of&#xA;IP addresses, for a host." ilk="function" name="gethostbyname_ex" signature="gethostbyname_ex(host) -&gt; (name, aliaslist, addresslist)" />
      <scope doc="Return the current host name." ilk="function" name="gethostname" returns="str" signature="gethostname() -&gt; string" />
      <scope doc="Get host and port for a sockaddr." ilk="function" name="getnameinfo" signature="getnameinfo(sockaddr, flags) --&gt; (host, port)" />
      <scope doc="Return the protocol number for the named protocol." ilk="function" name="getprotobyname" returns="int" signature="getprotobyname(name) -&gt; integer" />
      <scope doc="Return a port number from a service name and protocol name." ilk="function" name="getservbyname" returns="int" signature="getservbyname(servicename[, protocolname]) -&gt; integer" />
      <scope doc="Return the service name from a port number and protocol&#xA;name." ilk="function" name="getservbyport" returns="str" signature="getservbyport(port[, protocolname]) -&gt; string" />
      <variable citdl="bool" name="has_ipv6" />
      <scope classrefs="error" doc="&#xA;" ilk="class" name="herror" />
      <scope doc="Convert a 32-bit integer from host to network byte order." ilk="function" name="htonl" returns="int" signature="htonl(integer) -&gt; integer" />
      <scope doc="Convert a 16-bit integer from host to network byte order." ilk="function" name="htons" returns="int" signature="htons(integer) -&gt; integer" />
      <scope doc="Convert an IP address in string format (123.45.67.89) to the&#xA;32-bit packed binary format used in low-level network&#xA;functions." ilk="function" name="inet_aton" signature="inet_aton(string) -&gt; bytes giving packed 32-bit IP representation" />
      <scope doc="Convert an IP address from 32-bit packed binary format to&#xA;string format" ilk="function" name="inet_ntoa" signature="inet_ntoa(packed_ip) -&gt; ip_address_string" />
      <import module="io" />
      <scope doc="Convert a 32-bit integer from network to host byte order." ilk="function" name="ntohl" returns="int" signature="ntohl(integer) -&gt; integer" />
      <scope doc="Convert a 16-bit integer from network to host byte order." ilk="function" name="ntohs" returns="int" signature="ntohs(integer) -&gt; integer" />
      <import module="os" />
      <scope doc="Set the default timeout in seconds (float) for new socket&#xA;objects." ilk="function" name="setdefaulttimeout" signature="setdefaulttimeout(timeout)" />
      <scope classrefs="socket" doc="A subclass of _socket.socket adding the makefile() method.&#xA;" ilk="class" name="socket">
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="The arguments are as for io.open() after the filename,&#xA;except the only mode characters supported are &apos;r&apos;, &apos;w&apos; and&#xA;&apos;b&apos;." ilk="function" name="makefile" signature="makefile(...) -&gt; an I/O stream connected to the socket" />
        <scope doc="Wait for an incoming connection." ilk="function" name="accept" signature="accept() -&gt; (socket object, address info)" />
        <scope doc="Wrap __repr__() to reveal the real class name." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="__init__" signature="__init__(self, family=2, type=1, proto=0, fileno=None)" />
        <scope doc="Return a new socket object connected to the same system&#xA;resource." ilk="function" name="dup" signature="dup() -&gt; socket object" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_decref_socketios" signature="_decref_socketios(self)" />
        <scope ilk="function" name="_real_close" signature="_real_close(self, _ss=&lt;class &apos;_socket.socket&apos;&gt;)" />
      </scope>
      <import module="sys" />
      <scope classrefs="error" doc="&#xA;" ilk="class" name="timeout" />
      <variable citdl="int" name="PACKET_OTHERHOST" />
      <variable citdl="int" name="NETLINK_IP6_FW" />
      <variable citdl="int" name="NETLINK_ROUTE" />
      <variable citdl="int" name="TCP_DEFER_ACCEPT" />
      <variable citdl="int" name="TCP_QUICKACK" />
      <variable citdl="int" name="TIPC_CFG_SRV" />
      <variable citdl="int" name="IPPROTO_IPIP" />
      <variable citdl="int" name="IPV6_DSTOPTS" />
      <variable citdl="int" name="TCP_SYNCNT" />
      <variable citdl="int" name="IPPROTO_FRAGMENT" />
      <scope doc="Convert a packed IP address of the given family to string&#xA;format." ilk="function" name="inet_ntop" returns="str" signature="inet_ntop(af, packed_ip) -&gt; string formatted IP address" />
      <variable citdl="int" name="IPPROTO_RSVP" />
      <variable citdl="int" name="TIPC_DEST_DROPPABLE" />
      <variable citdl="int" name="SOL_TIPC" />
      <variable citdl="int" name="TCP_KEEPINTVL" />
      <variable citdl="int" name="IPPROTO_AH" />
      <variable citdl="int" name="IP_MAX_MEMBERSHIPS" />
      <variable citdl="int" name="IPV6_RTHDR_TYPE_0" />
      <variable citdl="int" name="AF_PACKET" />
      <variable citdl="int" name="AF_SECURITY" />
      <variable citdl="int" name="TIPC_MEDIUM_IMPORTANCE" />
      <variable citdl="int" name="TIPC_TOP_SRV" />
      <variable citdl="int" name="IP_RECVOPTS" />
      <variable citdl="int" name="NETLINK_XFRM" />
      <variable citdl="int" name="TIPC_ADDR_NAMESEQ" />
      <variable citdl="int" name="NETLINK_FIREWALL" />
      <variable citdl="int" name="TIPC_HIGH_IMPORTANCE" />
      <variable citdl="int" name="TIPC_WITHDRAWN" />
      <variable citdl="int" name="PF_PACKET" />
      <variable citdl="int" name="IPV6_RECVPKTINFO" />
      <variable citdl="int" name="AF_ATMPVC" />
      <variable citdl="int" name="IPPROTO_PUP" />
      <variable citdl="int" name="EAI_ADDRFAMILY" />
      <variable citdl="int" name="TIPC_SUB_PORTS" />
      <variable citdl="int" name="PACKET_LOOPBACK" />
      <variable citdl="int" name="SOCK_NONBLOCK" />
      <variable citdl="int" name="IPPROTO_ROUTING" />
      <variable citdl="int" name="IPPROTO_TP" />
      <variable citdl="int" name="IPPROTO_ICMPV6" />
      <variable citdl="int" name="TIPC_ADDR_ID" />
      <scope doc="Create a pair of socket objects from the sockets returned by&#xA;the platform socketpair() function." ilk="function" name="socketpair" signature="socketpair([family[, type[, proto]]]) -&gt; (socket object, socket object)" />
      <variable citdl="int" name="AF_KEY" />
      <variable citdl="int" name="IPV6_RTHDRDSTOPTS" />
      <variable citdl="int" name="IPPROTO_IGMP" />
      <variable citdl="int" name="IP_RECVRETOPTS" />
      <variable citdl="int" name="NETLINK_USERSOCK" />
      <variable citdl="int" name="SOCK_CLOEXEC" />
      <variable citdl="int" name="TCP_CORK" />
      <variable citdl="int" name="PACKET_HOST" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_TTL" />
      <variable citdl="int" name="TIPC_NODE_SCOPE" />
      <variable citdl="int" name="IPPROTO_ESP" />
      <variable citdl="int" name="IPPROTO_IPV6" />
      <variable citdl="int" name="IPV6_RECVDSTOPTS" />
      <variable citdl="int" name="AF_ATMSVC" />
      <variable citdl="int" name="TCP_LINGER2" />
      <variable citdl="int" name="TCP_INFO" />
      <variable citdl="int" name="MSG_WAITALL" />
      <variable citdl="int" name="TIPC_CONN_TIMEOUT" />
      <variable citdl="int" name="TIPC_LOW_IMPORTANCE" />
      <variable citdl="int" name="IPPROTO_DSTOPTS" />
      <variable citdl="int" name="AF_TIPC" />
      <variable citdl="int" name="PACKET_FASTROUTE" />
      <variable citdl="int" name="IPPROTO_GRE" />
      <variable citdl="int" name="PACKET_BROADCAST" />
      <variable citdl="int" name="TIPC_SUB_CANCEL" />
      <variable citdl="int" name="IPPROTO_HOPOPTS" />
      <variable citdl="int" name="AF_ECONET" />
      <variable citdl="int" name="AF_ROUTE" />
      <variable citdl="int" name="AF_NETBEUI" />
      <variable citdl="int" name="IPPROTO_IDP" />
      <variable citdl="int" name="AF_UNIX" />
      <variable citdl="int" name="AF_WANPIPE" />
      <variable citdl="int" name="TIPC_CLUSTER_SCOPE" />
      <variable citdl="int" name="TIPC_SUB_SERVICE" />
      <variable citdl="int" name="IPPROTO_EGP" />
      <variable citdl="int" name="TIPC_IMPORTANCE" />
      <variable citdl="int" name="IPV6_RECVHOPOPTS" />
      <variable citdl="int" name="NETLINK_NFLOG" />
      <variable citdl="int" name="IPV6_NEXTHOP" />
      <variable citdl="int" name="EAI_SYSTEM" />
      <variable citdl="int" name="TIPC_CRITICAL_IMPORTANCE" />
      <variable citdl="int" name="IP_RETOPTS" />
      <variable citdl="int" name="TIPC_ADDR_NAME" />
      <variable citdl="int" name="TCP_KEEPCNT" />
      <variable citdl="int" name="TIPC_SUBSCR_TIMEOUT" />
      <variable citdl="int" name="AF_X25" />
      <variable citdl="int" name="AF_ROSE" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="AF_AX25" />
      <scope doc="Convert an IP address from string format to a packed string&#xA;suitable for use with low-level network functions." ilk="function" name="inet_pton" signature="inet_pton(af, ip) -&gt; packed IP address string" />
      <variable citdl="int" name="AF_NETROM" />
      <variable citdl="int" name="MSG_DONTWAIT" />
      <variable citdl="int" name="IPV6_RECVHOPLIMIT" />
      <variable citdl="int" name="AF_NETLINK" />
      <variable citdl="int" name="AF_LLC" />
      <variable citdl="int" name="EAI_OVERFLOW" />
      <variable citdl="int" name="AF_PPPOX" />
      <variable citdl="int" name="AF_BRIDGE" />
      <variable citdl="int" name="TIPC_PUBLISHED" />
      <variable citdl="int" name="TIPC_SRC_DROPPABLE" />
      <variable citdl="int" name="PACKET_MULTICAST" />
      <variable citdl="int" name="IPV6_TCLASS" />
      <variable citdl="int" name="AF_ASH" />
      <variable citdl="int" name="TCP_KEEPIDLE" />
      <variable citdl="int" name="TIPC_ZONE_SCOPE" />
      <variable citdl="int" name="IPV6_RECVTCLASS" />
      <variable citdl="int" name="TIPC_WAIT_FOREVER" />
      <variable citdl="int" name="IPPROTO_PIM" />
      <variable citdl="int" name="IPPROTO_NONE" />
      <variable citdl="int" name="TCP_WINDOW_CLAMP" />
      <variable citdl="int" name="MSG_EOR" />
      <variable citdl="int" name="PACKET_OUTGOING" />
      <variable citdl="int" name="NETLINK_DNRTMSG" />
      <variable citdl="int" name="IPPROTO_IPCOMP" />
      <variable citdl="int" name="IPPROTO_IPV4" />
      <variable citdl="int" name="IPPROTO_ND" />
      <variable citdl="int" name="EAI_BADHINTS" />
      <variable citdl="int" name="EAI_PROTOCOL" />
      <variable citdl="int" name="IPPROTO_GGP" />
      <variable citdl="int" name="SO_REUSEPORT" />
      <variable citdl="int" name="IPPROTO_HELLO" />
      <variable citdl="int" name="IPPROTO_XTP" />
      <variable citdl="int" name="AI_V4MAPPED_CFG" />
      <variable citdl="int" name="IPPROTO_MAX" />
      <variable citdl="int" name="AI_DEFAULT" />
      <variable citdl="int" name="IPPROTO_EON" />
      <variable citdl="int" name="AI_MASK" />
      <variable citdl="int" name="EAI_MAX" />
    </scope>
    