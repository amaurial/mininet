<scope doc="&#xA;" ilk="blob" lang="Python" name="ctypes._endian">
      <scope doc="# XXX Deprecated" ilk="function" name="ARRAY" signature="ARRAY(typ, len)" />
      <scope classrefs="Exception" doc="&#xA;" ilk="class" name="ArgumentError" />
      <scope classrefs="_CData" doc="XXX to be provided&#xA;" ilk="class" name="Array">
        <scope doc="x.__delitem__(y) &lt;==&gt; del x[y]" ilk="function" name="__delitem__" signature="x.__delitem__(y) &lt;==&gt; del x[y]" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="x.__setitem__(i, y) &lt;==&gt; x[i]=y" ilk="function" name="__setitem__" signature="x.__setitem__(i, y) &lt;==&gt; x[i]=y" />
        <scope ilk="function" name="__init__" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
      </scope>
      <scope classrefs="Structure" doc="Structure with big endian byte order&#xA;" ilk="class" name="BigEndianStructure" />
      <scope classrefs="object" doc="An instance of this class represents a loaded dll/shared&#xA;library, exporting functions using the standard C calling convention (named &apos;cdecl&apos; on Windows).  The exported functions can be accessed as attributes, or by indexing with the function name.  Examples:  &lt;obj&gt;.qsort -&gt; callable object &lt;obj&gt;[&apos;qsort&apos;] -&gt; callable object  Calling the functions releases the Python GIL during the call and" ilk="class" name="CDLL">
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, name_or_ordinal)" />
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, name)" />
        <scope ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="__init__" signature="__init__(self, name, mode=0, handle=None, use_errno=False, use_last_error=False)" />
      </scope>
      <scope doc="CFUNCTYPE(restype, *argtypes, use_errno=False,&#xA;use_last_error=False) -&gt; function prototype." ilk="function" name="CFUNCTYPE" signature="CFUNCTYPE(restype, *argtypes, **kw)" />
      <variable citdl="int" name="DEFAULT_MODE" />
      <scope ilk="function" name="DllCanUnloadNow" signature="DllCanUnloadNow()" />
      <scope ilk="function" name="DllGetClassObject" signature="DllGetClassObject(rclsid, riid, ppv)" />
      <scope doc="Convert a win32 error code into a string." ilk="function" name="FormatError" returns="str" signature="FormatError([integer]) -&gt; string" />
      <variable citdl="_FuncPtr" name="GetLastError" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="HRESULT" />
      <scope classrefs="object" doc="&#xA;" ilk="class" name="LibraryLoader">
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, name)" />
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, name)" />
        <scope ilk="function" name="LoadLibrary" signature="LoadLibrary(self, name)" />
        <scope ilk="function" name="__init__" signature="__init__(self, dlltype)" />
      </scope>
      <scope classrefs="_CData" doc="Structure base class&#xA;" ilk="class" name="LittleEndianStructure">
        <scope ilk="function" name="__init__" />
      </scope>
      <scope classrefs="CDLL" doc="This class represents a dll exporting functions using the&#xA;Windows stdcall calling convention, and returning HRESULT. HRESULT error values are automatically raised as WindowsError exceptions." ilk="class" name="OleDLL" />
      <scope ilk="function" name="POINTER" />
      <scope ilk="function" name="PYFUNCTYPE" signature="PYFUNCTYPE(restype, *argtypes)" />
      <scope classrefs="CDLL" doc="This class represents the Python library itself.  It allows to&#xA;access Python API functions.  The GIL is not released, and Python exceptions are handled correctly." ilk="class" name="PyDLL" />
      <variable citdl="int" name="RTLD_GLOBAL" />
      <variable citdl="int" name="RTLD_LOCAL" />
      <scope doc="# XXX Deprecated" ilk="function" name="SetPointerType" signature="SetPointerType(pointer, cls)" />
      <scope classrefs="_CData" doc="Structure base class&#xA;" ilk="class" name="Structure">
        <scope ilk="function" name="__init__" />
      </scope>
      <scope classrefs="_CData" doc="Union base class&#xA;" ilk="class" name="Union">
        <scope ilk="function" name="__init__" />
      </scope>
      <scope ilk="function" name="WINFUNCTYPE" signature="WINFUNCTYPE(restype, *argtypes, **kw)" />
      <scope classrefs="CDLL" doc="This class represents a dll exporting functions using the&#xA;Windows stdcall calling convention." ilk="class" name="WinDLL" />
      <scope ilk="function" name="WinError" signature="WinError(code=None, descr=None)" />
      <scope doc="Return the address of the C instance internal buffer" ilk="function" name="addressof" returns="int" signature="addressof(C instance) -&gt; integer" />
      <scope doc="Return the alignment requirements of a C instance" ilk="function" name="alignment" signature="alignment(C type) -&gt; integer&#xA;alignment(C instance) -&gt; integer" />
      <scope doc="Return a pointer lookalike to a C instance, only usable as&#xA;function argument" ilk="function" name="byref" signature="byref(C instance[, offset=0]) -&gt; byref-object" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_bool" />
      <scope ilk="function" name="c_buffer" signature="c_buffer(init, size=None)" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_byte" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_char" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_char_p">
        <scope ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_double" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_float" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_int" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_long" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_longdouble" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_longlong" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_short" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_size_t" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_ssize_t" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_ubyte" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_uint" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_ulong" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_ulonglong" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_ushort" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_void_p" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_voidp" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_wchar" />
      <scope classrefs="_SimpleCData" doc="&#xA;" ilk="class" name="c_wchar_p" />
      <scope ilk="function" name="cast" signature="cast(obj, typ)" />
    </scope>
    