<scope doc="Utilities for with-statement contexts.  See PEP 343.&#xA;" ilk="blob" lang="Python" name="contextlib">
      <scope classrefs="object" doc="A base class or mixin that enables context managers to work as decorators.&#xA;" ilk="class" line="10" lineend="30" name="ContextDecorator">
        <scope ilk="function" line="25" lineend="30" name="__call__" returns="ContextDecorator.__call__.inner" signature="__call__(self, func)">
          <variable citdl="ContextDecorator" ilk="argument" name="self" />
          <scope ilk="function" line="27" lineend="29" name="inner" returns="ContextDecorator.__call__.func()" signature="inner(*args, **kwds)">
            <variable attributes="varargs" ilk="argument" name="args" />
            <variable attributes="kwargs" ilk="argument" name="kwds" />
          </scope>
          <variable ilk="argument" name="func" />
        </scope>
        <scope doc="Return a recreated instance of self." ilk="function" line="13" lineend="23" name="_recreate_cm" returns="ContextDecorator" signature="_recreate_cm(self)">
          <variable citdl="ContextDecorator" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="list" line="7" name="__all__" />
      <scope classrefs="object" doc="Context to automatically close something at the end of a block.&#xA;Code like this:  with closing(&lt;module&gt;.open(&lt;arguments&gt;)) as f: &lt;block&gt;  is equivalent to this:  f = &lt;module&gt;.open(&lt;arguments&gt;) try: &lt;block&gt;" ilk="class" line="119" lineend="141" name="closing">
        <scope ilk="function" line="140" lineend="141" name="__exit__" signature="__exit__(self, *exc_info)">
          <variable attributes="varargs" ilk="argument" name="exc_info" />
          <variable citdl="closing" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="138" lineend="139" name="__enter__" signature="__enter__(self)">
          <variable citdl="closing" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="136" lineend="137" name="__init__" signature="__init__(self, thing)">
          <variable ilk="argument" name="thing" />
          <variable citdl="closing" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="137" name="thing" />
      </scope>
      <scope doc="@contextmanager decorator." ilk="function" line="85" lineend="116" name="contextmanager" returns="contextmanager.helper" signature="contextmanager(func)">
        <scope ilk="function" line="114" lineend="115" name="helper" returns="_GeneratorContextManager" signature="helper(*args, **kwds)">
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
        <variable ilk="argument" name="func" />
      </scope>
      <import module="sys" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
      <scope doc="Decorator factory to apply update_wrapper() to a wrapper&#xA;function" ilk="function" name="wraps" signature="wraps(wrapped, assigned=(&apos;__module__&apos;, &apos;__name__&apos;, &apos;__doc__&apos;, &apos;__annotations__&apos;), updated=(&apos;__dict__&apos;,))" />
      <scope attributes="protected __hidden__" classrefs="ContextDecorator" doc="Helper for @contextmanager decorator." ilk="class" line="33" lineend="82" name="_GeneratorContextManager">
        <scope attributes="__ctor__" ilk="function" line="36" lineend="38" name="__init__" signature="_GeneratorContextManager(func, *args, **kwds)">
          <variable citdl="_GeneratorContextManager" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
          <variable ilk="argument" name="gen" />
        </scope>
        <variable attributes="__instancevar__" citdl="__init__.func()" line="37" name="gen" />
        <variable attributes="__instancevar__" line="38" name="kwds" />
        <variable attributes="__instancevar__" line="38" name="args" />
        <variable attributes="__instancevar__" line="38" name="func" />
        <scope attributes="protected" ilk="function" line="40" lineend="44" name="_recreate_cm" returns="self.__class__()" signature="_recreate_cm()">
          <variable citdl="_GeneratorContextManager" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="46" lineend="50" name="__enter__" returns="next()" signature="__enter__()">
          <variable citdl="_GeneratorContextManager" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="52" lineend="82" name="__exit__" returns="bool" signature="__exit__(type, value, traceback)">
          <variable citdl="_GeneratorContextManager" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable citdl="type()" ilk="argument" name="value" />
          <variable ilk="argument" name="traceback" />
        </scope>
      </scope>
    </scope>
    