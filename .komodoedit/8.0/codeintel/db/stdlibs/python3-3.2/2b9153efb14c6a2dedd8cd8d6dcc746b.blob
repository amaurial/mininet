<scope doc="# Module providing the `SyncManager` class for dealing&#xA;# with shared objects # # multiprocessing/managers.py # # Copyright (c) 2006-2008, R Oudkerk # All rights reserved. # # Redistribution and use in source and binary forms, with or without # modification, are permitted provided that the following conditions # are met:" ilk="blob" lang="Python" name="multiprocessing.managers">
      <scope classrefs="BaseProxy" doc="&#xA;" ilk="class" line="983" lineend="992" name="AcquirerProxy">
        <scope ilk="function" line="989" lineend="990" name="__enter__" returns="self._callmethod()" signature="__enter__(self)">
          <variable citdl="AcquirerProxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="991" lineend="992" name="__exit__" returns="self._callmethod()" signature="__exit__(self, exc_type, exc_val, exc_tb)">
          <variable citdl="AcquirerProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="exc_type" />
          <variable ilk="argument" name="exc_val" />
          <variable ilk="argument" name="exc_tb" />
        </scope>
        <scope ilk="function" line="987" lineend="988" name="release" returns="self._callmethod()" signature="release(self)">
          <variable citdl="AcquirerProxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="985" lineend="986" name="acquire" returns="self._callmethod()" signature="acquire(self, blocking=True)">
          <variable citdl="AcquirerProxy" ilk="argument" name="self" />
          <variable citdl="True" ilk="argument" name="blocking" />
        </scope>
        <variable attributes="protected" citdl="tuple" line="984" name="_exposed_" />
      </scope>
      <scope ilk="function" line="962" lineend="963" name="Array" returns="array.array()" signature="Array(typecode, sequence, lock=True)">
        <variable citdl="True" ilk="argument" name="lock" />
        <variable ilk="argument" name="sequence" />
        <variable ilk="argument" name="typecode" />
      </scope>
      <scope classrefs="BaseProxy" doc="&#xA;" ilk="class" line="1066" name="ArrayProxy">
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, *args, **kwds)" />
        <scope ilk="function" name="__getslice__" signature="__getslice__(self, *args, **kwds)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, *args, **kwds)" />
        <scope ilk="function" name="__setslice__" signature="__setslice__(self, *args, **kwds)" />
        <scope ilk="function" name="__len__" signature="__len__(self, *args, **kwds)" />
      </scope>
      <scope classrefs="bytes" doc="&#xA;" ilk="class" name="AuthenticationString">
        <scope ilk="function" name="__reduce__" signature="__reduce__(self)" />
      </scope>
      <scope doc="Return an auto-proxy for `token`" ilk="function" line="909" lineend="932" name="AutoProxy" returns="ProxyType()" signature="AutoProxy(token, serializer, manager=None, authkey=None, exposed=None, incref=True)">
        <variable citdl="MakeProxyType()" line="928" name="ProxyType" />
        <variable citdl="True" ilk="argument" name="incref" />
        <variable citdl="dispatch()" ilk="argument" name="exposed" />
        <variable ilk="argument" name="manager" />
        <variable citdl="manager._authkey" ilk="argument" name="authkey" />
        <variable ilk="argument" name="token" />
        <variable attributes="protected" line="914" name="_Client" />
        <variable citdl="_Client()" line="917" name="conn" />
        <variable ilk="argument" name="serializer" />
        <variable citdl="ProxyType()" line="929" name="proxy" />
      </scope>
      <scope classrefs="BaseProxy" doc="&#xA;" ilk="class" line="1043" name="BaseListProxy">
        <scope ilk="function" name="sort" signature="sort(self, *args, **kwds)" />
        <scope ilk="function" name="reverse" signature="reverse(self, *args, **kwds)" />
        <scope ilk="function" name="__getslice__" signature="__getslice__(self, *args, **kwds)" />
        <scope ilk="function" name="insert" signature="insert(self, *args, **kwds)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, *args, **kwds)" />
        <scope ilk="function" name="pop" signature="pop(self, *args, **kwds)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, *args, **kwds)" />
        <scope ilk="function" name="__add__" signature="__add__(self, *args, **kwds)" />
        <scope ilk="function" name="__rmul__" signature="__rmul__(self, *args, **kwds)" />
        <scope ilk="function" name="append" signature="append(self, *args, **kwds)" />
        <scope ilk="function" name="__imul__" signature="__imul__(self, *args, **kwds)" />
        <scope ilk="function" name="count" signature="count(self, *args, **kwds)" />
        <scope ilk="function" name="index" signature="index(self, *args, **kwds)" />
        <scope ilk="function" name="__reversed__" signature="__reversed__(self, *args, **kwds)" />
        <scope ilk="function" name="__delslice__" signature="__delslice__(self, *args, **kwds)" />
        <scope ilk="function" name="extend" signature="extend(self, *args, **kwds)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, *args, **kwds)" />
        <scope ilk="function" name="__setslice__" signature="__setslice__(self, *args, **kwds)" />
        <scope ilk="function" name="remove" signature="remove(self, *args, **kwds)" />
        <scope ilk="function" name="__mul__" signature="__mul__(self, *args, **kwds)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, *args, **kwds)" />
        <scope ilk="function" name="__len__" signature="__len__(self, *args, **kwds)" />
      </scope>
      <scope classrefs="object" doc="Base class for managers&#xA;" ilk="class" line="469" lineend="679" name="BaseManager">
        <scope doc="Create a new shared object; return the token and exposed&#xA;tuple" ilk="function" line="563" lineend="573" name="_create" returns="tuple" signature="_create(self, typeid, *args, **kwds)">
          <variable ilk="argument" name="typeid" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
          <variable line="570" name="exposed" />
          <variable citdl="BaseManager" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable line="570" name="id" />
          <variable citdl="self._Client()" line="568" name="conn" />
        </scope>
        <scope doc="Return the number of shared objects" ilk="function" line="591" lineend="599" name="_number_of_objects" returns="dispatch()" signature="_number_of_objects(self)">
          <variable citdl="BaseManager" ilk="argument" name="self" />
          <variable citdl="self._Client()" line="595" name="conn" />
        </scope>
        <scope ilk="function" line="604" lineend="605" name="__exit__" signature="__exit__(self, exc_type, exc_val, exc_tb)">
          <variable citdl="BaseManager" ilk="argument" name="self" />
          <variable ilk="argument" name="exc_type" />
          <variable ilk="argument" name="exc_val" />
          <variable ilk="argument" name="exc_tb" />
        </scope>
        <scope ilk="function" line="486" lineend="488" name="__reduce__" returns="tuple" signature="__reduce__(self)">
          <variable citdl="BaseManager" ilk="argument" name="self" />
        </scope>
        <scope doc="Shutdown the manager process; will be registered as a&#xA;finalizer" ilk="function" line="608" lineend="637" name="_finalize_manager" signature="_finalize_manager(process, address, authkey, state, _Client)">
          <variable ilk="argument" name="authkey" />
          <variable ilk="argument" name="state" />
          <variable ilk="argument" name="_Client" />
          <variable ilk="argument" name="address" />
          <variable citdl="BaseManager" ilk="argument" name="process" />
          <variable citdl="_Client()" line="615" name="conn" />
        </scope>
        <scope doc="Return some info about the servers shared objects and&#xA;connections" ilk="function" line="581" lineend="589" name="_debug_info" returns="dispatch()" signature="_debug_info(self)">
          <variable citdl="BaseManager" ilk="argument" name="self" />
          <variable citdl="self._Client()" line="585" name="conn" />
        </scope>
        <scope doc="Connect manager object to the server process" ilk="function" line="498" lineend="505" name="connect" signature="connect(self)">
          <variable citdl="BaseManager" ilk="argument" name="self" />
          <variable citdl="Client()" line="503" name="conn" />
        </scope>
        <scope ilk="function" line="476" lineend="484" name="__init__" signature="__init__(self, address=None, authkey=None, serializer=&apos;pickle&apos;)">
          <variable ilk="argument" name="authkey" />
          <variable citdl="BaseManager" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="serializer" />
          <variable ilk="argument" name="address" />
        </scope>
        <scope doc="Register a typeid with the manager type" ilk="function" line="642" lineend="679" name="register" signature="register(typeid, callable=None, proxytype=None, exposed=None, method_to_typeid=None, create_method=True)">
          <variable ilk="argument" name="typeid" />
          <scope ilk="function" line="668" lineend="677" name="temp" returns="proxytype()" signature="temp(self, *args, **kwds)">
            <variable ilk="argument" name="self" />
            <variable attributes="varargs" ilk="argument" name="args" />
            <variable attributes="kwargs" ilk="argument" name="kwds" />
            <variable line="670" name="token" />
            <variable line="670" name="exp" />
            <variable citdl="proxytype()" line="671" name="proxy" />
            <variable citdl="self._Client()" line="675" name="conn" />
            <variable line="678" name="__name__" />
          </scope>
          <variable citdl="getattr()" ilk="argument" name="exposed" />
          <variable ilk="argument" name="callable" />
          <variable citdl="AutoProxy" ilk="argument" name="proxytype" />
          <variable citdl="getattr()" ilk="argument" name="method_to_typeid" />
          <variable citdl="True" ilk="argument" name="create_method" />
          <variable citdl="BaseManager" ilk="argument" name="cls" />
        </scope>
        <scope doc="Join the manager process (if it has been spawned)" ilk="function" line="575" lineend="579" name="join" signature="join(self, timeout=None)">
          <variable citdl="BaseManager" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
        </scope>
        <scope ilk="function" line="601" lineend="602" name="__enter__" returns="BaseManager" signature="__enter__(self)">
          <variable citdl="BaseManager" ilk="argument" name="self" />
        </scope>
        <scope doc="Create a server, report its address and run it" ilk="function" line="544" lineend="561" name="_run_server" signature="_run_server(registry, address, authkey, serializer, writer, initializer=None, initargs=())">
          <variable ilk="argument" name="writer" />
          <variable ilk="argument" name="initializer" />
          <variable ilk="argument" name="authkey" />
          <variable ilk="argument" name="registry" />
          <variable ilk="argument" name="address" />
          <variable citdl="tuple" ilk="argument" name="initargs" />
          <variable citdl="_Server()" line="553" name="server" />
          <variable ilk="argument" name="serializer" />
          <variable citdl="BaseManager" ilk="argument" name="cls" />
        </scope>
        <scope doc="Return server object with serve_forever() method and address&#xA;attribute" ilk="function" line="490" lineend="496" name="get_server" returns="Server" signature="get_server(self)">
          <variable citdl="BaseManager" ilk="argument" name="self" />
        </scope>
        <scope doc="Spawn a server process for this manager object" ilk="function" line="507" lineend="540" name="start" signature="start(self, initializer=None, initargs=())">
          <variable citdl="str.join()" line="525" name="ident" />
          <variable line="517" name="reader" />
          <variable citdl="tuple" ilk="argument" name="initargs" />
          <variable citdl="BaseManager" ilk="argument" name="self" />
          <variable line="517" name="writer" />
          <variable ilk="argument" name="initializer" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="483" name="_serializer" />
        <variable attributes="protected __instancevar__" citdl="reader.recv()" line="479" name="_address" />
        <variable attributes="protected __instancevar__" citdl="State" line="481" name="_state" />
        <variable attributes="protected __instancevar__" citdl="Process()" line="520" name="_process" />
        <variable attributes="protected __instancevar__" citdl="AuthenticationString()" line="480" name="_authkey" />
        <variable attributes="__instancevar__" citdl="util.Finalize()" line="536" name="shutdown" />
        <variable citdl="property()" line="639" name="address" />
        <variable attributes="protected" citdl="Server" line="474" name="_Server" />
        <variable attributes="protected" citdl="cls._registry.copy()" line="473" name="_registry" />
      </scope>
      <scope classrefs="object" doc="A base for proxies of shared objects&#xA;" ilk="class" line="695" lineend="860" name="BaseProxy">
        <scope ilk="function" line="740" lineend="747" name="_connect" signature="_connect(self)">
          <variable citdl="BaseProxy" ilk="argument" name="self" />
          <variable line="742" name="name" />
          <variable citdl="_Client()" line="745" name="conn" />
        </scope>
        <scope doc="Try to call a method of the referrent and return a copy of&#xA;the result" ilk="function" line="749" lineend="776" name="_callmethod" returns="proxytype()" signature="_callmethod(self, methodname, args=(), kwds={})">
          <variable line="768" name="proxytype" />
          <variable line="762" name="kind" />
          <variable ilk="argument" name="methodname" />
          <variable citdl="dict" ilk="argument" name="kwds" />
          <variable citdl="BaseProxy" ilk="argument" name="self" />
          <variable citdl="tuple" ilk="argument" name="args" />
          <variable line="762" name="result" />
          <variable citdl="_Client()" line="754" name="conn" />
          <variable citdl="proxytype()" line="769" name="proxy" />
        </scope>
        <scope ilk="function" line="846" lineend="847" name="__deepcopy__" returns="BaseProxy._getvalue()" signature="__deepcopy__(self, memo)">
          <variable citdl="BaseProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="memo" />
        </scope>
        <scope doc="Return representation of the referent (or a fall-back if&#xA;that fails)" ilk="function" line="853" lineend="860" name="__str__" returns="str" signature="__str__(self)">
          <variable citdl="BaseProxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="784" lineend="797" name="_incref" signature="_incref(self)">
          <variable citdl="BaseProxy" ilk="argument" name="self" />
          <variable citdl="self._manager._state" line="791" name="state" />
          <variable citdl="_Client()" line="785" name="conn" />
        </scope>
        <scope ilk="function" line="833" lineend="844" name="__reduce__" returns="tuple" signature="__reduce__(self)">
          <variable citdl="BaseProxy" ilk="argument" name="self" />
          <variable citdl="dict" line="834" name="kwds" />
        </scope>
        <scope doc="Get a copy of the value of the referent" ilk="function" line="778" lineend="782" name="_getvalue" returns="BaseProxy._callmethod()" signature="_getvalue(self)">
          <variable citdl="BaseProxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="825" lineend="831" name="_after_fork" signature="_after_fork(self)">
          <variable citdl="BaseProxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="801" lineend="823" name="_decref" signature="_decref(token, authkey, state, tls, idset, _Client)">
          <variable ilk="argument" name="tls" />
          <variable ilk="argument" name="authkey" />
          <variable citdl="BaseProxy" ilk="argument" name="token" />
          <variable ilk="argument" name="_Client" />
          <variable ilk="argument" name="idset" />
          <variable ilk="argument" name="state" />
          <variable citdl="_Client()" line="809" name="conn" />
        </scope>
        <scope ilk="function" line="702" lineend="738" name="__init__" signature="__init__(self, token, serializer, manager=None, authkey=None, exposed=None, incref=True)">
          <variable citdl="True" ilk="argument" name="incref" />
          <variable ilk="argument" name="exposed" />
          <variable citdl="BaseProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="token" />
          <variable citdl="BaseProxy._address_to_local.get()" line="706" name="tls_idset" />
          <variable ilk="argument" name="authkey" />
          <variable ilk="argument" name="manager" />
          <variable ilk="argument" name="serializer" />
        </scope>
        <scope ilk="function" line="849" lineend="851" name="__repr__" returns="tuple" signature="__repr__(self)">
          <variable citdl="BaseProxy" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="725" name="_serializer" />
        <variable attributes="protected" citdl="util.ForkAwareThreadLock()" line="700" name="_mutex" />
        <variable attributes="protected __instancevar__" line="724" name="_manager" />
        <variable attributes="protected __instancevar__" line="722" name="_token" />
        <variable attributes="protected __instancevar__" citdl="self._manager._authkey" line="729" name="_authkey" />
        <variable attributes="protected __instancevar__" line="720" name="_idset" />
        <variable attributes="protected __instancevar__" line="715" name="_tls" />
        <variable attributes="protected __instancevar__" line="726" name="_Client" />
        <variable attributes="protected" citdl="dict" line="699" name="_address_to_local" />
        <variable attributes="protected __instancevar__" citdl="self._token.id" line="723" name="_id" />
        <variable attributes="protected __instancevar__" citdl="util.Finalize()" line="793" name="_close" />
      </scope>
      <scope classrefs="AcquirerProxy" doc="&#xA;" ilk="class" line="995" lineend="1002" name="ConditionProxy">
        <scope ilk="function" line="999" lineend="1000" name="notify" returns="self._callmethod()" signature="notify(self)">
          <variable citdl="ConditionProxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1001" lineend="1002" name="notify_all" returns="self._callmethod()" signature="notify_all(self)">
          <variable citdl="ConditionProxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="997" lineend="998" name="wait" returns="self._callmethod()" signature="wait(self, timeout=None)">
          <variable citdl="ConditionProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
        </scope>
        <variable attributes="protected" citdl="tuple" line="996" name="_exposed_" />
      </scope>
      <scope classrefs="BaseProxy" doc="&#xA;" ilk="class" line="1059" name="DictProxy">
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, *args, **kwds)" />
        <scope ilk="function" name="get" signature="get(self, *args, **kwds)" />
        <scope ilk="function" name="update" signature="update(self, *args, **kwds)" />
        <scope ilk="function" name="pop" signature="pop(self, *args, **kwds)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, *args, **kwds)" />
        <scope ilk="function" name="has_key" signature="has_key(self, *args, **kwds)" />
        <scope ilk="function" name="popitem" signature="popitem(self, *args, **kwds)" />
        <scope ilk="function" name="copy" signature="copy(self, *args, **kwds)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, *args, **kwds)" />
        <scope ilk="function" name="setdefault" signature="setdefault(self, *args, **kwds)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, *args, **kwds)" />
        <scope ilk="function" name="items" signature="items(self, *args, **kwds)" />
        <scope ilk="function" name="clear" signature="clear(self, *args, **kwds)" />
        <scope ilk="function" name="keys" signature="keys(self, *args, **kwds)" />
        <scope ilk="function" name="values" signature="values(self, *args, **kwds)" />
        <scope ilk="function" name="__len__" signature="__len__(self, *args, **kwds)" />
      </scope>
      <scope classrefs="BaseProxy" doc="&#xA;" ilk="class" line="1004" lineend="1013" name="EventProxy">
        <scope ilk="function" line="1008" lineend="1009" name="set" returns="self._callmethod()" signature="set(self)">
          <variable citdl="EventProxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1006" lineend="1007" name="is_set" returns="self._callmethod()" signature="is_set(self)">
          <variable citdl="EventProxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1010" lineend="1011" name="clear" returns="self._callmethod()" signature="clear(self)">
          <variable citdl="EventProxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1012" lineend="1013" name="wait" returns="self._callmethod()" signature="wait(self, timeout=None)">
          <variable citdl="EventProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
        </scope>
        <variable attributes="protected" citdl="tuple" line="1005" name="_exposed_" />
      </scope>
      <scope classrefs="object" doc="Class which supports object finalization using weakrefs&#xA;" ilk="class" name="Finalize">
        <scope doc="Run the callback unless it has already been called or&#xA;cancelled" ilk="function" name="__call__" signature="__call__(self, wr=None)" />
        <scope ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return whether this finalizer is still waiting to invoke&#xA;callback" ilk="function" name="still_active" signature="still_active(self)" />
        <scope doc="Cancel finalization of the object" ilk="function" name="cancel" signature="cancel(self)" />
        <scope ilk="function" name="__init__" signature="__init__(self, obj, callback, args=(), kwargs=None, exitpriority=None)" />
      </scope>
      <scope classrefs="_Pickler" doc="&#xA;" ilk="class" name="ForkingPickler">
        <scope ilk="function" name="register" />
      </scope>
      <scope classrefs="BaseProxy" doc="&#xA;" ilk="class" line="969" lineend="980" name="IteratorProxy">
        <scope ilk="function" line="979" lineend="980" name="close" returns="self._callmethod()" signature="close(self, *args)">
          <variable citdl="IteratorProxy" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="973" lineend="974" name="__next__" returns="self._callmethod()" signature="__next__(self, *args)">
          <variable citdl="IteratorProxy" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="971" lineend="972" name="__iter__" returns="IteratorProxy" signature="__iter__(self)">
          <variable citdl="IteratorProxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="977" lineend="978" name="throw" returns="self._callmethod()" signature="throw(self, *args)">
          <variable citdl="IteratorProxy" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="975" lineend="976" name="send" returns="self._callmethod()" signature="send(self, *args)">
          <variable citdl="IteratorProxy" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <variable attributes="protected" citdl="tuple" line="970" name="_exposed_" />
      </scope>
      <scope classrefs="BaseListProxy" doc="&#xA;" ilk="class" line="1050" lineend="1056" name="ListProxy">
        <scope ilk="function" line="1054" lineend="1056" name="__imul__" returns="ListProxy" signature="__imul__(self, value)">
          <variable citdl="ListProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="1051" lineend="1053" name="__iadd__" returns="ListProxy" signature="__iadd__(self, value)">
          <variable citdl="ListProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
      </scope>
      <scope doc="Return an proxy type whose methods are given by `exposed`" ilk="function" line="887" lineend="906" name="MakeProxyType" returns="type()" signature="MakeProxyType(name, exposed, _cache={(&apos;ArrayProxy&apos;, (&apos;__len__&apos;, &apos;__getitem__&apos;, &apos;__setitem__&apos;, &apos;__getslice__&apos;, &apos;__setslice__&apos;)): &lt;class &apos;multiprocessing.managers.ArrayProxy&apos;&gt;, (&apos;DictProxy&apos;, (&apos;__contains__&apos;, &apos;__delitem__&apos;, &apos;__getitem__&apos;, &apos;__len__&apos;, &apos;__setitem__&apos;, &apos;clear&apos;, &apos;copy&apos;, &apos;get&apos;, &apos;has_key&apos;, &apos;items&apos;, &apos;keys&apos;, &apos;pop&apos;, &apos;popitem&apos;, &apos;setdefault&apos;, &apos;update&apos;, &apos;values&apos;)): &lt;class &apos;multiprocessing.managers.DictProxy&apos;&gt;, (&apos;BaseListProxy&apos;, (&apos;__add__&apos;, &apos;__contains__&apos;, &apos;__delitem__&apos;, &apos;__delslice__&apos;, &apos;__getitem__&apos;, &apos;__getslice__&apos;, &apos;__len__&apos;, &apos;__mul__&apos;, &apos;__reversed__&apos;, &apos;__rmul__&apos;, &apos;__setitem__&apos;, &apos;__setslice__&apos;, &apos;append&apos;, &apos;count&apos;, &apos;extend&apos;, &apos;index&apos;, &apos;insert&apos;, &apos;pop&apos;, &apos;remove&apos;, &apos;reverse&apos;, &apos;sort&apos;, &apos;__imul__&apos;)): &lt;class &apos;multiprocessing.managers.BaseListProxy&apos;&gt;, (&apos;PoolProxy&apos;, (&apos;apply&apos;, &apos;apply_async&apos;, &apos;close&apos;, &apos;imap&apos;, &apos;imap_unordered&apos;, &apos;join&apos;, &apos;map&apos;, &apos;map_async&apos;, &apos;terminate&apos;)): &lt;class &apos;multiprocessing.managers.PoolProxy&apos;&gt;})">
        <variable citdl="dict" ilk="argument" name="_cache" />
        <variable citdl="dict" line="897" name="dic" />
        <variable ilk="argument" name="name" />
        <variable citdl="type()" line="903" name="ProxyType" />
        <variable citdl="tuple()" ilk="argument" name="exposed" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" line="938" lineend="948" name="Namespace">
        <scope ilk="function" line="941" lineend="948" name="__repr__" returns="str" signature="__repr__(self)">
          <variable citdl="list()" line="942" name="items" />
          <variable citdl="Namespace" ilk="argument" name="self" />
          <variable citdl="list" line="943" name="temp" />
        </scope>
        <scope ilk="function" line="939" lineend="940" name="__init__" signature="__init__(self, **kwds)">
          <variable citdl="Namespace" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
      </scope>
      <scope classrefs="BaseProxy" doc="&#xA;" ilk="class" line="1015" lineend="1031" name="NamespaceProxy">
        <scope ilk="function" line="1022" lineend="1026" name="__setattr__" returns="object.__setattr__()" signature="__setattr__(self, key, value)">
          <variable citdl="object.__getattribute__()" line="1025" name="callmethod" />
          <variable citdl="NamespaceProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="1017" lineend="1021" name="__getattr__" returns="NamespaceProxy.__getattr__.callmethod()" signature="__getattr__(self, key)">
          <variable citdl="object.__getattribute__()" line="1020" name="callmethod" />
          <variable citdl="NamespaceProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="1027" lineend="1031" name="__delattr__" returns="NamespaceProxy.__delattr__.callmethod()" signature="__delattr__(self, key)">
          <variable citdl="object.__getattribute__()" line="1030" name="callmethod" />
          <variable citdl="NamespaceProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <variable attributes="protected" citdl="tuple" line="1016" name="_exposed_" />
      </scope>
      <scope classrefs="PickleError" doc="&#xA;" ilk="class" name="PicklingError" />
      <scope doc="Returns a process pool object" ilk="function" name="Pool" signature="Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None)" />
      <scope classrefs="BaseProxy" doc="&#xA;" ilk="class" line="1071" name="PoolProxy">
        <scope ilk="function" name="map" signature="map(self, *args, **kwds)" />
        <scope ilk="function" name="apply_async" signature="apply_async(self, *args, **kwds)" />
        <scope ilk="function" name="join" signature="join(self, *args, **kwds)" />
        <scope ilk="function" name="imap_unordered" signature="imap_unordered(self, *args, **kwds)" />
        <scope ilk="function" name="terminate" signature="terminate(self, *args, **kwds)" />
        <scope ilk="function" name="map_async" signature="map_async(self, *args, **kwds)" />
        <scope ilk="function" name="apply" signature="apply(self, *args, **kwds)" />
        <scope ilk="function" name="close" signature="close(self, *args, **kwds)" />
        <scope ilk="function" name="imap" signature="imap(self, *args, **kwds)" />
      </scope>
      <scope classrefs="object" doc="Start a subprocess to run the code of a process object&#xA;" ilk="class" name="Popen">
        <scope ilk="function" name="poll" signature="poll(self)" />
        <scope ilk="function" name="duplicate_for_child" signature="duplicate_for_child(handle)" />
        <scope ilk="function" name="terminate" signature="terminate(self)" />
        <scope ilk="function" name="thread_is_spawning" signature="thread_is_spawning()" />
        <scope ilk="function" name="__init__" signature="__init__(self, process_obj)" />
        <scope ilk="function" name="wait" signature="wait(self, timeout=None)" />
      </scope>
      <scope classrefs="object" doc="Process objects represent activity that is run in a separate process&#xA;The class is analagous to `threading.Thread`" ilk="class" name="Process">
        <scope doc="Method to be run in sub-process; can be overridden in sub-&#xA;class" ilk="function" name="run" signature="run(self)" />
        <scope doc="Terminate process; sends SIGTERM signal or uses&#xA;TerminateProcess()" ilk="function" name="terminate" signature="terminate(self)" />
        <scope ilk="function" name="__init__" signature="__init__(self, group=None, target=None, name=None, args=(), kwargs={})" />
        <scope doc="Wait until child process terminates" ilk="function" name="join" signature="join(self, timeout=None)" />
        <scope doc="Start child process" ilk="function" name="start" signature="start(self)" />
        <scope ilk="function" name="_bootstrap" signature="_bootstrap(self)" />
        <scope ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return whether process is alive" ilk="function" name="is_alive" signature="is_alive(self)" />
      </scope>
      <scope classrefs="set" doc="&#xA;" ilk="class" line="685" lineend="689" name="ProcessLocalSet">
        <scope ilk="function" line="688" lineend="689" name="__reduce__" returns="tuple" signature="__reduce__(self)">
          <variable citdl="ProcessLocalSet" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="686" lineend="687" name="__init__" signature="__init__(self)">
          <variable citdl="ProcessLocalSet" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope doc="Function used for unpickling proxy objects." ilk="function" line="866" lineend="881" name="RebuildProxy" returns="RebuildProxy.func()" signature="RebuildProxy(func, token, serializer, kwds)">
        <variable ilk="argument" name="token" />
        <variable ilk="argument" name="kwds" />
        <variable ilk="argument" name="func" />
        <variable citdl="kwds.pop()" line="877" name="incref" />
        <variable ilk="argument" name="serializer" />
        <variable citdl="getattr()" line="872" name="server" />
      </scope>
      <scope classrefs="Exception" doc="&#xA;" ilk="class" line="122" lineend="124" name="RemoteError">
        <scope ilk="function" line="123" lineend="124" name="__str__" returns="str" signature="__str__(self)">
          <variable citdl="RemoteError" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Server class which runs in a process controlled by a manager object&#xA;" ilk="class" line="151" lineend="444" name="Server">
        <scope ilk="function" line="308" lineend="309" name="fallback_repr" returns="repr()" signature="fallback_repr(self, conn, ident, obj)">
          <variable citdl="Server" ilk="argument" name="self" />
          <variable ilk="argument" name="ident" />
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="conn" />
        </scope>
        <scope doc="Handle a new connection" ilk="function" line="194" lineend="226" name="handle_request" signature="handle_request(self, c)">
          <variable ilk="argument" name="c" />
          <variable citdl="func()" line="210" name="result" />
          <variable citdl="getattr()" line="205" name="func" />
          <variable citdl="tuple" line="207" name="msg" />
          <variable citdl="Server" ilk="argument" name="self" />
          <variable citdl="c.recv()" line="202" name="request" />
          <variable line="198" name="funcname" />
        </scope>
        <scope doc="Run the server forever" ilk="function" line="173" lineend="192" name="serve_forever" signature="serve_forever(self)">
          <variable citdl="Server" ilk="argument" name="self" />
          <variable citdl="self.listener.accept()" line="182" name="c" />
          <variable citdl="threading.Thread()" line="185" name="t" />
        </scope>
        <scope ilk="function" line="435" lineend="444" name="decref" signature="decref(self, c, ident)">
          <variable citdl="Server" ilk="argument" name="self" />
          <variable ilk="argument" name="ident" />
          <variable ilk="argument" name="c" />
        </scope>
        <scope ilk="function" line="302" lineend="303" name="fallback_getvalue" signature="fallback_getvalue(self, conn, ident, obj)">
          <variable citdl="Server" ilk="argument" name="self" />
          <variable ilk="argument" name="ident" />
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="conn" />
        </scope>
        <scope doc="Shutdown this process" ilk="function" line="344" lineend="374" name="shutdown" signature="shutdown(self, c)">
          <variable citdl="Server" ilk="argument" name="self" />
          <variable ilk="argument" name="c" />
        </scope>
        <scope doc="Number of shared objects" ilk="function" line="338" lineend="342" name="number_of_objects" returns="len()" signature="number_of_objects(self, c)">
          <variable citdl="Server" ilk="argument" name="self" />
          <variable ilk="argument" name="c" />
        </scope>
        <scope doc="Return the methods of the shared object indicated by token" ilk="function" line="414" lineend="418" name="get_methods" returns="tuple()" signature="get_methods(self, c, token)">
          <variable citdl="Server" ilk="argument" name="self" />
          <variable ilk="argument" name="c" />
          <variable ilk="argument" name="token" />
        </scope>
        <scope ilk="function" line="305" lineend="306" name="fallback_str" returns="str()" signature="fallback_str(self, conn, ident, obj)">
          <variable citdl="Server" ilk="argument" name="self" />
          <variable ilk="argument" name="ident" />
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="conn" />
        </scope>
        <scope ilk="function" line="158" lineend="171" name="__init__" signature="__init__(self, registry, address, authkey, serializer)">
          <variable ilk="argument" name="authkey" />
          <variable citdl="Server" ilk="argument" name="self" />
          <variable ilk="argument" name="registry" />
          <variable ilk="argument" name="serializer" />
          <variable ilk="argument" name="address" />
        </scope>
        <scope ilk="function" line="428" lineend="433" name="incref" signature="incref(self, c, ident)">
          <variable citdl="Server" ilk="argument" name="self" />
          <variable ilk="argument" name="ident" />
          <variable ilk="argument" name="c" />
        </scope>
        <scope ilk="function" line="317" lineend="318" name="dummy" signature="dummy(self, c)">
          <variable citdl="Server" ilk="argument" name="self" />
          <variable ilk="argument" name="c" />
        </scope>
        <scope doc="Spawn a new thread to serve this connection" ilk="function" line="420" lineend="426" name="accept_connection" signature="accept_connection(self, c, name)">
          <variable citdl="Server" ilk="argument" name="self" />
          <variable ilk="argument" name="c" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Handle requests from the proxies in a particular&#xA;process/thread" ilk="function" line="228" lineend="300" name="serve_client" signature="serve_client(self, conn)">
          <variable citdl="getattr()" line="253" name="function" />
          <variable line="262" name="rexposed" />
          <variable citdl="dict" line="237" name="id_to_obj" />
          <variable citdl="fallback_func()" line="274" name="result" />
          <variable line="273" name="fallback_func" />
          <variable citdl="conn.recv" line="235" name="recv" />
          <variable ilk="argument" name="conn" />
          <variable citdl="gettypeid" line="260" name="typeid" />
          <variable line="242" name="methodname" />
          <variable citdl="function()" line="256" name="res" />
          <variable citdl="Server" ilk="argument" name="self" />
          <variable citdl="recv()" line="243" name="request" />
          <variable citdl="conn.send" line="236" name="send" />
          <variable citdl="Token" line="263" name="token" />
          <variable line="262" name="rident" />
          <variable citdl="tuple" line="258" name="msg" />
        </scope>
        <scope doc="Create a new shared object and return its id" ilk="function" line="376" lineend="412" name="create" returns="tuple" signature="create(self, c, typeid, *args, **kwds)">
          <variable ilk="argument" name="typeid" />
          <variable ilk="argument" name="c" />
          <variable citdl="id()" line="397" name="ident" />
          <variable citdl="callable()" line="387" name="obj" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
          <variable citdl="list()" line="392" name="exposed" />
          <variable citdl="Server" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Return some info --- useful to spot problems with&#xA;refcounting" ilk="function" line="320" lineend="336" name="debug_info" returns="str.join()" signature="debug_info(self, c)">
          <variable citdl="list()" line="327" name="keys" />
          <variable citdl="Server" ilk="argument" name="self" />
          <variable ilk="argument" name="c" />
          <variable citdl="list" line="326" name="result" />
        </scope>
        <variable attributes="__instancevar__" citdl="AuthenticationString()" line="161" name="authkey" />
        <variable citdl="dict" line="311" name="fallback_mapping" />
        <variable attributes="__instancevar__" citdl="int" line="171" name="stop" />
        <variable attributes="__instancevar__" citdl="Listener()" line="165" name="listener" />
        <variable attributes="__instancevar__" citdl="dict" line="168" name="id_to_obj" />
        <variable attributes="__instancevar__" citdl="threading.RLock()" line="170" name="mutex" />
        <variable attributes="__instancevar__" line="160" name="registry" />
        <variable attributes="__instancevar__" citdl="dict" line="169" name="id_to_refcount" />
        <variable attributes="__instancevar__" citdl="self.listener.address" line="166" name="address" />
        <variable citdl="list" line="155" name="public" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" line="450" lineend="454" name="State">
        <variable citdl="int" line="453" name="STARTED" />
        <variable citdl="list" line="451" name="__slots__" />
        <variable citdl="int" line="452" name="INITIAL" />
        <variable citdl="int" line="454" name="SHUTDOWN" />
      </scope>
      <scope classrefs="BaseManager" doc="Subclass of `BaseManager` which supports a number of shared object types.&#xA;The types registered are those intended for the synchronization of threads, plus `dict`, `list` and `Namespace`.  The `multiprocessing.Manager()` function creates started instances of this class." ilk="class" line="1086" name="SyncManager">
        <scope ilk="function" name="JoinableQueue" signature="JoinableQueue(self, *args, **kwds)" />
        <scope ilk="function" name="BoundedSemaphore" signature="BoundedSemaphore(self, *args, **kwds)" />
        <scope ilk="function" name="Lock" signature="Lock(self, *args, **kwds)" />
        <scope ilk="function" name="list" signature="list(self, *args, **kwds)" />
        <scope ilk="function" name="RLock" signature="RLock(self, *args, **kwds)" />
        <scope ilk="function" name="Event" signature="Event(self, *args, **kwds)" />
        <scope ilk="function" name="Queue" signature="Queue(self, *args, **kwds)" />
        <scope ilk="function" name="Array" signature="Array(self, *args, **kwds)" />
        <scope ilk="function" name="dict" signature="dict(self, *args, **kwds)" />
        <scope ilk="function" name="Pool" signature="Pool(self, *args, **kwds)" />
        <scope ilk="function" name="Semaphore" signature="Semaphore(self, *args, **kwds)" />
        <scope ilk="function" name="Value" signature="Value(self, *args, **kwds)" />
        <scope ilk="function" name="Condition" signature="Condition(self, *args, **kwds)" />
        <scope ilk="function" name="Namespace" signature="Namespace(self, *args, **kwds)" />
      </scope>
      <scope classrefs="object" doc="Type to uniquely indentify a shared object&#xA;" ilk="class" line="77" lineend="94" name="Token">
        <scope ilk="function" line="92" lineend="94" name="__repr__" returns="tuple" signature="__repr__(self)">
          <variable citdl="Token" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="89" lineend="90" name="__setstate__" signature="__setstate__(self, state)">
          <variable citdl="Token" ilk="argument" name="self" />
          <variable ilk="argument" name="state" />
        </scope>
        <scope ilk="function" line="86" lineend="87" name="__getstate__" returns="tuple" signature="__getstate__(self)">
          <variable citdl="Token" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="83" lineend="84" name="__init__" signature="__init__(self, typeid, address, id)">
          <variable ilk="argument" name="typeid" />
          <variable citdl="Token" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
          <variable ilk="argument" name="address" />
        </scope>
        <variable attributes="__instancevar__" line="84" name="typeid" />
        <variable citdl="tuple" line="81" name="__slots__" />
        <variable attributes="__instancevar__" line="84" name="id" />
        <variable attributes="__instancevar__" line="84" name="address" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" line="950" lineend="960" name="Value">
        <scope ilk="function" line="956" lineend="957" name="set" signature="set(self, value)">
          <variable citdl="Value" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="958" lineend="959" name="__repr__" returns="tuple" signature="__repr__(self)">
          <variable citdl="Value" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="951" lineend="953" name="__init__" signature="__init__(self, typecode, value, lock=True)">
          <variable citdl="True" ilk="argument" name="lock" />
          <variable citdl="Value" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="typecode" />
        </scope>
        <scope ilk="function" line="954" lineend="955" name="get" signature="get(self)">
          <variable citdl="Value" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="953" name="_value" />
        <variable attributes="protected __instancevar__" line="952" name="_typecode" />
        <variable citdl="property()" line="960" name="value" />
      </scope>
      <scope classrefs="BaseProxy" doc="&#xA;" ilk="class" line="1034" lineend="1040" name="ValueProxy">
        <scope ilk="function" line="1038" lineend="1039" name="set" returns="self._callmethod()" signature="set(self, value)">
          <variable citdl="ValueProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="1036" lineend="1037" name="get" returns="self._callmethod()" signature="get(self)">
          <variable citdl="ValueProxy" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected" citdl="tuple" line="1035" name="_exposed_" />
        <variable citdl="property()" line="1040" name="value" />
      </scope>
      <variable citdl="list" line="36" name="__all__" />
      <scope doc="Return list of process objects corresponding to live child&#xA;processes" ilk="function" name="active_children" signature="active_children()" />
      <scope doc="Return a list of names of methods of `obj`" ilk="function" line="130" lineend="139" name="all_methods" returns="list" signature="all_methods(obj)">
        <variable ilk="argument" name="obj" />
        <variable citdl="getattr()" line="136" name="func" />
        <variable citdl="list" line="134" name="temp" />
      </scope>
      <import module="array" />
      <scope ilk="function" name="assert_spawning" signature="assert_spawning(self)" />
      <import module="connection" />
      <scope ilk="function" line="110" lineend="120" name="convert_to_error" returns="RemoteError()" signature="convert_to_error(kind, result)">
        <variable ilk="argument" name="kind" />
        <variable ilk="argument" name="result" />
      </scope>
      <import module="copyreg" />
      <scope doc="Return process object representing the current process" ilk="function" name="current_process" signature="current_process()" />
      <scope doc="Send a message to manager using connection `c` and return&#xA;response" ilk="function" line="100" lineend="108" name="dispatch" signature="dispatch(c, id, methodname, args=(), kwds={})">
        <variable ilk="argument" name="c" />
        <variable ilk="argument" name="methodname" />
        <variable citdl="dict" ilk="argument" name="kwds" />
        <variable ilk="argument" name="id" />
        <variable citdl="tuple" ilk="argument" name="args" />
        <variable line="105" name="kind" />
        <variable line="105" name="result" />
      </scope>
      <scope doc="Exit to the system with specified status, without normal&#xA;exit processing." ilk="function" name="exit" signature="_exit(status)" />
      <scope doc="Like print_exc() but return a string." ilk="function" name="format_exc" signature="format_exc(limit=None, chain=True)" />
      <scope ilk="function" name="info" signature="info(msg, *args)" />
      <variable citdl="dict" line="460" name="listener_client" />
      <import module="os" />
      <scope doc="Return a list of names of methods of `obj` which do not&#xA;start with &apos;_&apos;" ilk="function" line="141" lineend="145" name="public_methods" returns="list" signature="public_methods(obj)">
        <variable ilk="argument" name="obj" />
      </scope>
      <import module="queue" />
      <scope ilk="function" line="66" lineend="67" name="rebuild_as_list" returns="tuple" signature="rebuild_as_list(obj)">
        <variable ilk="argument" name="obj" />
      </scope>
      <scope ilk="function" line="60" lineend="61" name="reduce_array" returns="tuple" signature="reduce_array(a)">
        <variable ilk="argument" name="a" />
      </scope>
      <import module="sys" />
      <import module="threading" />
      <import module="util" />
      <scope classrefs="object" doc="&#xA;" ilk="class" name="view_type">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
      </scope>
      <variable citdl="list" line="64" name="view_types" />
      <import module="weakref" />
    </scope>
    