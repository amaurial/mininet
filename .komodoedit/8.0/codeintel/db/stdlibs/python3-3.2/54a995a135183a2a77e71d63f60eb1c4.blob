<scope doc="Support to pretty-print lists, tuples, &amp; dictionaries recursively.&#xA;Very simple, but useful, especially in debugging data structures.  Classes -------  PrettyPrinter() Handle pretty-printing operations onto a stream using a configured set of formatting parameters.  Functions" ilk="blob" lang="Python" name="pprint">
      <scope classrefs="object" doc="&#xA;" ilk="class" line="99" lineend="257" name="PrettyPrinter">
        <scope ilk="function" line="143" lineend="145" name="isreadable" returns="bool" signature="isreadable(self, object)">
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable line="144" name="readable" />
          <variable line="144" name="s" />
          <variable line="144" name="recursive" />
        </scope>
        <scope doc="Format object for a specific context, returning a string and&#xA;flags indicating whether the representation is &apos;readable&apos;&#xA;and whether the object represents a recursive construct." ilk="function" line="252" lineend="257" name="format" returns="_safe_repr()" signature="format(self, object, context, maxlevels, level)">
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable ilk="argument" name="maxlevels" />
          <variable ilk="argument" name="context" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="147" lineend="241" name="_format" signature="_format(self, object, stream, indent, allowance, context, level)">
          <variable ilk="argument" name="stream" />
          <variable citdl="sorted()" ilk="argument" name="object" />
          <variable citdl="_id()" line="149" name="objid" />
          <variable citdl="_type()" line="156" name="typ" />
          <variable citdl="int()" ilk="argument" name="indent" />
          <variable citdl="int" ilk="argument" name="level" />
          <variable citdl="str" line="203" name="endchar" />
          <variable citdl="sorted()" line="175" name="items" />
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable citdl="stream.write" line="158" name="write" />
          <variable citdl="_len()" line="170" name="length" />
          <variable citdl="getattr()" line="165" name="r" />
          <variable citdl="bool" line="157" name="sepLines" />
          <variable ilk="argument" name="context" />
          <variable citdl="self._repr()" line="155" name="rep" />
          <variable ilk="argument" name="allowance" />
        </scope>
        <scope ilk="function" line="131" lineend="133" name="pprint" signature="pprint(self, object)">
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
        </scope>
        <scope ilk="function" line="243" lineend="250" name="_repr" signature="_repr(self, object, context, level)">
          <variable line="244" name="recursive" />
          <variable ilk="argument" name="context" />
          <variable ilk="argument" name="level" />
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable line="244" name="readable" />
          <variable line="244" name="repr" />
        </scope>
        <scope ilk="function" line="135" lineend="138" name="pformat" returns="sio.getvalue()" signature="pformat(self, object)">
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable citdl="_StringIO()" line="136" name="sio" />
        </scope>
        <scope doc="Handle pretty printing operations onto a stream using a set&#xA;of configured parameters." ilk="function" line="100" lineend="129" name="__init__" signature="__init__(self, indent=1, width=80, depth=None, stream=None)">
          <variable citdl="int" ilk="argument" name="width" />
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="indent" />
          <variable ilk="argument" name="depth" />
          <variable ilk="argument" name="stream" />
        </scope>
        <scope ilk="function" line="140" lineend="141" name="isrecursive" signature="isrecursive(self, object)">
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
        </scope>
        <variable attributes="protected __instancevar__" line="123" name="_depth" />
        <variable attributes="protected __instancevar__" citdl="int" line="124" name="_indent_per_level" />
        <variable attributes="protected __instancevar__" citdl="_sys.stdout" line="127" name="_stream" />
        <variable attributes="protected __instancevar__" citdl="int" line="125" name="_width" />
        <variable attributes="protected __instancevar__" citdl="True" line="152" name="_recursive" />
        <variable attributes="protected __instancevar__" citdl="False" line="153" name="_readable" />
      </scope>
      <variable citdl="list" line="41" name="__all__" />
      <import module="_sys" />
      <scope doc="Determine if saferepr(object) is readable by eval()." ilk="function" line="65" lineend="67" name="isreadable" signature="isreadable(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Determine if object requires a recursive representation." ilk="function" line="69" lineend="71" name="isrecursive" signature="isrecursive(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Format a Python object into a pretty-printed representation." ilk="function" line="57" lineend="59" name="pformat" signature="pformat(object, indent=1, width=80, depth=None)">
        <variable citdl="int" ilk="argument" name="width" />
        <variable ilk="argument" name="depth" />
        <variable ilk="argument" name="object" />
        <variable citdl="int" ilk="argument" name="indent" />
      </scope>
      <scope doc="Pretty-print a Python object to a stream [default is&#xA;sys.stdout]." ilk="function" line="51" lineend="55" name="pprint" signature="pprint(object, stream=None, indent=1, width=80, depth=None)">
        <variable citdl="int" ilk="argument" name="width" />
        <variable ilk="argument" name="depth" />
        <variable citdl="PrettyPrinter()" line="53" name="printer" />
        <variable citdl="int" ilk="argument" name="indent" />
        <variable ilk="argument" name="stream" />
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Version of repr() which can handle recursive data&#xA;structures." ilk="function" line="61" lineend="63" name="saferepr" signature="saferepr(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="352" lineend="363" name="_perfcheck" signature="_perfcheck(object=None)">
        <import line="353" module="time" />
        <variable citdl="list" ilk="argument" name="object" />
        <variable citdl="PrettyPrinter" line="356" name="p" />
        <variable citdl="time.time()" line="357" name="t1" />
        <variable citdl="time.time()" line="359" name="t2" />
        <variable citdl="time.time()" line="361" name="t3" />
      </scope>
      <variable attributes="protected __hidden__" citdl="type" line="48" name="_type" />
      <variable attributes="protected __hidden__" citdl="len" line="47" name="_len" />
      <scope attributes="protected __hidden__" ilk="function" line="347" lineend="349" name="_recursion" returns="tuple" signature="_recursion(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="262" lineend="344" name="_safe_repr" returns="tuple" signature="_safe_repr(object, context, maxlevels, level)">
        <variable ilk="argument" name="object" />
        <variable ilk="argument" name="context" />
        <variable ilk="argument" name="maxlevels" />
        <variable ilk="argument" name="level" />
        <variable citdl="_type()" line="263" name="typ" />
        <variable citdl="str" line="268" name="closure" />
        <variable citdl="dict" line="269" name="quotes" />
        <variable citdl="quotes.get" line="273" name="qget" />
        <variable citdl="_StringIO()" line="274" name="sio" />
        <variable citdl="sio.write" line="275" name="write" />
        <variable citdl="getattr()" line="283" name="r" />
        <variable citdl="_id()" line="287" name="objid" />
        <variable citdl="True" line="293" name="readable" />
        <variable citdl="False" line="294" name="recursive" />
        <variable citdl="list" line="295" name="components" />
        <variable citdl="components.append" line="296" name="append" />
        <variable citdl="_safe_repr" line="298" name="saferepr" />
        <variable citdl="sorted()" line="299" name="items" />
        <variable line="301" name="kreadable" />
        <variable line="301" name="krecur" />
        <variable line="301" name="krepr" />
        <variable line="302" name="vrecur" />
        <variable line="302" name="vrepr" />
        <variable line="302" name="vreadable" />
        <variable citdl="str" line="315" name="format" />
        <variable line="334" name="orepr" />
        <variable line="334" name="orecur" />
        <variable line="334" name="oreadable" />
        <variable citdl="repr()" line="343" name="rep" />
      </scope>
      <scope attributes="protected __hidden__" doc="Helper function for key functions when sorting unorderable objects.&#xA;&#xA;The wrapped-object will fallback to an Py2.x style comparison for&#xA;unorderable types (sorting first comparing the type name and then by&#xA;the obj ids).  Does not work recursively, so dict.items() must have&#xA;_safe_key applied to both the key and the value.&#xA;" ilk="class" line="73" lineend="93" name="_safe_key">
        <variable citdl="list" line="83" name="__slots__" />
        <scope attributes="__ctor__" ilk="function" line="85" lineend="86" name="__init__" signature="_safe_key(obj)">
          <variable citdl="_safe_key" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
        </scope>
        <variable attributes="__instancevar__" line="86" name="obj" />
        <scope ilk="function" line="88" lineend="93" name="__lt__" returns="bool" signature="__lt__(other)">
          <variable citdl="_safe_key" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="bool" line="89" name="rv" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Helper function for comparing 2-tuples" ilk="function" line="95" lineend="97" name="_safe_tuple" returns="tuple" signature="_safe_tuple(t)">
        <variable ilk="argument" name="t" />
      </scope>
      <variable attributes="protected __hidden__" citdl="str.join" line="45" name="_commajoin" />
      <variable attributes="protected __hidden__" citdl="id" line="46" name="_id" />
    </scope>
    