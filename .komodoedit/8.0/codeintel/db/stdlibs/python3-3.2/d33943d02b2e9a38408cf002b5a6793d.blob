<scope doc="text_file&#xA;provides the TextFile class, which gives an interface to text files that (optionally) takes care of stripping comments, ignoring blank lines, and joining lines with backslashes." ilk="blob" lang="Python" name="distutils.text_file">
      <scope classrefs="object" doc="Provides a file-like object that takes care of all the things you&#xA;commonly want to do when processing a text file that has some line-by-line syntax: strip comments (as long as &quot;#&quot; is your comment character), skip blank lines, join adjacent lines by escaping the newline (ie. backslash at end of line), strip leading and/or trailing whitespace.  All of these are optional and independently controllable.  Provides a &apos;warn()&apos; method so you can generate warning messages that report physical line number, even if the logical line in question spans multiple physical lines.  Also provides &apos;unreadline()&apos; for" ilk="class" line="10" lineend="285" name="TextFile">
        <scope doc="Open a new file named &apos;filename&apos;." ilk="function" line="111" lineend="116" name="open" signature="open(self, filename)">
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
        </scope>
        <scope doc="Read and return the list of all logical lines remaining in&#xA;the current file." ilk="function" line="271" lineend="279" name="readlines" returns="list" signature="readlines(self)">
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable citdl="list" line="274" name="lines" />
          <variable citdl="readline()" line="276" name="line" />
        </scope>
        <scope doc="line in the current file." ilk="function" line="141" lineend="149" name="warn" signature="Print (to stderr) a warning message tied to the current logical">
          <variable ilk="argument" name="msg" />
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope ilk="function" line="138" lineend="139" name="error" signature="error(self, msg, line=None)">
          <variable ilk="argument" name="msg" />
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope doc="Close the current file and forget everything we know about&#xA;it (filename, current line number)." ilk="function" line="118" lineend="124" name="close" signature="close(self)">
          <variable citdl="TextFile" ilk="argument" name="self" />
        </scope>
        <scope doc="Read and return a single logical line from the current file&#xA;(or from an internal buffer if lines have previously been&#xA;&quot;unread&quot; with &apos;unreadline()&apos;)." ilk="function" line="151" lineend="269" name="readline" returns="line.strip()" signature="readline(self)">
          <variable citdl="list" line="170" name="buildup_line" />
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable citdl="line.lstrip()" line="166" name="line" />
          <variable citdl="line.find()" line="188" name="pos" />
          <variable citdl="bool" line="201" name="eol" />
        </scope>
        <scope ilk="function" line="126" lineend="136" name="gen_error" returns="str.join()" signature="gen_error(self, msg, line=None)">
          <variable ilk="argument" name="msg" />
          <variable citdl="list" line="127" name="outmsg" />
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="line" />
        </scope>
        <scope doc="Push &apos;line&apos; (a string) onto an internal buffer that will be&#xA;checked by future &apos;readline()&apos; calls." ilk="function" line="281" lineend="285" name="unreadline" signature="unreadline(self, line)">
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope doc="Construct a new TextFile object." ilk="function" line="78" lineend="109" name="__init__" signature="__init__(self, filename=None, file=None, **options)">
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="options" />
          <variable ilk="argument" name="file" />
          <variable ilk="argument" name="filename" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="104" name="current_line" />
        <variable attributes="__instancevar__" line="102" name="filename" />
        <variable attributes="__instancevar__" citdl="io.open()" line="103" name="file" />
        <variable attributes="__instancevar__" citdl="list" line="109" name="linebuf" />
        <variable citdl="dict" line="69" name="default_options" />
      </scope>
      <import module="io" />
      <import module="os" />
      <import module="sys" />
      <variable citdl="str" line="7" name="__revision__" />
    </scope>
    