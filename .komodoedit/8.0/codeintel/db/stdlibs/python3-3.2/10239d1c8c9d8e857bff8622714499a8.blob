<scope doc="Fix changes imports of urllib which are now incompatible.&#xA;This is rather similar to fix_imports, but because of the more complex nature of the fixing for urllib, it has its own fixer." ilk="blob" lang="Python" name="lib2to3.fixes.fix_urllib">
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope classrefs="BaseFix" doc="&#xA;" ilk="class" name="FixImports">
        <scope ilk="function" name="compile_pattern" signature="compile_pattern(self)" />
        <scope ilk="function" name="transform" signature="transform(self, node, results)" />
        <scope ilk="function" name="start_tree" signature="start_tree(self, tree, filename)" />
        <scope ilk="function" name="build_pattern" signature="build_pattern(self)" />
        <scope doc="# Don&apos;t match the node if it&apos;s within another match." ilk="function" name="match" signature="match(self, node)" />
      </scope>
      <scope classrefs="FixImports" doc="&#xA;" ilk="class" line="72" lineend="197" name="FixUrllib">
        <scope doc="Transform for the basic import case." ilk="function" line="77" lineend="91" name="transform_import" signature="transform_import(self, node, results)">
          <variable ilk="argument" name="node" />
          <variable citdl="results.get()" line="82" name="import_mod" />
          <variable citdl="list" line="85" name="names" />
          <variable citdl="FixUrllib" ilk="argument" name="self" />
          <variable citdl="import_mod.prefix" line="83" name="pref" />
          <variable ilk="argument" name="results" />
        </scope>
        <scope doc="Transform for calls to module members in code." ilk="function" line="169" lineend="184" name="transform_dot" signature="transform_dot(self, node, results)">
          <variable ilk="argument" name="node" />
          <variable line="173" name="new_name" />
          <variable citdl="results.get()" line="172" name="member" />
          <variable citdl="FixUrllib" ilk="argument" name="self" />
          <variable ilk="argument" name="results" />
          <variable citdl="results.get()" line="171" name="module_dot" />
        </scope>
        <scope ilk="function" line="74" lineend="75" name="build_pattern" returns="str.join()" signature="build_pattern(self)">
          <variable citdl="FixUrllib" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="186" lineend="197" name="transform" signature="transform(self, node, results)">
          <variable ilk="argument" name="node" />
          <variable citdl="FixUrllib" ilk="argument" name="self" />
          <variable ilk="argument" name="results" />
        </scope>
        <scope doc="Transform for imports of specific module elements." ilk="function" line="93" lineend="167" name="transform_member" signature="transform_member(self, node, results)">
          <variable ilk="argument" name="node" />
          <variable line="149" name="elts" />
          <variable ilk="argument" name="results" />
          <variable citdl="dict" line="121" name="mod_dict" />
          <variable citdl="list" line="150" name="names" />
          <variable line="122" name="members" />
          <variable citdl="member.value" line="127" name="member_name" />
          <variable citdl="list" line="138" name="new_nodes" />
          <variable line="107" name="new_name" />
          <variable citdl="FixUrllib" ilk="argument" name="self" />
          <variable citdl="mod_member.prefix" line="99" name="pref" />
          <variable citdl="list" line="120" name="modules" />
          <variable citdl="results.get()" line="98" name="mod_member" />
          <variable citdl="results.get()" line="100" name="member" />
          <variable citdl="find_indentation()" line="139" name="indentation" />
          <variable citdl="FromImport()" line="155" name="new" />
          <variable citdl="list" line="161" name="nodes" />
          <scope ilk="function" line="141" lineend="147" name="handle_name" returns="list" signature="handle_name(name, prefix)">
            <variable ilk="argument" name="name" />
            <variable ilk="argument" name="prefix" />
            <variable citdl="list" line="143" name="kids" />
          </scope>
          <variable line="126" name="as_name" />
          <variable citdl="True" line="140" name="first" />
        </scope>
      </scope>
      <scope doc="Return an import statement in the form: from package import&#xA;name_leafs" ilk="function" name="FromImport" signature="FromImport(package_name, name_leafs)" />
      <variable citdl="dict" line="13" name="MAPPING" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope doc="A newline literal" ilk="function" name="Newline" signature="Newline()" />
      <scope classrefs="Base" doc="Concrete implementation for interior nodes.&#xA;" ilk="class" name="Node">
        <scope doc="Return a post-order iterator for the tree." ilk="function" name="post_order" signature="post_order(self)" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" name="pre_order" signature="pre_order(self)" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" name="clone" signature="clone(self)" />
        <scope doc="Equivalent to &apos;node.children.insert(i, child)&apos;." ilk="function" name="insert_child" signature="insert_child(self, i, child)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="_eq" signature="_eq(self, other)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, type, children, context=None, prefix=None, fixers_applied=None)" />
        <scope ilk="function" name="_prefix_setter" signature="_prefix_setter(self, prefix)" />
        <scope doc="Equivalent to &apos;node.children.append(child)&apos;." ilk="function" name="append_child" signature="append_child(self, child)" />
        <scope doc="The whitespace and comments preceding this node in the&#xA;input." ilk="function" name="_prefix_getter" signature="_prefix_getter(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__unicode__" signature="__unicode__(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Equivalent to &apos;node.children[i] = child&apos;." ilk="function" name="set_child" signature="set_child(self, i, child)" />
        <scope doc="Return a canonical string representation." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope ilk="function" name="alternates" signature="alternates(members)" />
      <scope ilk="function" line="49" lineend="69" name="build_pattern" signature="build_pattern()">
        <variable citdl="set()" line="50" name="bare" />
        <variable citdl="alternates()" line="54" name="members" />
      </scope>
      <scope doc="Find the indentation of *node*." ilk="function" name="find_indentation" signature="find_indentation(node)" />
      <import module="fixer_base" />
      <variable citdl="Symbols" name="syms" />
    </scope>
    