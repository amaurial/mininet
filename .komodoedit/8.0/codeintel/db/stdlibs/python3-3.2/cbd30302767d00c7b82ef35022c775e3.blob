<scope doc="Class for printing reports on profiled python code.&#xA;" ilk="blob" lang="Python" name="pstats">
      <scope classrefs="object" doc="This class is used for creating reports from data generated by the&#xA;Profile class.  It is a &quot;friend&quot; of that class, and imports data either by direct access to members of Profile class, or by reading in a dictionary that was emitted (via marshal) from the Profile class.  The big change from the previous Profiler (in terms of raw functionality) is that an &quot;add()&quot; method has been provided to combine Stats from several distinct profile runs.  Both the constructor and the add() method now take arbitrarily many file names as arguments.  All the print methods now take an argument that indicates how many lines" ilk="class" name="Stats">
        <scope ilk="function" name="load_stats" signature="load_stats(self, arg)" />
        <scope ilk="function" name="print_stats" signature="print_stats(self, *amount)" />
        <scope ilk="function" name="get_print_list" signature="get_print_list(self, sel_list)" />
        <scope ilk="function" name="print_callees" signature="print_callees(self, *amount)" />
        <scope ilk="function" name="get_top_level_stats" signature="get_top_level_stats(self)" />
        <scope ilk="function" name="__init__" signature="__init__(self, *args, stream=None)" />
        <scope ilk="function" name="reverse_order" signature="reverse_order(self)" />
        <scope ilk="function" name="print_callers" signature="print_callers(self, *amount)" />
        <scope ilk="function" name="print_call_line" signature="print_call_line(self, name_size, source, call_dict, arrow=&apos;-&gt;&apos;)" />
        <scope ilk="function" name="print_title" signature="print_title(self)" />
        <scope ilk="function" name="eval_print_amount" signature="eval_print_amount(self, sel, list, msg)" />
        <scope ilk="function" name="print_line" signature="print_line(self, func)" />
        <scope ilk="function" name="init" signature="init(self, arg)" />
        <scope doc="Expand all abbreviations that are unique." ilk="function" name="get_sort_arg_defs" signature="get_sort_arg_defs(self)" />
        <scope ilk="function" name="add" signature="add(self, *arg_list)" />
        <scope ilk="function" name="strip_dirs" signature="strip_dirs(self)" />
        <scope ilk="function" name="print_call_heading" signature="print_call_heading(self, name_size, column_title)" />
        <scope ilk="function" name="calc_callees" signature="calc_callees(self)" />
        <scope doc="Write the profile data to a file we know how to load back." ilk="function" name="dump_stats" signature="dump_stats(self, filename)" />
        <scope ilk="function" name="sort_stats" signature="sort_stats(self, *field)" />
      </scope>
      <scope classrefs="object" doc="This class provides a generic function for comparing any two tuples.&#xA;Each instance records a list of tuple-indices (from most significant to least significant), and sort direction (ascending or decending) for each tuple-index.  The compare functions can then be used as the function argument to the system sort() function when a list of tuples need to be sorted in the instances order." ilk="class" name="TupleComp">
        <scope ilk="function" name="compare" signature="compare(self, left, right)" />
        <scope ilk="function" name="__init__" signature="__init__(self, comp_select_list)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Combine two caller lists in a single list." ilk="function" name="add_callers" signature="add_callers(target, source)" />
      <scope doc="Add together all the stats for two profile entries." ilk="function" name="add_func_stats" signature="add_func_stats(target, source)" />
      <scope doc="Convert a cmp= function into a key= function" ilk="function" name="cmp_to_key" signature="cmp_to_key(mycmp)" />
      <scope doc="Sum the caller statistics to get total number of calls&#xA;received." ilk="function" name="count_calls" signature="count_calls(callers)" />
      <scope ilk="function" name="f8" signature="f8(x)" />
      <scope ilk="function" name="func_get_function_name" signature="func_get_function_name(func)" />
      <scope ilk="function" name="func_std_string" signature="func_std_string(func_name)" />
      <scope ilk="function" name="func_strip_path" signature="func_strip_path(func_name)" />
      <import module="marshal" />
      <import module="os" />
      <import module="re" />
      <import module="sys" />
      <import module="time" />
    </scope>
    