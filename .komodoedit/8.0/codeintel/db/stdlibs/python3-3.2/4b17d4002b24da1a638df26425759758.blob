<scope doc="Fixer for execfile.&#xA;This converts usages of the execfile function into calls to the built-in exec() function." ilk="blob" lang="Python" name="lib2to3.fixes.fix_execfile">
      <scope doc="A parenthesised argument list, used by Call()" ilk="function" name="ArgList" signature="ArgList(args, lparen=Leaf(7, &apos;(&apos;), rparen=Leaf(8, &apos;)&apos;))" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope doc="A period (.) leaf" ilk="function" name="Dot" signature="Dot()" />
      <scope classrefs="BaseFix" doc="&#xA;" ilk="class" line="15" lineend="52" name="FixExecfile">
        <scope ilk="function" line="24" lineend="52" name="transform" returns="Call()" signature="transform(self, node, results)">
          <variable ilk="argument" name="node" />
          <variable line="32" name="execfile_paren" />
          <variable citdl="list" line="36" name="read" />
          <variable citdl="list" line="47" name="args" />
          <variable ilk="argument" name="results" />
          <variable citdl="ArgList()" line="34" name="open_args" />
          <variable citdl="list" line="44" name="compile_args" />
          <variable citdl="list" line="38" name="open_expr" />
          <variable citdl="Node()" line="35" name="open_call" />
          <variable citdl="String()" line="43" name="exec_str" />
          <variable citdl="Call()" line="45" name="compile_call" />
          <variable citdl="results.get()" line="28" name="locals" />
          <variable citdl="filename.clone()" line="41" name="filename_arg" />
          <variable citdl="FixExecfile" ilk="argument" name="self" />
          <variable line="26" name="filename" />
          <variable citdl="results.get()" line="27" name="globals" />
        </scope>
        <variable citdl="True" line="16" name="BM_compatible" />
        <variable citdl="str" line="18" name="PATTERN" />
      </scope>
      <scope ilk="function" name="LParen" signature="LParen()" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope classrefs="Base" doc="Concrete implementation for interior nodes.&#xA;" ilk="class" name="Node">
        <scope doc="Return a post-order iterator for the tree." ilk="function" name="post_order" signature="post_order(self)" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" name="pre_order" signature="pre_order(self)" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" name="clone" signature="clone(self)" />
        <scope doc="Equivalent to &apos;node.children.insert(i, child)&apos;." ilk="function" name="insert_child" signature="insert_child(self, i, child)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="_eq" signature="_eq(self, other)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, type, children, context=None, prefix=None, fixers_applied=None)" />
        <scope ilk="function" name="_prefix_setter" signature="_prefix_setter(self, prefix)" />
        <scope doc="Equivalent to &apos;node.children.append(child)&apos;." ilk="function" name="append_child" signature="append_child(self, child)" />
        <scope doc="The whitespace and comments preceding this node in the&#xA;input." ilk="function" name="_prefix_getter" signature="_prefix_getter(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__unicode__" signature="__unicode__(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Equivalent to &apos;node.children[i] = child&apos;." ilk="function" name="set_child" signature="set_child(self, i, child)" />
        <scope doc="Return a canonical string representation." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope ilk="function" name="RParen" signature="RParen()" />
      <scope doc="A string leaf" ilk="function" name="String" signature="String(string, prefix=None)" />
      <import module="fixer_base" />
      <variable citdl="Symbols" name="syms" />
    </scope>
    