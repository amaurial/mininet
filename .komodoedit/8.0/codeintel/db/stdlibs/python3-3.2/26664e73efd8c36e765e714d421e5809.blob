<scope doc="Redo the builtin repr() (representation) but with limits on most sizes.&#xA;" ilk="blob" lang="Python" name="reprlib">
      <scope classrefs="object" doc="&#xA;" ilk="class" line="38" lineend="144" name="Repr">
        <scope ilk="function" line="133" lineend="144" name="repr_instance" returns="tuple" signature="repr_instance(self, x, level)">
          <variable citdl="list" line="135" name="s" />
          <variable ilk="argument" name="level" />
          <variable citdl="max()" line="141" name="i" />
          <variable ilk="argument" name="x" />
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable citdl="max()" line="142" name="j" />
        </scope>
        <scope ilk="function" line="85" lineend="87" name="repr_array" returns="Repr._repr_iterable()" signature="repr_array(self, x, level)">
          <variable ilk="argument" name="x" />
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable citdl="x.typecode" line="86" name="header" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="79" lineend="80" name="repr_tuple" returns="Repr._repr_iterable()" signature="repr_tuple(self, x, level)">
          <variable ilk="argument" name="x" />
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="82" lineend="83" name="repr_list" returns="Repr._repr_iterable()" signature="repr_list(self, x, level)">
          <variable ilk="argument" name="x" />
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="116" lineend="123" name="repr_str" returns="str" signature="repr_str(self, x, level)">
          <variable citdl="list" line="117" name="s" />
          <variable ilk="argument" name="level" />
          <variable citdl="max()" line="119" name="i" />
          <variable ilk="argument" name="x" />
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable citdl="max()" line="120" name="j" />
        </scope>
        <scope ilk="function" line="66" lineend="77" name="_repr_iterable" returns="tuple" signature="_repr_iterable(self, x, level, left, right, maxiter, trail=&apos;&apos;)">
          <variable citdl="str" ilk="argument" name="right" />
          <variable ilk="argument" name="level" />
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable citdl="int" line="71" name="newlevel" />
          <variable citdl="Repr.repr1" line="72" name="repr1" />
          <variable citdl="str" ilk="argument" name="trail" />
          <variable citdl="str.join()" line="69" name="s" />
          <variable citdl="list" line="73" name="pieces" />
          <variable ilk="argument" name="maxiter" />
          <variable ilk="argument" name="x" />
          <variable citdl="len()" line="67" name="n" />
          <variable ilk="argument" name="left" />
        </scope>
        <scope ilk="function" line="53" lineend="54" name="repr" returns="self.repr1()" signature="repr(self, x)">
          <variable ilk="argument" name="x" />
          <variable citdl="Repr" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="89" lineend="91" name="repr_set" returns="Repr._repr_iterable()" signature="repr_set(self, x, level)">
          <variable citdl="_possibly_sorted()" ilk="argument" name="x" />
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="93" lineend="96" name="repr_frozenset" returns="Repr._repr_iterable()" signature="repr_frozenset(self, x, level)">
          <variable citdl="_possibly_sorted()" ilk="argument" name="x" />
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="98" lineend="99" name="repr_deque" returns="Repr._repr_iterable()" signature="repr_deque(self, x, level)">
          <variable ilk="argument" name="x" />
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="56" lineend="64" name="repr1" returns="getattr()()" signature="repr1(self, x, level)">
          <variable ilk="argument" name="x" />
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable citdl="typename.split()" line="59" name="parts" />
          <variable citdl="str.join()" line="57" name="typename" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="101" lineend="114" name="repr_dict" returns="tuple" signature="repr_dict(self, x, level)">
          <variable citdl="repr1()" line="110" name="valrepr" />
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
          <variable citdl="int" line="105" name="newlevel" />
          <variable citdl="Repr.repr1" line="106" name="repr1" />
          <variable citdl="str.join()" line="113" name="s" />
          <variable citdl="list" line="107" name="pieces" />
          <variable citdl="repr1()" line="109" name="keyrepr" />
          <variable ilk="argument" name="x" />
          <variable citdl="len()" line="102" name="n" />
        </scope>
        <scope ilk="function" line="40" lineend="51" name="__init__" signature="__init__(self)">
          <variable citdl="Repr" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="125" lineend="131" name="repr_int" returns="str" signature="repr_int(self, x, level)">
          <variable citdl="list" line="126" name="s" />
          <variable ilk="argument" name="level" />
          <variable citdl="max()" line="128" name="i" />
          <variable ilk="argument" name="x" />
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable citdl="max()" line="129" name="j" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="42" name="maxtuple" />
        <variable attributes="__instancevar__" citdl="int" line="48" name="maxdeque" />
        <variable attributes="__instancevar__" citdl="int" line="44" name="maxarray" />
        <variable attributes="__instancevar__" citdl="int" line="51" name="maxother" />
        <variable attributes="__instancevar__" citdl="int" line="49" name="maxstring" />
        <variable attributes="__instancevar__" citdl="int" line="50" name="maxlong" />
        <variable attributes="__instancevar__" citdl="int" line="47" name="maxfrozenset" />
        <variable attributes="__instancevar__" citdl="int" line="45" name="maxdict" />
        <variable attributes="__instancevar__" citdl="int" line="46" name="maxset" />
        <variable attributes="__instancevar__" citdl="int" line="43" name="maxlist" />
        <variable attributes="__instancevar__" citdl="int" line="41" name="maxlevel" />
      </scope>
      <variable citdl="list" line="3" name="__all__" />
      <variable citdl="Repr" line="156" name="aRepr" />
      <import module="builtins" />
      <scope doc="Return a non-zero integer that uniquely identifies the&#xA;current thread amongst other threads that exist&#xA;simultaneously." ilk="function" name="get_ident" returns="int" signature="get_ident() -&gt; integer" />
      <scope classrefs="object" doc="islice(iterable, [start,] stop [, step]) --&gt; islice object&#xA;Return an iterator whose next() method returns selected values from an iterable.  If start is specified, will skip all preceding elements; otherwise, start defaults to zero.  Step defaults to one.  If specified as another value, step determines how many values are skipped between successive calls.  Works like a slice() on a list but returns an iterator." ilk="class" name="islice">
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__next__() &lt;==&gt; next(x)" ilk="function" name="__next__" signature="x.__next__() &lt;==&gt; next(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      </scope>
      <scope doc="Decorator to make a repr function return fillvalue for a&#xA;recursive call" ilk="function" line="12" lineend="36" name="recursive_repr" returns="recursive_repr.decorating_function" signature="recursive_repr(fillvalue=&apos;...&apos;)">
        <scope ilk="function" line="15" lineend="34" name="decorating_function" returns="recursive_repr.decorating_function.wrapper" signature="decorating_function(user_function)">
          <variable ilk="argument" name="user_function" />
          <variable citdl="set()" line="16" name="repr_running" />
          <scope ilk="function" line="18" lineend="27" name="wrapper" returns="str" signature="wrapper(self)">
            <variable ilk="argument" name="self" />
            <variable citdl="tuple" line="19" name="key" />
            <variable citdl="user_function()" line="24" name="result" />
            <variable citdl="getattr()" line="30" name="__module__" />
            <variable citdl="getattr()" line="31" name="__doc__" />
            <variable citdl="getattr()" line="32" name="__name__" />
            <variable citdl="getattr()" line="33" name="__annotations__" />
          </scope>
        </scope>
        <variable citdl="str" ilk="argument" name="fillvalue" />
      </scope>
      <scope ilk="function" line="157" name="repr" />
      <scope attributes="protected __hidden__" ilk="function" line="147" lineend="154" name="_possibly_sorted" returns="list()" signature="_possibly_sorted(x)">
        <variable ilk="argument" name="x" />
      </scope>
    </scope>
    