<scope doc="Fraction, infinite-precision, real numbers.&#xA;" ilk="blob" lang="Python" name="fractions">
      <scope classrefs="object" doc="Floating point class for decimal arithmetic.&#xA;" ilk="class" name="Decimal">
        <scope doc="Converts self to an int, truncating if necessary." ilk="function" name="__int__" signature="__int__(self)" />
        <scope doc="Return the adjusted exponent of self" ilk="function" name="adjusted" signature="adjusted(self)" />
        <scope doc="Just returns 10, as this is Decimal, :)" ilk="function" name="radix" signature="radix(self)" />
        <scope doc="Returns True if self is even. Assumes self is an integer." ilk="function" name="_iseven" signature="_iseven(self)" />
        <scope doc="Returns whether the number is not actually one." ilk="function" name="_check_nans" signature="_check_nans(self, other=None, context=None)" />
        <scope doc="Version of _check_nans used for the signaling comparisons&#xA;compare_signal, __le__, __lt__, __ge__, __gt__." ilk="function" name="_compare_check_nans" signature="_compare_check_nans(self, other, context)" />
        <scope doc="Return string representation of the number in scientific&#xA;notation." ilk="function" name="__str__" signature="__str__(self, eng=False, context=None)" />
        <scope doc="Compares one to another." ilk="function" name="compare" signature="compare(self, other, context=None)" />
        <scope doc="Assumes that neither self nor other is a NaN, that self is&#xA;not infinite and that other is nonzero." ilk="function" name="_divide" signature="Return (self // other, self % other), to context.prec precision." />
        <scope doc="Remainder nearest to 0-  abs(remainder-near) &lt;= other/2" ilk="function" name="remainder_near" signature="remainder_near(self, other, context=None)" />
        <scope doc="Compares self to the other operand numerically." ilk="function" name="compare_signal" signature="compare_signal(self, other, context=None)" />
        <scope doc="Swaps self/other and returns __truediv__." ilk="function" name="__rtruediv__" signature="__rtruediv__(self, other, context=None)" />
        <scope doc="Return other - self" ilk="function" name="__rsub__" signature="__rsub__(self, other, context=None)" />
        <scope doc="Return the square root of self." ilk="function" name="sqrt" signature="sqrt(self, context=None)" />
        <scope doc="Returns self operand after adding the second value to its&#xA;exp." ilk="function" name="scaleb" signature="scaleb(self, other, context=None)" />
        <scope doc="Return self * other." ilk="function" name="__rmul__" signature="__rmul__(self, other, context=None)" />
        <scope doc="Returns a copy with the sign switched." ilk="function" name="__neg__" signature="__neg__(self, context=None)" />
        <scope ilk="function" name="__lt__" signature="__lt__(self, other, context=None)" />
        <scope doc="Represents the number as a triple tuple." ilk="function" name="as_tuple" signature="as_tuple(self)" />
        <scope doc="Float representation." ilk="function" name="__float__" signature="__float__(self)" />
        <scope doc="Applies an &apos;xor&apos; operation between self and other&apos;s digits." ilk="function" name="logical_xor" signature="logical_xor(self, other, context=None)" />
        <scope doc="Return True if self and other have the same exponent;&#xA;otherwise return False." ilk="function" name="same_quantum" signature="same_quantum(self, other)" />
        <scope doc="Returns a copy, unless it is a sNaN." ilk="function" name="__pos__" signature="__pos__(self, context=None)" />
        <scope doc="Returns self with the sign of other." ilk="function" name="copy_sign" signature="copy_sign(self, other)" />
        <scope ilk="function" name="_fill_logical" signature="_fill_logical(self, context, opa, opb)" />
        <scope doc="Rounds to the nearest integer, without raising inexact,&#xA;rounded." ilk="function" name="to_integral" signature="to_integral(self, rounding=None, context=None)" />
        <scope doc="Returns the absolute value of self." ilk="function" name="__abs__" signature="__abs__(self, round=True, context=None)" />
        <scope doc="Swaps self/other and returns __floordiv__." ilk="function" name="__rfloordiv__" signature="__rfloordiv__(self, other, context=None)" />
        <scope doc="Return True if self is a logical operand." ilk="function" name="_islogical" signature="_islogical(self)" />
        <scope doc="Return True if self is a zero; otherwise return False." ilk="function" name="is_zero" signature="is_zero(self)" />
        <scope doc="Rounds up (not away from 0 if negative.)" ilk="function" name="_round_ceiling" signature="_round_ceiling(self, prec)" />
        <scope ilk="function" name="__eq__" signature="__eq__(self, other, context=None)" />
        <scope doc="Round if it is necessary to keep self within prec precision." ilk="function" name="_fix" signature="_fix(self, context)" />
        <scope doc="Returns the base 10 logarithm of self." ilk="function" name="log10" signature="log10(self, context=None)" />
        <scope doc="Return True if self is subnormal; otherwise return False." ilk="function" name="is_subnormal" signature="is_subnormal(self, context=None)" />
        <scope doc="Fused multiply-add." ilk="function" name="fma" signature="fma(self, other, third, context=None)" />
        <scope doc="Attempt to compute self**other exactly." ilk="function" name="_power_exact" signature="_power_exact(self, other, p)" />
        <scope doc="Compares self to other using the abstract representations." ilk="function" name="compare_total" signature="compare_total(self, other)" />
        <scope doc="Return True if self is infinite; otherwise return False." ilk="function" name="is_infinite" signature="is_infinite(self)" />
        <scope doc="Rounds 5 up (away from 0)" ilk="function" name="_round_half_up" signature="_round_half_up(self, prec)" />
        <scope ilk="function" name="__deepcopy__" signature="__deepcopy__(self, memo)" />
        <scope doc="Return self ** other [ % modulo]." ilk="function" name="__pow__" signature="__pow__(self, other, modulo=None, context=None)" />
        <scope ilk="function" name="__gt__" signature="__gt__(self, other, context=None)" />
        <scope doc="Return True if self is nonzero; otherwise return False." ilk="function" name="__bool__" signature="__bool__(self)" />
        <scope doc="Compute a lower bound for the adjusted exponent of&#xA;self.log10()." ilk="function" name="_log10_exp_bound" signature="_log10_exp_bound(self)" />
        <scope doc="Return True if self is a quiet NaN; otherwise return False." ilk="function" name="is_qnan" signature="is_qnan(self)" />
        <scope doc="Rounds to the nearest integer, without raising inexact,&#xA;rounded." ilk="function" name="to_integral_value" signature="to_integral_value(self, rounding=None, context=None)" />
        <scope doc="Represents the number as an instance of Decimal." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Returns a rotated copy of self, value-of-other times." ilk="function" name="rotate" signature="rotate(self, other, context=None)" />
        <scope doc="Returns whether self is an integer" ilk="function" name="_isinteger" signature="_isinteger(self)" />
        <scope doc="Rescale self so that the exponent is exp, either by padding&#xA;with zeros or by truncating digits, using the given rounding&#xA;mode." ilk="function" name="_rescale" signature="_rescale(self, exp, rounding)" />
        <scope doc="Round a nonzero, nonspecial Decimal to a fixed number of&#xA;significant figures, using the given rounding mode." ilk="function" name="_round" signature="_round(self, places, rounding)" />
        <scope doc="self % other" ilk="function" name="__mod__" signature="__mod__(self, other, context=None)" />
        <scope doc="Returns an indication of the class of self." ilk="function" name="number_class" signature="number_class(self, context=None)" />
        <scope doc="Returns whether the number is not actually one." ilk="function" name="_isnan" signature="_isnan(self)" />
        <scope doc="Returns the smallest representable number larger than&#xA;itself." ilk="function" name="next_plus" signature="next_plus(self, context=None)" />
        <scope doc="Returns the number closest to self, in the direction towards&#xA;other." ilk="function" name="next_toward" signature="next_toward(self, other, context=None)" />
        <scope doc="Round 5 to even, rest to nearest." ilk="function" name="_round_half_even" signature="_round_half_even(self, prec)" />
        <scope doc="self // other" ilk="function" name="__floordiv__" signature="__floordiv__(self, other, context=None)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="Return self - other" ilk="function" name="__sub__" signature="__sub__(self, other, context=None)" />
        <scope ilk="function" name="__copy__" signature="__copy__(self)" />
        <scope ilk="function" name="__ge__" signature="__ge__(self, other, context=None)" />
        <scope doc="Return True if self is a normal number; otherwise return&#xA;False." ilk="function" name="is_normal" signature="is_normal(self, context=None)" />
        <scope doc="Convert to engineering-type string." ilk="function" name="to_eng_string" signature="to_eng_string(self, context=None)" />
        <scope doc="Converts a float to a decimal number, exactly." ilk="function" name="from_float" />
        <scope doc="# Support for pickling, copy, and deepcopy" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope doc="Swaps self/other and returns __divmod__." ilk="function" name="__rdivmod__" signature="__rdivmod__(self, other, context=None)" />
        <scope doc="Returns self + other." ilk="function" name="__radd__" signature="__radd__(self, other, context=None)" />
        <scope ilk="function" name="__complex__" signature="__complex__(self)" />
        <scope doc="Applies an &apos;or&apos; operation between self and other&apos;s digits." ilk="function" name="logical_or" signature="logical_or(self, other, context=None)" />
        <scope doc="Return self / other." ilk="function" name="__truediv__" signature="__truediv__(self, other, context=None)" />
        <scope doc="Return the floor of self, as an integer." ilk="function" name="__floor__" signature="__floor__(self)" />
        <scope doc="Returns the exponent of the magnitude of self&apos;s MSD." ilk="function" name="logb" signature="logb(self, context=None)" />
        <scope ilk="function" name="conjugate" signature="conjugate(self)" />
        <scope doc="Return True if self is a qNaN or sNaN; otherwise return&#xA;False." ilk="function" name="is_nan" signature="is_nan(self)" />
        <scope doc="Round 5 down" ilk="function" name="_round_half_down" signature="_round_half_down(self, prec)" />
        <scope doc="Return the ceiling of self, as an integer." ilk="function" name="__ceil__" signature="__ceil__(self)" />
        <scope doc="Swaps self/other and returns __mod__." ilk="function" name="__rmod__" signature="__rmod__(self, other, context=None)" />
        <scope doc="Returns the same Decimal object." ilk="function" name="canonical" signature="canonical(self, context=None)" />
        <scope doc="Normalize- strip trailing 0s, change anything equal to 0 to&#xA;0e0" ilk="function" name="normalize" signature="normalize(self, context=None)" />
        <scope doc="Round down unless digit prec-1 is 0 or 5." ilk="function" name="_round_05up" signature="_round_05up(self, prec)" />
        <scope doc="Returns a copy with the sign inverted." ilk="function" name="copy_negate" signature="copy_negate(self)" />
        <scope doc="Create a decimal point instance." ilk="function" name="__new__" signature="__new__(cls, value=&apos;0&apos;, context=None)" />
        <scope doc="Returns the smaller value." ilk="function" name="min" signature="min(self, other, context=None)" />
        <scope doc="Format a Decimal instance according to the given specifier." ilk="function" name="__format__" signature="__format__(self, specifier, context=None, _localeconv=None)" />
        <scope doc="Three argument version of __pow__" ilk="function" name="_power_modulo" signature="_power_modulo(self, other, modulo, context=None)" />
        <scope doc="Return True if self is negative; otherwise return False." ilk="function" name="is_signed" signature="is_signed(self)" />
        <scope doc="Compare the two non-NaN decimal instances self and other." ilk="function" name="_cmp" signature="_cmp(self, other)" />
        <scope doc="Round self to the nearest integer, or to a given precision." ilk="function" name="__round__" signature="__round__(self, n=None)" />
        <scope doc="Returns the largest representable number smaller than&#xA;itself." ilk="function" name="next_minus" signature="next_minus(self, context=None)" />
        <scope doc="Return True if self is canonical; otherwise return False." ilk="function" name="is_canonical" signature="is_canonical(self)" />
        <scope doc="Rounds down (not towards 0 if negative)" ilk="function" name="_round_floor" signature="_round_floor(self, prec)" />
        <scope ilk="function" name="__ne__" signature="__ne__(self, other, context=None)" />
        <scope doc="Return True if self is a signaling NaN; otherwise return&#xA;False." ilk="function" name="is_snan" signature="is_snan(self)" />
        <scope doc="Returns the larger value." ilk="function" name="max" signature="max(self, other, context=None)" />
        <scope doc="Return True if self is finite; otherwise return False." ilk="function" name="is_finite" signature="is_finite(self)" />
        <scope doc="Applies an &apos;and&apos; operation between self and other&apos;s digits." ilk="function" name="logical_and" signature="logical_and(self, other, context=None)" />
        <scope doc="Rounds to a nearby integer." ilk="function" name="to_integral_exact" signature="to_integral_exact(self, rounding=None, context=None)" />
        <scope doc="Return (self // other, self % other)" ilk="function" name="__divmod__" signature="Return (self // other, self % other)" />
        <scope doc="Returns self + other." ilk="function" name="__add__" signature="__add__(self, other, context=None)" />
        <scope doc="Compares the values numerically with their sign ignored." ilk="function" name="min_mag" signature="min_mag(self, other, context=None)" />
        <scope doc="Also known as round-towards-0, truncate." ilk="function" name="_round_down" signature="_round_down(self, prec)" />
        <scope doc="Decapitate the payload of a NaN to fit the context" ilk="function" name="_fix_nan" signature="_fix_nan(self, context)" />
        <scope doc="Compares the values numerically with their sign ignored." ilk="function" name="max_mag" signature="max_mag(self, other, context=None)" />
        <scope doc="Converts self to an int, truncating if necessary." ilk="function" name="__trunc__" signature="__trunc__(self)" />
        <scope doc="Returns a shifted copy of self, value-of-other times." ilk="function" name="shift" signature="shift(self, other, context=None)" />
        <scope doc="Compute a lower bound for the adjusted exponent of&#xA;self.ln()." ilk="function" name="_ln_exp_bound" signature="_ln_exp_bound(self)" />
        <scope doc="Invert all its digits." ilk="function" name="logical_invert" signature="logical_invert(self, context=None)" />
        <scope doc="Quantize self so its exponent is the same as that of exp." ilk="function" name="quantize" signature="quantize(self, exp, rounding=None, context=None, watchexp=True)" />
        <scope doc="Returns the natural (base e) logarithm of self." ilk="function" name="ln" signature="ln(self, context=None)" />
        <scope doc="Compares self to other using abstract repr., ignoring sign." ilk="function" name="compare_total_mag" signature="compare_total_mag(self, other)" />
        <scope doc="Return self * other." ilk="function" name="__mul__" signature="__mul__(self, other, context=None)" />
        <scope doc="Returns e ** self." ilk="function" name="exp" signature="exp(self, context=None)" />
        <scope doc="Rounds away from 0." ilk="function" name="_round_up" signature="_round_up(self, prec)" />
        <scope ilk="function" name="__le__" signature="__le__(self, other, context=None)" />
        <scope doc="Returns whether the number is infinite" ilk="function" name="_isinfinity" signature="_isinfinity(self)" />
        <scope doc="Returns a copy with the sign set to 0." ilk="function" name="copy_abs" signature="copy_abs(self)" />
        <scope doc="Swaps self/other and returns __pow__." ilk="function" name="__rpow__" signature="__rpow__(self, other, context=None)" />
      </scope>
      <scope classrefs="Rational" doc="This class implements rational numbers.&#xA;In the two-argument form of the constructor, Fraction(8, 6) will produce a rational number equivalent to 4/3. Both arguments must be Rational. The numerator defaults to 0 and the denominator defaults to 1 so that Fraction(3) == 3 and Fraction() == 0.  Fractions can also be constructed from:  - numeric strings similar to those accepted by the float constructor (for example, &apos;-2.3&apos; or &apos;1e10&apos;) " ilk="class" line="49" lineend="626" name="Fraction">
        <scope doc="Helper for comparison operators, for internal use only." ilk="function" line="571" lineend="591" name="_richcmp" returns="NotImplemented" signature="_richcmp(self, other, op)">
          <variable citdl="Fraction" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable ilk="argument" name="op" />
        </scope>
        <scope doc="Converts a finite float to a rational number, exactly." ilk="function" line="174" lineend="187" name="from_float" returns="Fraction.from_float.cls()" signature="from_float(f)">
          <variable ilk="argument" name="f" />
          <variable citdl="Fraction" ilk="argument" name="cls" />
        </scope>
        <scope doc="a * b" ilk="function" line="408" lineend="410" name="_mul" returns="Fraction" signature="_mul(a, b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="str(self)" ilk="function" line="278" lineend="283" name="__str__" returns="tuple" signature="str(self)">
          <variable citdl="Fraction" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="615" lineend="616" name="__reduce__" returns="tuple" signature="__reduce__(self)">
          <variable citdl="Fraction" ilk="argument" name="self" />
        </scope>
        <scope doc="a + b" ilk="function" line="398" name="__radd__" signature="__radd__(b, a)" />
        <scope doc="a + b" ilk="function" line="392" lineend="396" name="_add" returns="Fraction" signature="_add(a, b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="a / b" ilk="function" line="419" name="__truediv__" signature="__truediv__(a, b)" />
        <scope doc="a / b" ilk="function" line="419" name="__rtruediv__" signature="__rtruediv__(b, a)" />
        <scope doc="a - b" ilk="function" line="406" name="__rsub__" signature="__rsub__(b, a)" />
        <scope doc="a * b" ilk="function" line="412" name="__rmul__" signature="__rmul__(b, a)" />
        <scope doc="a % b" ilk="function" line="434" lineend="437" name="__rmod__" returns="Fraction" signature="__rmod__(b, a)">
          <variable ilk="argument" name="a" />
          <variable citdl="int" line="436" name="div" />
          <variable citdl="Fraction" ilk="argument" name="b" />
        </scope>
        <scope doc="Will be math.ceil(a) in 3.0." ilk="function" line="500" lineend="503" name="__ceil__" returns="int" signature="__ceil__(a)">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope doc="a &lt; b" ilk="function" line="593" lineend="595" name="__lt__" returns="Fraction._richcmp()" signature="__lt__(a, b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="a ** b" ilk="function" line="463" lineend="475" name="__rpow__" returns="Fraction" signature="__rpow__(b, a)">
          <variable ilk="argument" name="a" />
          <variable citdl="Fraction" ilk="argument" name="b" />
        </scope>
        <scope doc="Constructs a Rational." ilk="function" line="73" lineend="171" name="__new__" signature="__new__(cls, numerator=0, denominator=None)">
          <variable citdl="len()" line="139" name="scale" />
          <variable citdl="gcd()" line="168" name="g" />
          <variable citdl="_RATIONAL_FORMAT.match()" line="127" name="m" />
          <variable line="104" name="self" />
          <variable citdl="int" ilk="argument" name="denominator" />
          <variable citdl="int()" ilk="argument" name="numerator" />
          <variable citdl="Fraction.from_decimal()" line="114" name="value" />
          <variable citdl="m.group()" line="142" name="exp" />
          <variable citdl="m.group()" line="132" name="denom" />
          <variable citdl="m.group()" line="137" name="decimal" />
          <variable citdl="Fraction" ilk="argument" name="cls" />
        </scope>
        <scope doc="a * b" ilk="function" line="412" name="__mul__" signature="__mul__(a, b)" />
        <scope doc="abs(a)" ilk="function" line="485" lineend="487" name="__abs__" returns="Fraction" signature="abs(a)">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope doc="Converts a finite Decimal instance to a rational number,&#xA;exactly." ilk="function" line="190" lineend="209" name="from_decimal" returns="Fraction.from_decimal.cls()" signature="from_decimal(dec)">
          <variable citdl="int()" line="202" name="digits" />
          <variable citdl="Decimal()" ilk="argument" name="dec" />
          <variable line="202" name="sign" />
          <variable line="202" name="exp" />
          <variable citdl="Fraction" ilk="argument" name="cls" />
        </scope>
        <scope doc="+a: Coerces a subclass instance to Fraction" ilk="function" line="477" lineend="479" name="__pos__" returns="Fraction" signature="__pos__(a)">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope doc="a &lt;= b" ilk="function" line="601" lineend="603" name="__le__" returns="Fraction._richcmp()" signature="__le__(a, b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="a // b" ilk="function" line="425" lineend="427" name="__rfloordiv__" returns="math.floor()" signature="__rfloordiv__(b, a)">
          <variable ilk="argument" name="a" />
          <variable citdl="Fraction" ilk="argument" name="b" />
        </scope>
        <scope doc="-a" ilk="function" line="481" lineend="483" name="__neg__" returns="Fraction" signature="__neg__(a)">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope ilk="function" line="623" lineend="626" name="__deepcopy__" returns="Fraction" signature="__deepcopy__(self, memo)">
          <variable citdl="Fraction" ilk="argument" name="self" />
          <variable ilk="argument" name="memo" />
        </scope>
        <scope doc="Generates forward and reverse operators given a purely-&#xA;rational operator and a function from the operator module." ilk="function" line="285" lineend="390" name="_operator_fallbacks" returns="tuple" signature="_operator_fallbacks(monomorphic_operator, fallback_operator)">
          <variable ilk="argument" name="fallback_operator" />
          <scope ilk="function" line="365" lineend="373" name="forward" returns="NotImplemented" signature="forward(a, b)">
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="b" />
            <variable citdl="str" line="374" name="__name__" />
            <variable citdl="monomorphic_operator.__doc__" line="375" name="__doc__" />
          </scope>
          <variable citdl="Fraction" ilk="argument" name="monomorphic_operator" />
          <scope ilk="function" line="377" lineend="386" name="reverse" returns="NotImplemented" signature="reverse(b, a)">
            <variable ilk="argument" name="b" />
            <variable ilk="argument" name="a" />
            <variable citdl="str" line="387" name="__name__" />
            <variable citdl="monomorphic_operator.__doc__" line="388" name="__doc__" />
          </scope>
        </scope>
        <scope doc="a ** b" ilk="function" line="439" lineend="461" name="__pow__" returns="Fraction" signature="__pow__(a, b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
          <variable citdl="b.numerator" line="449" name="power" />
        </scope>
        <scope doc="a + b" ilk="function" line="398" name="__add__" signature="__add__(a, b)" />
        <scope doc="a &gt; b" ilk="function" line="597" lineend="599" name="__gt__" returns="Fraction._richcmp()" signature="__gt__(a, b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="a != 0" ilk="function" line="609" lineend="611" name="__bool__" returns="bool" signature="__bool__(a)">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope doc="a - b" ilk="function" line="400" lineend="404" name="_sub" returns="Fraction" signature="_sub(a, b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="a == b" ilk="function" line="552" lineend="569" name="__eq__" returns="NotImplemented" signature="__eq__(a, b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable citdl="b.real" ilk="argument" name="b" />
        </scope>
        <scope doc="Closest Fraction to self with denominator at most&#xA;max_denominator." ilk="function" line="211" lineend="264" name="limit_denominator" returns="Fraction" signature="limit_denominator(self, max_denominator=1000000)">
          <variable citdl="int" line="248" name="q1" />
          <variable citdl="int" line="248" name="q0" />
          <variable citdl="int" line="248" name="p0" />
          <variable citdl="int" line="248" name="p1" />
          <variable citdl="self._denominator" line="249" name="d" />
          <variable citdl="" line="260" name="bound2" />
          <variable citdl="Fraction" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="max_denominator" />
          <variable citdl="self._numerator" line="249" name="n" />
          <variable citdl="int" line="252" name="q2" />
          <variable citdl="int" line="251" name="a" />
          <variable citdl="" line="259" name="bound1" />
          <variable citdl="int" line="258" name="k" />
        </scope>
        <scope doc="Will be round(self, ndigits) in 3.0." ilk="function" line="505" lineend="528" name="__round__" returns="Fraction" signature="__round__(self, ndigits=None)">
          <variable citdl="abs()" line="521" name="shift" />
          <variable citdl="Fraction" ilk="argument" name="self" />
          <variable ilk="argument" name="ndigits" />
          <variable line="511" name="remainder" />
          <variable line="511" name="floor" />
        </scope>
        <scope doc="trunc(a)" ilk="function" line="489" lineend="494" name="__trunc__" returns="int" signature="trunc(a)">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope doc="a % b" ilk="function" line="429" lineend="432" name="__mod__" returns="Fraction" signature="__mod__(a, b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable citdl="int" line="431" name="div" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="Will be math.floor(a) in 3.0." ilk="function" line="496" lineend="498" name="__floor__" returns="int" signature="__floor__(a)">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope doc="a / b" ilk="function" line="414" lineend="417" name="_div" returns="Fraction" signature="_div(a, b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="repr(self)" ilk="function" line="274" lineend="276" name="__repr__" returns="tuple" signature="repr(self)">
          <variable citdl="Fraction" ilk="argument" name="self" />
        </scope>
        <scope doc="a // b" ilk="function" line="421" lineend="423" name="__floordiv__" returns="math.floor()" signature="__floordiv__(a, b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="hash(self)" ilk="function" line="530" lineend="550" name="__hash__" signature="hash(self)">
          <variable citdl="pow()" line="544" name="dinv" />
          <variable citdl="Fraction" ilk="argument" name="self" />
          <variable citdl="pow()" line="546" name="hash_" />
          <variable line="549" name="result" />
        </scope>
        <scope doc="a - b" ilk="function" line="406" name="__sub__" signature="__sub__(a, b)" />
        <scope ilk="function" line="618" lineend="621" name="__copy__" returns="Fraction" signature="__copy__(self)">
          <variable citdl="Fraction" ilk="argument" name="self" />
        </scope>
        <scope doc="a &gt;= b" ilk="function" line="605" lineend="607" name="__ge__" returns="Fraction._richcmp()" signature="__ge__(a, b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <variable attributes="property" citdl="a._numerator" line="267" name="numerator" />
        <variable citdl="tuple" line="70" name="__slots__" />
        <scope attributes="__hidden__" ilk="function" line="267" lineend="268" name="numerator (property getter)" returns="a._numerator" signature="numerator (property getter)()">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="271" lineend="272" name="denominator (property getter)" returns="a._denominator" signature="denominator (property getter)()">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <variable attributes="property" citdl="a._denominator" line="271" name="denominator" />
      </scope>
      <variable citdl="list" line="13" name="__all__" />
      <scope doc="Calculate the Greatest Common Divisor of a and b." ilk="function" line="17" lineend="25" name="gcd" signature="gcd(a, b)">
        <variable ilk="argument" name="a" />
        <variable ilk="argument" name="b" />
      </scope>
      <import module="math" />
      <import module="numbers" />
      <import module="operator" />
      <import module="re" />
      <import module="sys" />
      <variable attributes="protected __hidden__" citdl="sys.hash_info.modulus" line="29" name="_PyHASH_MODULUS" />
      <variable attributes="protected __hidden__" citdl="re.compile()" line="34" name="_RATIONAL_FORMAT" />
      <variable attributes="protected __hidden__" citdl="sys.hash_info.inf" line="32" name="_PyHASH_INF" />
    </scope>
    