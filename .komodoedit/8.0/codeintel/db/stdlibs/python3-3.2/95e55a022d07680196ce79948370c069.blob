<scope doc="This module provides access to the Windows registry API.&#xA;Functions:  CloseKey() - Closes a registry key. ConnectRegistry() - Establishes a connection to a predefined registry handle on another computer. CreateKey() - Creates the specified key, or opens it if it already exists. DeleteKey() - Deletes the specified key. DeleteValue() - Removes a named value from the specified registry key. EnumKey() - Enumerates subkeys of the specified open registry key. EnumValue() - Enumerates values of the specified open registry key." ilk="blob" lang="Python" name="winreg">
      <scope doc="Closes a previously opened registry key." ilk="function" name="CloseKey" signature="CloseKey(hkey)" />
      <scope doc="Establishes a connection to a predefined registry handle on&#xA;another computer." ilk="function" name="ConnectRegistry" signature="ConnectRegistry(computer_name, key) -&gt; key" />
      <scope doc="Creates or opens the specified key." ilk="function" name="CreateKey" signature="CreateKey(key, sub_key) -&gt; key" />
      <scope doc="Creates or opens the specified key." ilk="function" name="CreateKeyEx" signature="CreateKeyEx(key, sub_key, res, sam) -&gt; key" />
      <scope doc="Deletes the specified key." ilk="function" name="DeleteKey" signature="DeleteKey(key, sub_key)" />
      <scope doc="Deletes the specified key." ilk="function" name="DeleteKeyEx" signature="DeleteKeyEx(key, sub_key, sam, res)" />
      <scope doc="Removes a named value from a registry key." ilk="function" name="DeleteValue" signature="DeleteValue(key, value)" />
      <scope doc="Disables registry reflection for 32-bit processes running on&#xA;a 64-bit Operating System." ilk="function" name="DisableReflectionKey" />
      <scope doc="Restores registry reflection for the specified disabled key." ilk="function" name="EnableReflectionKey" />
      <scope doc="Enumerates subkeys of an open registry key." ilk="function" name="EnumKey" returns="str" signature="EnumKey(key, index) -&gt; string" />
      <scope doc="Enumerates values of an open registry key." ilk="function" name="EnumValue" returns="tuple" signature="EnumValue(key, index) -&gt; tuple" />
      <scope doc="Expand environment vars." ilk="function" name="ExpandEnvironmentStrings" returns="str" signature="ExpandEnvironmentStrings(string) -&gt; string" />
      <scope doc="Writes all the attributes of a key to the registry." ilk="function" name="FlushKey" signature="FlushKey(key)" />
      <scope classrefs="object" doc="PyHKEY Object - A Python object, representing a win32 registry key.&#xA;This object wraps a Windows HKEY object, automatically closing it when the object is destroyed.  To guarantee cleanup, you can call either the Close() method on the PyHKEY, or the CloseKey() method.  All functions which accept a handle object also accept an integer - however, use of the handle object is encouraged.  Functions: Close() - Closes the underlying handle. Detach() - Returns the integer Win32 handle, detaching it from the object" ilk="class" name="HKEYType">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__ror__(y) &lt;==&gt; y|x" ilk="function" name="__ror__" signature="x.__ror__(y) &lt;==&gt; y|x" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="x.__and__(y) &lt;==&gt; x&amp;y" ilk="function" name="__and__" signature="x.__and__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" ilk="function" name="__rrshift__" signature="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope doc="x.__rand__(y) &lt;==&gt; y&amp;x" ilk="function" name="__rand__" signature="x.__rand__(y) &lt;==&gt; y&amp;x" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__or__(y) &lt;==&gt; x|y" ilk="function" name="__or__" signature="x.__or__(y) &lt;==&gt; x|y" />
        <scope ilk="function" name="__enter__" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="Detaches the Windows handle from the handle object." ilk="function" name="Detach" returns="int" signature="key.Detach() -&gt; int" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" ilk="function" name="__rshift__" signature="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope ilk="function" name="__exit__" />
        <scope doc="x.__invert__() &lt;==&gt; ~x" ilk="function" name="__invert__" signature="x.__invert__() &lt;==&gt; ~x" />
        <scope doc="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" ilk="function" name="__rlshift__" signature="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" />
        <scope doc="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" ilk="function" name="__lshift__" signature="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" />
        <scope doc="Closes the underlying Windows handle." ilk="function" name="Close" signature="key.Close()" />
        <scope doc="x.__bool__() &lt;==&gt; x != 0" ilk="function" name="__bool__" signature="x.__bool__() &lt;==&gt; x != 0" />
        <scope doc="x.__rxor__(y) &lt;==&gt; y^x" ilk="function" name="__rxor__" signature="x.__rxor__(y) &lt;==&gt; y^x" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="x.__xor__(y) &lt;==&gt; x^y" ilk="function" name="__xor__" signature="x.__xor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <variable citdl="int" name="HKEY_CLASSES_ROOT" />
      <variable citdl="int" name="HKEY_CURRENT_CONFIG" />
      <variable citdl="int" name="HKEY_CURRENT_USER" />
      <variable citdl="int" name="HKEY_DYN_DATA" />
      <variable citdl="int" name="HKEY_LOCAL_MACHINE" />
      <variable citdl="int" name="HKEY_PERFORMANCE_DATA" />
      <variable citdl="int" name="HKEY_USERS" />
      <variable citdl="int" name="KEY_ALL_ACCESS" />
      <variable citdl="int" name="KEY_CREATE_LINK" />
      <variable citdl="int" name="KEY_CREATE_SUB_KEY" />
      <variable citdl="int" name="KEY_ENUMERATE_SUB_KEYS" />
      <variable citdl="int" name="KEY_EXECUTE" />
      <variable citdl="int" name="KEY_NOTIFY" />
      <variable citdl="int" name="KEY_QUERY_VALUE" />
      <variable citdl="int" name="KEY_READ" />
      <variable citdl="int" name="KEY_SET_VALUE" />
      <variable citdl="int" name="KEY_WOW64_32KEY" />
      <variable citdl="int" name="KEY_WOW64_64KEY" />
      <variable citdl="int" name="KEY_WRITE" />
      <scope doc="Creates a subkey under the specified key" ilk="function" name="LoadKey" signature="LoadKey(key, sub_key, file_name)" />
      <scope doc="Opens the specified key." ilk="function" name="OpenKey" signature="OpenKey(key, sub_key, res = 0, sam = KEY_READ) -&gt; key" />
      <scope doc="See OpenKey()" ilk="function" name="OpenKeyEx" />
      <scope doc="Returns information about a key." ilk="function" name="QueryInfoKey" returns="tuple" signature="QueryInfoKey(key) -&gt; tuple" />
      <scope doc="Determines the reflection state for the specified key." ilk="function" name="QueryReflectionKey" returns="bool" signature="QueryReflectionKey(hkey) -&gt; bool" />
      <scope doc="retrieves the unnamed value for a key." ilk="function" name="QueryValue" returns="str" signature="QueryValue(key, sub_key) -&gt; string" />
      <scope doc="Retrieves the type and data for a specified value name&#xA;associated with an open registry key." ilk="function" name="QueryValueEx" signature="QueryValueEx(key, value_name) -&gt; value,type_id" />
      <variable citdl="int" name="REG_BINARY" />
      <variable citdl="int" name="REG_CREATED_NEW_KEY" />
      <variable citdl="int" name="REG_DWORD" />
      <variable citdl="int" name="REG_DWORD_BIG_ENDIAN" />
      <variable citdl="int" name="REG_DWORD_LITTLE_ENDIAN" />
      <variable citdl="int" name="REG_EXPAND_SZ" />
      <variable citdl="int" name="REG_FULL_RESOURCE_DESCRIPTOR" />
      <variable citdl="int" name="REG_LEGAL_CHANGE_FILTER" />
      <variable citdl="int" name="REG_LEGAL_OPTION" />
      <variable citdl="int" name="REG_LINK" />
      <variable citdl="int" name="REG_MULTI_SZ" />
      <variable citdl="int" name="REG_NONE" />
      <variable citdl="int" name="REG_NOTIFY_CHANGE_ATTRIBUTES" />
      <variable citdl="int" name="REG_NOTIFY_CHANGE_LAST_SET" />
      <variable citdl="int" name="REG_NOTIFY_CHANGE_NAME" />
      <variable citdl="int" name="REG_NOTIFY_CHANGE_SECURITY" />
      <variable citdl="int" name="REG_NO_LAZY_FLUSH" />
      <variable citdl="int" name="REG_OPENED_EXISTING_KEY" />
      <variable citdl="int" name="REG_OPTION_BACKUP_RESTORE" />
      <variable citdl="int" name="REG_OPTION_CREATE_LINK" />
      <variable citdl="int" name="REG_OPTION_NON_VOLATILE" />
      <variable citdl="int" name="REG_OPTION_OPEN_LINK" />
      <variable citdl="int" name="REG_OPTION_RESERVED" />
      <variable citdl="int" name="REG_OPTION_VOLATILE" />
      <variable citdl="int" name="REG_REFRESH_HIVE" />
      <variable citdl="int" name="REG_RESOURCE_LIST" />
      <variable citdl="int" name="REG_RESOURCE_REQUIREMENTS_LIST" />
      <variable citdl="int" name="REG_SZ" />
      <variable citdl="int" name="REG_WHOLE_HIVE_VOLATILE" />
      <scope doc="Saves the specified key, and all its subkeys to the&#xA;specified file." ilk="function" name="SaveKey" signature="SaveKey(key, file_name)" />
      <scope doc="Associates a value with a specified key." ilk="function" name="SetValue" signature="SetValue(key, sub_key, type, value)" />
      <scope doc="Stores data in the value field of an open registry key." ilk="function" name="SetValueEx" signature="SetValueEx(key, value_name, reserved, type, value)" />
      <scope classrefs="OSError" doc="MS-Windows OS system call failed.&#xA;" ilk="class" name="error">
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope ilk="function" name="__init__" />
      </scope>
    </scope>
    