<scope doc="distutils.command.bdist_rpm&#xA;Implements the Distutils &apos;bdist_rpm&apos; command (create RPM source and binary distributions)." ilk="blob" lang="Python" name="distutils.command.bdist_rpm">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#xA;" ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#xA;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in &apos;initialize_options()&apos; and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in &apos;finalize_options()&apos;, both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence &apos;finalize_options()&apos;.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope doc="Set default values for all the options that this command&#xA;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent=&apos;&apos;)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#xA;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#xA;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#xA;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="If the current verbosity level is of greater than or equal&#xA;to &apos;level&apos; print &apos;msg&apos; to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope doc="Run some other command: uses the &apos;run_command()&apos; method of&#xA;Distribution, which creates and finalizes the command object&#xA;if necessary and then invokes its &apos;run()&apos; method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#xA;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="A command&apos;s raison d&apos;etre: carry out the action it exists to&#xA;perform, controlled by the options initialized in&#xA;&apos;initialize_options()&apos;, customized by other commands, the&#xA;setup script, the command-line, and config files, and&#xA;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="# XXX rename to &apos;get_reinitialized_command()&apos;? (should do&#xA;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope doc="Ensure that &apos;option&apos; is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope doc="Wrapper around Distribution&apos;s &apos;get_command_obj()&apos; method:&#xA;find (create if necessary and &apos;create&apos; is true) the command&#xA;object for &apos;command&apos;, call its &apos;ensure_finalized()&apos; method,&#xA;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Ensure that &apos;option&apos; is a string; if not defined, set it to&#xA;&apos;default&apos;." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope doc="Special case of &apos;execute()&apos; for operations that process one&#xA;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Set final values for all the options that this command&#xA;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope doc="Ensure that &apos;option&apos; is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Print &apos;msg&apos; to stdout if the global DEBUG (taken from the&#xA;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#xA;" ilk="class" name="CompileError" />
      <variable citdl="NoneType" name="DEBUG" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#xA;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#xA;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#xA;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#xA;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#xA;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#xA;Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus.&#xA;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#xA;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#xA;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#xA;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we&apos;ll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but&#xA;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#xA;such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#xA;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#xA;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#xA;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#xA;" ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#xA;" ilk="class" name="UnknownFileError" />
      <scope classrefs="Command" doc="&#xA;" ilk="class" line="15" lineend="554" name="bdist_rpm">
        <scope ilk="function" line="257" lineend="377" name="run" signature="run(self)">
          <variable citdl="out.close()" line="358" name="status" />
          <variable citdl="list" line="345" name="binary_rpms" />
          <variable citdl="str" line="340" name="q_cmd" />
          <variable citdl="self.reinitialize_command()" line="291" name="sdist" />
          <variable line="346" name="source_rpm" />
          <variable citdl="dict" line="270" name="rpm_dir" />
          <variable citdl="out.readline()" line="348" name="line" />
          <variable citdl="str" line="338" name="src_rpm" />
          <variable citdl="os.path.join()" line="375" name="rpm" />
          <variable line="300" name="source_dir" />
          <variable citdl="os.popen()" line="343" name="out" />
          <variable citdl="str" line="339" name="non_src_rpm" />
          <variable citdl="list" line="312" name="rpm_cmd" />
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
          <variable citdl="str" line="337" name="nvr_string" />
          <variable line="351" name="l" />
          <variable citdl="os.path.join()" line="278" name="spec_path" />
          <variable line="299" name="source" />
          <variable line="267" name="spec_dir" />
          <variable citdl="os.path.join()" line="369" name="srpm" />
          <variable citdl="list" line="290" name="saved_dist_files" />
        </scope>
        <scope ilk="function" line="136" lineend="179" name="initialize_options" signature="initialize_options(self)">
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
        </scope>
        <scope doc="Generate the text of an RPM spec file and return it as a&#xA;list of strings (one per line)." ilk="function" line="382" lineend="533" name="_make_spec_file" returns="list" signature="_make_spec_file(self)">
          <variable citdl="list" line="491" name="script_options" />
          <variable citdl="str" line="478" name="def_build" />
          <variable citdl="getattr()" line="436" name="val" />
          <variable citdl="list" line="387" name="spec_file" />
          <variable citdl="str" line="477" name="def_setup_call" />
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
          <variable citdl="str" line="488" name="install_cmd" />
        </scope>
        <scope ilk="function" line="181" lineend="210" name="finalize_options" signature="finalize_options(self)">
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
        </scope>
        <scope doc="Format the changelog correctly and convert it to a list of&#xA;strings" ilk="function" line="535" lineend="554" name="_format_changelog" returns="list" signature="_format_changelog(self, changelog)">
          <variable citdl="list" line="540" name="new_changelog" />
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
          <variable citdl="line.strip()" line="542" name="line" />
          <variable ilk="argument" name="changelog" />
        </scope>
        <scope ilk="function" line="379" lineend="380" name="_dist_path" returns="os.path.join()" signature="_dist_path(self, path)">
          <variable ilk="argument" name="path" />
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="212" lineend="255" name="finalize_package_data" signature="finalize_package_data(self)">
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="162" name="pre_install" />
        <variable attributes="__instancevar__" line="143" name="binary_only" />
        <variable attributes="__instancevar__" line="153" name="doc_files" />
        <variable attributes="__instancevar__" line="178" name="force_arch" />
        <variable attributes="__instancevar__" line="141" name="fix_python" />
        <variable attributes="__instancevar__" citdl="int" line="173" name="keep_temp" />
        <variable attributes="__instancevar__" line="150" name="serial" />
        <variable citdl="dict" line="131" name="negative_opt" />
        <variable citdl="list" line="19" name="user_options" />
        <variable attributes="__instancevar__" line="148" name="group" />
        <variable attributes="__instancevar__" line="151" name="vendor" />
        <variable attributes="__instancevar__" line="164" name="pre_uninstall" />
        <variable attributes="__instancevar__" citdl="int" line="176" name="no_autoreq" />
        <variable attributes="__instancevar__" line="171" name="obsoletes" />
        <variable attributes="__instancevar__" line="167" name="provides" />
        <variable attributes="__instancevar__" line="158" name="build_script" />
        <variable attributes="__instancevar__" line="160" name="clean_script" />
        <variable attributes="__instancevar__" line="137" name="bdist_base" />
        <variable attributes="__instancevar__" line="166" name="prep" />
        <variable citdl="str" line="17" name="description" />
        <variable attributes="__instancevar__" citdl="str" line="140" name="python" />
        <variable attributes="__instancevar__" line="161" name="verify_script" />
        <variable attributes="__instancevar__" line="145" name="use_bzip2" />
        <variable attributes="__instancevar__" line="147" name="distribution_name" />
        <variable attributes="__instancevar__" citdl="os.path.join()" line="138" name="rpm_base" />
        <variable citdl="list" line="128" name="boolean_options" />
        <variable attributes="__instancevar__" line="169" name="conflicts" />
        <variable attributes="__instancevar__" line="152" name="packager" />
        <variable attributes="__instancevar__" line="159" name="install_script" />
        <variable attributes="__instancevar__" line="170" name="build_requires" />
        <variable attributes="__instancevar__" line="155" name="icon" />
        <variable attributes="__instancevar__" citdl="int" line="175" name="rpm3_mode" />
        <variable attributes="__instancevar__" line="157" name="prep_script" />
        <variable attributes="__instancevar__" citdl="self._format_changelog()" line="154" name="changelog" />
        <variable attributes="__instancevar__" line="168" name="requires" />
        <variable attributes="__instancevar__" line="142" name="spec_only" />
        <variable attributes="__instancevar__" citdl="int" line="179" name="quiet" />
        <variable attributes="__instancevar__" line="144" name="source_only" />
        <variable attributes="__instancevar__" citdl="int" line="174" name="use_rpm_opt_flags" />
        <variable attributes="__instancevar__" line="149" name="release" />
        <variable attributes="__instancevar__" line="139" name="dist_dir" />
        <variable attributes="__instancevar__" line="163" name="post_install" />
        <variable attributes="__instancevar__" line="165" name="post_uninstall" />
      </scope>
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope doc="Return a string containing the major and minor Python&#xA;version, leaving off the patchlevel." ilk="function" name="get_python_version" signature="get_python_version()" />
      <import module="log" />
      <import module="os" />
      <import module="sys" />
      <scope doc="Create a file with the specified name and write &apos;contents&apos;&#xA;(a sequence of strings without line terminators) to it." ilk="function" name="write_file" signature="write_file(filename, contents)" />
      <variable citdl="str" line="6" name="__revision__" />
    </scope>
    