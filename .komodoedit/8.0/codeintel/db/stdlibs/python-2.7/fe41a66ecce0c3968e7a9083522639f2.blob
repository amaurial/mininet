<scope doc="# Module providing the `Process` class which emulates `threading.Thread`&#xA;# # multiprocessing/process.py # # Copyright (c) 2006-2008, R Oudkerk # All rights reserved. # # Redistribution and use in source and binary forms, with or without # modification, are permitted provided that the following conditions # are met: #" ilk="blob" lang="Python" name="multiprocessing.process">
      <scope classrefs="str" doc="&#xA;" ilk="class" line="285" lineend="293" name="AuthenticationString">
        <scope ilk="function" line="286" lineend="293" name="__reduce__" returns="tuple" signature="__reduce__()">
          <variable citdl="AuthenticationString" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="str" line="51" name="ORIGINAL_DIR" />
      <scope classrefs="object" doc="Process objects represent activity that is run in a separate process&#xA;The class is analagous to `threading.Thread`" ilk="class" line="86" lineend="279" name="Process">
        <scope doc="Method to be run in sub-process; can be overridden in sub-&#xA;class" ilk="function" line="109" lineend="114" name="run" signature="run()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <scope doc="Terminate process; sends SIGTERM signal or uses&#xA;TerminateProcess()" ilk="function" line="133" lineend="137" name="terminate" signature="terminate()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="94" lineend="107" name="__init__" signature="Process(group=None, target=None, name=None, args=(), kwargs={})">
          <variable citdl="_current_process._counter.next()" line="96" name="count" />
          <variable ilk="argument" name="group" />
          <variable ilk="argument" name="target" />
          <variable citdl="Process" ilk="argument" name="self" />
          <variable citdl="tuple" ilk="argument" name="args" />
          <variable citdl="dict" ilk="argument" name="kwargs" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Wait until child process terminates" ilk="function" line="139" lineend="147" name="join" signature="join(timeout=None)">
          <variable citdl="self._popen.wait()" line="145" name="res" />
          <variable citdl="Process" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
        </scope>
        <scope doc="Start child process" ilk="function" line="116" lineend="131" name="start" signature="start()">
          <variable citdl="Process" ilk="argument" name="self" />
          <variable line="127" name="Popen" />
        </scope>
        <scope ilk="function" line="241" lineend="279" name="_bootstrap" returns="int" signature="_bootstrap()">
          <variable citdl="Process" ilk="argument" name="self" />
          <variable attributes="protected" citdl="Process" line="253" name="_current_process" />
          <variable citdl="int" line="259" name="exitcode" />
        </scope>
        <scope ilk="function" line="217" lineend="237" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="str" line="219" name="status" />
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <scope doc="Return whether process is alive" ilk="function" line="149" lineend="159" name="is_alive" returns="bool" signature="is_alive()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" doc="Return identifier (PID) of process or `None` if it has yet&#xA;to start" ilk="function" line="206" lineend="213" name="ident (property getter)" returns="os.getpid()" signature="ident (property getter)()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="set()" line="246" name="_children" />
        <variable citdl="start.Popen()" line="215" name="pid" />
        <scope attributes="__hidden__" doc="Return whether process is a daemon" ilk="function" line="171" lineend="175" name="daemon (property getter)" returns="_current_process._daemonic" signature="daemon (property getter)()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="103" name="_target" />
        <variable attributes="protected __instancevar__" citdl="tuple()" line="104" name="_args" />
        <variable attributes="protected __instancevar__" citdl="_current_process._authkey" line="98" name="_authkey" />
        <variable attributes="protected __instancevar__" citdl="tuple" line="97" name="_identity" />
        <scope attributes="__hidden__" ilk="function" line="166" lineend="168" name="name (property setter)" signature="name (property setter)(name)">
          <variable citdl="Process" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="protected" line="92" name="_Popen" />
        <scope attributes="__hidden__" doc="Return exit code of process or `None` if it has yet to stop" ilk="function" line="197" lineend="203" name="exitcode (property getter)" returns="self._popen.poll()" signature="exitcode (property getter)()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_current_process._daemonic" line="99" name="_daemonic" />
        <variable attributes="property" citdl="_current_process._authkey" line="186" name="authkey" />
        <scope attributes="__hidden__" doc="Set whether process is a daemon" ilk="function" line="178" lineend="183" name="daemon (property setter)" signature="daemon (property setter)(daemonic)">
          <variable citdl="Process" ilk="argument" name="self" />
          <variable ilk="argument" name="daemonic" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_current_process._tempdir" line="100" name="_tempdir" />
        <variable attributes="protected __instancevar__" citdl="start.Popen()" line="102" name="_popen" />
        <variable attributes="protected __instancevar__" citdl="itertools.count()" line="247" name="_counter" />
        <variable attributes="property" citdl="_current_process._daemonic" line="171" name="daemon" />
        <variable attributes="property" citdl="start.Popen()" line="206" name="ident" />
        <variable attributes="property" citdl="str.join()" line="162" name="name" />
        <scope attributes="__hidden__" ilk="function" line="186" lineend="187" name="authkey (property getter)" returns="_current_process._authkey" signature="authkey (property getter)()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="106" name="_name" />
        <scope attributes="__hidden__" ilk="function" line="162" lineend="163" name="name (property getter)" returns="str" signature="name (property getter)()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" doc="Set authorization key of process" ilk="function" line="190" lineend="194" name="authkey (property setter)" signature="authkey (property setter)(authkey)">
          <variable citdl="Process" ilk="argument" name="self" />
          <variable ilk="argument" name="authkey" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="os.getpid()" line="101" name="_parent_pid" />
        <variable attributes="protected __instancevar__" citdl="dict()" line="105" name="_kwargs" />
        <variable attributes="property" citdl="start.Popen()" line="197" name="exitcode" />
      </scope>
      <variable citdl="list" line="35" name="__all__" />
      <scope doc="Return list of process objects corresponding to live child&#xA;processes" ilk="function" line="65" lineend="70" name="active_children" returns="list()" signature="active_children()" />
      <scope doc="Return process object representing the current process" ilk="function" line="59" lineend="63" name="current_process" returns="_current_process" signature="current_process()" />
      <import module="itertools" />
      <variable citdl="str" name="name" />
      <import module="os" />
      <import module="signal" />
      <scope doc="The default handler for SIGINT installed by Python." ilk="function" name="signum" signature="default_int_handler(...)" />
      <import module="sys" />
      <scope attributes="protected __hidden__" ilk="function" line="76" lineend="80" name="_cleanup" signature="_cleanup()" />
      <scope attributes="protected __hidden__" classrefs="Process" ilk="class" line="299" lineend="310" name="_MainProcess">
        <scope attributes="__ctor__" ilk="function" line="301" lineend="310" name="__init__" signature="_MainProcess()">
          <variable citdl="_MainProcess" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="tuple" line="302" name="_identity" />
        <variable attributes="protected __instancevar__" citdl="False" line="303" name="_daemonic" />
        <variable attributes="protected __instancevar__" citdl="str" line="304" name="_name" />
        <variable attributes="protected __instancevar__" line="305" name="_parent_pid" />
        <variable attributes="protected __instancevar__" line="306" name="_popen" />
        <variable attributes="protected __instancevar__" citdl="itertools.count()" line="307" name="_counter" />
        <variable attributes="protected __instancevar__" citdl="set()" line="308" name="_children" />
        <variable attributes="protected __instancevar__" citdl="AuthenticationString" line="309" name="_authkey" />
        <variable attributes="protected __instancevar__" line="310" name="_tempdir" />
      </scope>
      <variable attributes="protected __hidden__" citdl="_MainProcess" line="312" name="_current_process" />
      <variable attributes="protected __hidden__" citdl="dict" line="319" name="_exitcode_to_name" />
    </scope>
    