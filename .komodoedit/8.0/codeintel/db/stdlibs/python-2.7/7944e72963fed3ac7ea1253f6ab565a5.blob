<scope doc="ast&#xA;~~~  The `ast` module helps Python applications to process trees of the Python abstract syntax grammar.  The abstract syntax itself might change with each Python release; this module helps to find out programmatically what the current grammar looks like and allows modifications of it.  An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as a flag to the `compile()` builtin function or by using the `parse()` function from this module.  The result will be a tree of objects whose" ilk="blob" lang="Python" name="ast">
      <scope classrefs="object" doc="&#xA;" ilk="class" name="AST">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope ilk="function" name="__reduce__" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope ilk="function" name="__init__" />
      </scope>
      <scope classrefs="operator" doc="&#xA;" ilk="class" name="Add" />
      <scope classrefs="boolop" doc="&#xA;" ilk="class" name="And" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="Assert" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="Assign" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="Attribute" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="AugAssign" />
      <scope classrefs="expr_context" doc="&#xA;" ilk="class" name="AugLoad" />
      <scope classrefs="expr_context" doc="&#xA;" ilk="class" name="AugStore" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="BinOp" />
      <scope classrefs="operator" doc="&#xA;" ilk="class" name="BitAnd" />
      <scope classrefs="operator" doc="&#xA;" ilk="class" name="BitOr" />
      <scope classrefs="operator" doc="&#xA;" ilk="class" name="BitXor" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="BoolOp" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="Break" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="Call" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="ClassDef" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="Compare" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="Continue" />
      <scope classrefs="expr_context" doc="&#xA;" ilk="class" name="Del" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="Delete" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="Dict" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="DictComp" />
      <scope classrefs="operator" doc="&#xA;" ilk="class" name="Div" />
      <scope classrefs="slice" doc="&#xA;" ilk="class" name="Ellipsis" />
      <scope classrefs="cmpop" doc="&#xA;" ilk="class" name="Eq" />
      <scope classrefs="excepthandler" doc="&#xA;" ilk="class" name="ExceptHandler" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="Exec" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="Expr" />
      <scope classrefs="mod" doc="&#xA;" ilk="class" name="Expression" />
      <scope classrefs="slice" doc="&#xA;" ilk="class" name="ExtSlice" />
      <scope classrefs="operator" doc="&#xA;" ilk="class" name="FloorDiv" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="For" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="FunctionDef" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="GeneratorExp" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="Global" />
      <scope classrefs="cmpop" doc="&#xA;" ilk="class" name="Gt" />
      <scope classrefs="cmpop" doc="&#xA;" ilk="class" name="GtE" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="If" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="IfExp" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="Import" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="ImportFrom" />
      <scope classrefs="cmpop" doc="&#xA;" ilk="class" name="In" />
      <scope classrefs="slice" doc="&#xA;" ilk="class" name="Index" />
      <scope classrefs="mod" doc="&#xA;" ilk="class" name="Interactive" />
      <scope classrefs="unaryop" doc="&#xA;" ilk="class" name="Invert" />
      <scope classrefs="cmpop" doc="&#xA;" ilk="class" name="Is" />
      <scope classrefs="cmpop" doc="&#xA;" ilk="class" name="IsNot" />
      <scope classrefs="operator" doc="&#xA;" ilk="class" name="LShift" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="Lambda" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="List" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="ListComp" />
      <scope classrefs="expr_context" doc="&#xA;" ilk="class" name="Load" />
      <scope classrefs="cmpop" doc="&#xA;" ilk="class" name="Lt" />
      <scope classrefs="cmpop" doc="&#xA;" ilk="class" name="LtE" />
      <scope classrefs="operator" doc="&#xA;" ilk="class" name="Mod" />
      <scope classrefs="mod" doc="&#xA;" ilk="class" name="Module" />
      <scope classrefs="operator" doc="&#xA;" ilk="class" name="Mult" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="Name" />
      <scope classrefs="NodeVisitor" doc="A :class:`NodeVisitor` subclass that walks the abstract syntax tree and&#xA;allows modification of nodes.  The `NodeTransformer` will walk the AST and use the return value of the visitor methods to replace or remove the old node.  If the return value of the visitor method is ``None``, the node will be removed from its location, otherwise it is replaced with the return value.  The return value may be the original node in which case no replacement takes place.  Here is an example transformer that rewrites all occurrences of name lookups (``foo``) to ``data[&apos;foo&apos;]``::" ilk="class" line="254" lineend="311" name="NodeTransformer">
        <scope ilk="function" line="290" lineend="311" name="generic_visit" signature="generic_visit(node)">
          <variable ilk="argument" name="node" />
          <variable citdl="list" line="294" name="new_values" />
          <variable citdl="NodeTransformer" ilk="argument" name="self" />
          <variable citdl="getattr()" line="292" name="old_value" />
          <variable citdl="self.visit()" line="297" name="value" />
          <variable citdl="self.visit()" line="306" name="new_node" />
        </scope>
      </scope>
      <scope classrefs="object" doc="A node visitor base class that walks the abstract syntax tree and calls a&#xA;visitor function for every node found.  This function may return a value which is forwarded by the `visit` method.  This class is meant to be subclassed, with the subclass adding visitor methods.  Per default the visitor functions for the nodes are ``&apos;visit_&apos;`` + class name of the node.  So a `TryFinally` node visit function would be `visit_TryFinally`.  This behavior can be changed by overriding the `visit` method.  If no visitor function exists for a node" ilk="class" line="217" lineend="251" name="NodeVisitor">
        <scope doc="Called if no explicit visitor function exists for a node." ilk="function" line="243" lineend="251" name="generic_visit" signature="generic_visit(node)">
          <variable ilk="argument" name="node" />
          <variable citdl="NodeVisitor" ilk="argument" name="self" />
        </scope>
        <scope doc="Visit a node." ilk="function" line="237" lineend="241" name="visit" returns="NodeVisitor.visit.visitor()" signature="visit(node)">
          <variable ilk="argument" name="node" />
          <variable citdl="getattr()" line="240" name="visitor" />
          <variable citdl="NodeVisitor" ilk="argument" name="self" />
          <variable citdl="node.__class__.__name__" line="239" name="method" />
        </scope>
      </scope>
      <scope classrefs="unaryop" doc="&#xA;" ilk="class" name="Not" />
      <scope classrefs="cmpop" doc="&#xA;" ilk="class" name="NotEq" />
      <scope classrefs="cmpop" doc="&#xA;" ilk="class" name="NotIn" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="Num" />
      <scope classrefs="boolop" doc="&#xA;" ilk="class" name="Or" />
      <scope classrefs="expr_context" doc="&#xA;" ilk="class" name="Param" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="Pass" />
      <scope classrefs="operator" doc="&#xA;" ilk="class" name="Pow" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="Print" />
      <variable citdl="int" name="PyCF_ONLY_AST" />
      <scope classrefs="operator" doc="&#xA;" ilk="class" name="RShift" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="Raise" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="Repr" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="Return" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="Set" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="SetComp" />
      <scope classrefs="slice" doc="&#xA;" ilk="class" name="Slice" />
      <scope classrefs="expr_context" doc="&#xA;" ilk="class" name="Store" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="Str" />
      <scope classrefs="operator" doc="&#xA;" ilk="class" name="Sub" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="Subscript" />
      <scope classrefs="mod" doc="&#xA;" ilk="class" name="Suite" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="TryExcept" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="TryFinally" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="Tuple" />
      <scope classrefs="unaryop" doc="&#xA;" ilk="class" name="UAdd" />
      <scope classrefs="unaryop" doc="&#xA;" ilk="class" name="USub" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="UnaryOp" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="While" />
      <scope classrefs="stmt" doc="&#xA;" ilk="class" name="With" />
      <scope classrefs="expr" doc="&#xA;" ilk="class" name="Yield" />
      <variable citdl="str" name="__version__" />
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="alias" />
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="arguments" />
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="boolop" />
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="cmpop" />
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="comprehension" />
      <scope doc="Copy source location (`lineno` and `col_offset` attributes)&#xA;from *old_node* to *new_node* if possible, and return&#xA;*new_node*." ilk="function" line="113" lineend="122" name="copy_location" signature="copy_location(new_node, old_node)">
        <variable ilk="argument" name="new_node" />
        <variable ilk="argument" name="old_node" />
      </scope>
      <scope doc="Return a formatted dump of the tree in *node*." ilk="function" line="83" lineend="110" name="dump" returns="dump._format()" signature="dump(node, annotate_fields=True, include_attributes=False)">
        <variable ilk="argument" name="node" />
        <scope attributes="protected" ilk="function" line="92" lineend="107" name="_format" returns="tuple" signature="_format(node)">
          <variable ilk="argument" name="node" />
          <variable citdl="list" line="94" name="fields" />
          <variable citdl="str" line="95" name="rv" />
        </scope>
        <variable citdl="False" ilk="argument" name="include_attributes" />
        <variable citdl="True" ilk="argument" name="annotate_fields" />
      </scope>
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="excepthandler" />
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="expr" />
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="expr_context" />
      <scope doc="When you compile a node tree with compile(), the compiler&#xA;expects lineno and col_offset attributes for every node that&#xA;supports them." ilk="function" line="125" lineend="147" name="fix_missing_locations" signature="fix_missing_locations(node)">
        <variable ilk="argument" name="node" />
        <scope attributes="protected" ilk="function" line="133" lineend="145" name="_fix" signature="_fix(node, lineno, col_offset)">
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="lineno" />
          <variable ilk="argument" name="col_offset" />
        </scope>
      </scope>
      <scope doc="Return the docstring for the given node or None if no&#xA;docstring can be found." ilk="function" line="187" lineend="200" name="get_docstring" returns="inspect.cleandoc()" signature="get_docstring(node, clean=True)">
        <variable ilk="argument" name="node" />
        <variable citdl="True" ilk="argument" name="clean" />
      </scope>
      <scope doc="Increment the line number of each node in the tree starting&#xA;at *node* by *n*." ilk="function" line="150" lineend="158" name="increment_lineno" signature="increment_lineno(node, n=1)">
        <variable ilk="argument" name="node" />
        <variable citdl="int" ilk="argument" name="n" />
      </scope>
      <scope doc="Yield all direct child nodes of *node*, that is, all fields&#xA;that are nodes and all items of fields that are lists of&#xA;nodes." ilk="function" line="173" lineend="184" name="iter_child_nodes" signature="iter_child_nodes(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <scope doc="Yield a tuple of ``(fieldname, value)`` for each field in&#xA;``node._fields`` that is present on *node*." ilk="function" line="161" lineend="170" name="iter_fields" signature="iter_fields(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="keyword" />
      <scope doc="Safely evaluate an expression node or a string containing a&#xA;Python expression." ilk="function" line="40" lineend="80" name="literal_eval" returns="literal_eval._convert()" signature="literal_eval(node_or_string)">
        <scope attributes="protected" ilk="function" line="52" lineend="79" name="_convert" returns="list()" signature="_convert(node)">
          <variable ilk="argument" name="node" />
          <variable citdl="node.left.n" line="73" name="left" />
          <variable citdl="node.right.n" line="74" name="right" />
        </scope>
        <variable attributes="protected" citdl="dict" line="47" name="_safe_names" />
        <variable citdl="parse()" ilk="argument" name="node_or_string" />
      </scope>
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="mod" />
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="operator" />
      <scope doc="Parse the source into an AST node." ilk="function" line="32" lineend="37" name="parse" returns="compile()" signature="parse(source, filename=&apos;&lt;unknown&gt;&apos;, mode=&apos;exec&apos;)">
        <variable ilk="argument" name="source" />
        <variable citdl="str" ilk="argument" name="mode" />
        <variable citdl="str" ilk="argument" name="filename" />
      </scope>
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="slice" />
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="stmt" />
      <scope classrefs="AST" doc="&#xA;" ilk="class" name="unaryop" />
      <scope doc="Recursively yield all descendant nodes in the tree starting&#xA;at *node* (including *node* itself), in no specified order." ilk="function" line="203" lineend="214" name="walk" signature="walk(node)">
        <variable citdl="todo.popleft()" ilk="argument" name="node" />
        <variable citdl="deque()" line="210" name="todo" />
      </scope>
    </scope>
    