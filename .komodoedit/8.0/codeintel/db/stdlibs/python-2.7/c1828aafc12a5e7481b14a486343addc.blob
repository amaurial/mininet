<scope doc="Utilities for with-statement contexts.  See PEP 343.&#xA;" ilk="blob" lang="Python" name="contextlib">
      <scope classrefs="object" doc="Helper for @contextmanager decorator.&#xA;" ilk="class" line="9" lineend="51" name="GeneratorContextManager">
        <scope ilk="function" line="21" lineend="51" name="__exit__" returns="bool" signature="__exit__(type, value, traceback)">
          <variable citdl="GeneratorContextManager" ilk="argument" name="self" />
          <variable ilk="argument" name="traceback" />
          <variable ilk="argument" name="type" />
          <variable citdl="type()" ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="15" lineend="19" name="__enter__" returns="self.gen.next()" signature="__enter__()">
          <variable citdl="GeneratorContextManager" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="12" lineend="13" name="__init__" signature="GeneratorContextManager(gen)">
          <variable citdl="GeneratorContextManager" ilk="argument" name="self" />
          <variable ilk="argument" name="gen" />
        </scope>
        <variable attributes="__instancevar__" line="13" name="gen" />
      </scope>
      <variable citdl="list" line="7" name="__all__" />
      <scope classrefs="object" doc="Context to automatically close something at the end of a block.&#xA;Code like this:  with closing(&lt;module&gt;.open(&lt;arguments&gt;)) as f: &lt;block&gt;  is equivalent to this:  f = &lt;module&gt;.open(&lt;arguments&gt;) try: &lt;block&gt;" ilk="class" line="132" lineend="154" name="closing">
        <scope ilk="function" line="153" lineend="154" name="__exit__" signature="__exit__(*exc_info)">
          <variable attributes="varargs" ilk="argument" name="exc_info" />
          <variable citdl="closing" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="151" lineend="152" name="__enter__" signature="__enter__()">
          <variable citdl="closing" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="149" lineend="150" name="__init__" signature="closing(thing)">
          <variable ilk="argument" name="thing" />
          <variable citdl="closing" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="150" name="thing" />
      </scope>
      <scope doc="@contextmanager decorator." ilk="function" line="54" lineend="85" name="contextmanager" returns="contextmanager.helper" signature="contextmanager(func)">
        <scope ilk="function" line="83" lineend="84" name="helper" returns="GeneratorContextManager" signature="helper(*args, **kwds)">
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
        <variable ilk="argument" name="func" />
      </scope>
      <scope doc="Combine multiple context managers into a single nested&#xA;context manager." ilk="function" line="89" lineend="129" name="nested" signature="nested(*args, **kwds)">
        <variable attributes="varargs" ilk="argument" name="managers" />
        <variable citdl="sys.exc_info()" line="107" name="exc" />
        <variable citdl="list" line="105" name="exits" />
        <variable citdl="list" line="106" name="vars" />
        <variable citdl="exits.pop()" line="110" name="exit" />
        <variable citdl="mgr.__enter__" line="111" name="enter" />
      </scope>
      <import module="sys" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
      <scope doc="Decorator factory to apply update_wrapper() to a wrapper&#xA;function" ilk="function" name="wraps" signature="wraps(wrapped, assigned=(&apos;__module__&apos;, &apos;__name__&apos;, &apos;__doc__&apos;), updated=(&apos;__dict__&apos;,))" />
    </scope>
    