<scope doc="OS routines for Mac, NT, or Posix depending on what system we&apos;re on.&#xA;This exports: - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc. - os.path is one of the modules posixpath, or ntpath - os.name is &apos;posix&apos;, &apos;nt&apos;, &apos;os2&apos;, &apos;ce&apos; or &apos;riscos&apos; - os.curdir is a string representing the current directory (&apos;.&apos; or &apos;:&apos;) - os.pardir is a string representing the parent directory (&apos;..&apos; or &apos;::&apos;) - os.sep is the (or a most common) pathname separator (&apos;/&apos; or &apos;:&apos; or &apos;\\&apos;) - os.extsep is the extension separator (&apos;.&apos; or &apos;/&apos;) - os.altsep is the alternate pathname separator (None or &apos;/&apos;) - os.pathsep is the component separator used in $PATH etc" ilk="blob" lang="Python" name="os">
      <variable citdl="int" name="F_OK" />
      <variable citdl="int" name="O_APPEND" />
      <variable citdl="int" name="O_BINARY" />
      <variable citdl="int" name="O_CREAT" />
      <variable citdl="int" name="O_EXCL" />
      <variable citdl="int" name="O_NOINHERIT" />
      <variable citdl="int" name="O_RANDOM" />
      <variable citdl="int" name="O_RDONLY" />
      <variable citdl="int" name="O_RDWR" />
      <variable citdl="int" name="O_SEQUENTIAL" />
      <variable citdl="int" name="O_SHORT_LIVED" />
      <variable citdl="int" name="O_TEMPORARY" />
      <variable citdl="int" name="O_TEXT" />
      <variable citdl="int" name="O_TRUNC" />
      <variable citdl="int" name="O_WRONLY" />
      <variable citdl="int" name="P_DETACH" />
      <variable citdl="int" line="523" name="P_NOWAIT" />
      <variable citdl="int" name="P_NOWAITO" />
      <variable citdl="int" name="P_OVERLAY" />
      <variable citdl="int" line="522" name="P_WAIT" />
      <variable citdl="int" name="R_OK" />
      <variable citdl="int" line="128" name="SEEK_CUR" />
      <variable citdl="int" line="129" name="SEEK_END" />
      <variable citdl="int" line="127" name="SEEK_SET" />
      <variable citdl="int" name="TMP_MAX" />
      <import module="UserDict" />
      <variable citdl="int" name="W_OK" />
      <variable citdl="int" name="X_OK" />
      <variable citdl="list" line="31" name="__all__" />
      <import module="_copy_reg" />
      <scope doc="Abort the interpreter immediately." ilk="function" name="abort" signature="abort() -&gt; does not return!" />
      <scope doc="Use the real uid/gid to test for access to a path." ilk="function" name="access" returns="bool" signature="access(path, mode) -&gt; True if granted, False otherwise" />
      <variable citdl="str" name="altsep" />
      <scope doc="Change the current working directory to the specified path." ilk="function" name="chdir" signature="chdir(path)" />
      <scope doc="Change the access permissions of a file." ilk="function" name="chmod" signature="chmod(path, mode)" />
      <scope doc="Close a file descriptor (for low level IO)." ilk="function" name="close" signature="close(fd)" />
      <scope doc="Closes all file descriptors in [fd_low, fd_high), ignoring&#xA;errors." ilk="function" name="closerange" signature="closerange(fd_low, fd_high)" />
      <variable citdl="str" name="curdir" />
      <variable citdl="str" name="defpath" />
      <variable citdl="str" name="devnull" />
      <scope doc="Return a duplicate of a file descriptor." ilk="function" name="dup" signature="dup(fd) -&gt; fd2" />
      <scope doc="Duplicate file descriptor." ilk="function" name="dup2" signature="dup2(old_fd, new_fd)" />
      <variable citdl="_Environ" line="305" name="environ" />
      <scope classrefs="IterableUserDict" doc="# But we store them as upper case&#xA;" ilk="class" line="466" lineend="505" name="_Environ">
        <scope ilk="function" line="494" lineend="496" name="__delitem__" signature="__delitem__(key)">
          <variable citdl="_Environ" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" name="__getitem__" />
        <scope ilk="function" name="__contains__" />
        <scope ilk="function" line="497" lineend="500" name="clear" signature="clear()">
          <variable citdl="_Environ" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" name="get" />
        <scope ilk="function" line="473" lineend="488" name="update" signature="update(dict=None, **kwargs)">
          <variable citdl="dict.keys()" line="476" name="keys" />
          <variable citdl="_Environ" ilk="argument" name="self" />
          <variable ilk="argument" name="dict" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope ilk="function" line="501" lineend="503" name="pop" returns="self.data.pop()" signature="pop(key, *args)">
          <variable citdl="_Environ" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="470" lineend="472" name="__setitem__" signature="__setitem__(key, item)">
          <variable ilk="argument" name="item" />
          <variable citdl="_Environ" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" name="has_key" />
        <scope ilk="function" line="504" lineend="505" name="copy" returns="dict()" signature="copy()">
          <variable citdl="_Environ" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="467" lineend="469" name="__init__" signature="_Environ(environ)">
          <variable citdl="_Environ" ilk="argument" name="self" />
          <variable ilk="argument" name="environ" />
        </scope>
        <variable attributes="__instancevar__" line="469" name="data" />
      </scope>
      <import module="errno" />
      <scope classrefs="EnvironmentError" doc="OS system call failed.&#xA;" ilk="class" name="error">
        <scope ilk="function" name="__init__" />
      </scope>
      <scope doc="Execute the executable file with argument list args,&#xA;replacing the current process." ilk="function" line="307" lineend="312" name="execl" signature="execl(file, *args)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute the executable file with argument list args and&#xA;environment env, replacing the current process." ilk="function" line="314" lineend="320" name="execle" signature="execle(file, *args, env)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable line="319" name="env" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute the executable file (which is searched for along&#xA;$PATH) with argument list args, replacing the current&#xA;process." ilk="function" line="322" lineend="327" name="execlp" signature="execlp(file, *args)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute the executable file (which is searched for along&#xA;$PATH) with argument list args and environment env,&#xA;replacing the current process." ilk="function" line="329" lineend="336" name="execlpe" signature="execlpe(file, *args, env)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable line="335" name="env" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute an executable path with arguments, replacing current&#xA;process." ilk="function" name="execv" signature="execv(path, args)" />
      <scope doc="Execute a path with arguments and environment, replacing&#xA;current process." ilk="function" name="execve" signature="execve(path, args, env)" />
      <scope doc="Execute the executable file (which is searched for along&#xA;$PATH) with argument list args, replacing the current&#xA;process." ilk="function" line="338" lineend="344" name="execvp" signature="execvp(file, args)">
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute the executable file (which is searched for along&#xA;$PATH) with argument list args and environment env ,&#xA;replacing the current process." ilk="function" line="346" lineend="353" name="execvpe" signature="execvpe(file, args, env)">
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="env" />
        <variable ilk="argument" name="file" />
      </scope>
      <variable citdl="str" name="extsep" />
      <scope doc="Return an open file object connected to a file descriptor." ilk="function" name="fdopen" signature="fdopen(fd [, mode=&apos;r&apos; [, bufsize]]) -&gt; file_object" />
      <scope doc="Like stat(), but for an open file descriptor." ilk="function" name="fstat" signature="fstat(fd) -&gt; stat result" />
      <scope doc="force write of file with filedescriptor to disk." ilk="function" name="fsync" signature="fsync(fildes)" />
      <scope doc="Return a string representing the current working directory." ilk="function" name="getcwd" signature="getcwd() -&gt; path" />
      <scope doc="Return a unicode string representing the current working&#xA;directory." ilk="function" name="getcwdu" signature="getcwdu() -&gt; path" />
      <scope doc="Get an environment variable, return None if it doesn&apos;t&#xA;exist." ilk="function" line="510" lineend="513" name="getenv" returns="environ.get()" signature="getenv(key, default=None)">
        <variable ilk="argument" name="default" />
        <variable ilk="argument" name="key" />
      </scope>
      <scope doc="Return the current process id" ilk="function" name="getpid" signature="getpid() -&gt; pid" />
      <scope doc="Return True if the file descriptor &apos;fd&apos; is an open file&#xA;descriptor connected to the slave end of a terminal." ilk="function" name="isatty" returns="bool" signature="isatty(fd) -&gt; bool" />
      <scope doc="Kill a process with a signal." ilk="function" name="kill" signature="kill(pid, sig)" />
      <variable citdl="str" line="43" name="linesep" />
      <scope doc="Return a list containing the names of the entries in the&#xA;directory." ilk="function" name="listdir" signature="listdir(path) -&gt; list_of_strings" />
      <scope doc="Set the current position of a file descriptor." ilk="function" name="lseek" signature="lseek(fd, pos, how) -&gt; newpos" />
      <scope doc="Like stat(path), but do not follow symbolic links." ilk="function" name="lstat" signature="lstat(path) -&gt; stat result" />
      <scope doc="Super-mkdir; create a leaf directory and all intermediate&#xA;ones." ilk="function" line="136" lineend="157" name="makedirs" signature="makedirs(path [, mode=0777])">
        <variable line="145" name="head" />
        <variable line="145" name="tail" />
        <variable citdl="int" ilk="argument" name="mode" />
        <variable ilk="argument" name="name" />
      </scope>
      <scope doc="Create a directory." ilk="function" name="mkdir" signature="mkdir(path [, mode=0777])" />
      <variable citdl="str" line="42" name="name" />
      <scope doc="Open a file (for low level IO)." ilk="function" name="open" signature="open(filename, flag [, mode=0777]) -&gt; fd" />
      <variable citdl="str" name="pardir" />
      <import alias="path" line="1" module="os.path" />
      <variable citdl="str" name="pathsep" />
      <scope doc="Create a pipe." ilk="function" name="pipe" signature="pipe() -&gt; (read_end, write_end)" />
      <scope doc="Open a pipe to/from a command returning a file object." ilk="function" name="popen" signature="popen(command [, mode=&apos;r&apos; [, bufsize]]) -&gt; pipe" />
      <scope doc="Execute the shell command &apos;cmd&apos; in a sub-process." ilk="function" line="656" lineend="672" name="popen2" returns="tuple" signature="popen2(cmd, mode=&apos;t&apos;, bufsize=-1)">
        <variable ilk="argument" name="cmd" />
        <variable citdl="subprocess.PIPE" line="668" name="PIPE" />
        <variable citdl="subprocess.Popen()" line="669" name="p" />
        <variable citdl="str" ilk="argument" name="mode" />
        <variable citdl="str" line="664" name="msg" />
        <variable citdl="int" ilk="argument" name="bufsize" />
      </scope>
      <scope doc="Execute the shell command &apos;cmd&apos; in a sub-process." ilk="function" line="676" lineend="692" name="popen3" returns="tuple" signature="popen3(cmd, mode=&apos;t&apos;, bufsize=-1)">
        <variable ilk="argument" name="cmd" />
        <variable citdl="subprocess.PIPE" line="688" name="PIPE" />
        <variable citdl="subprocess.Popen()" line="689" name="p" />
        <variable citdl="str" ilk="argument" name="mode" />
        <variable citdl="str" line="684" name="msg" />
        <variable citdl="int" ilk="argument" name="bufsize" />
      </scope>
      <scope doc="Execute the shell command &apos;cmd&apos; in a sub-process." ilk="function" line="696" lineend="712" name="popen4" returns="tuple" signature="popen4(cmd, mode=&apos;t&apos;, bufsize=-1)">
        <variable ilk="argument" name="cmd" />
        <variable citdl="subprocess.PIPE" line="708" name="PIPE" />
        <variable citdl="subprocess.Popen()" line="709" name="p" />
        <variable citdl="str" ilk="argument" name="mode" />
        <variable citdl="str" line="704" name="msg" />
        <variable citdl="int" ilk="argument" name="bufsize" />
      </scope>
      <scope doc="Change or add an environment variable." ilk="function" name="putenv" signature="putenv(key, value)" />
      <scope doc="Read a file descriptor." ilk="function" name="read" returns="str" signature="read(fd, buffersize) -&gt; string" />
      <scope doc="Remove a file (same as unlink(path))." ilk="function" name="remove" signature="remove(path)" />
      <scope doc="Super-rmdir; remove a leaf directory and all empty&#xA;intermediate ones." ilk="function" line="159" lineend="179" name="removedirs" signature="removedirs(path)">
        <variable line="171" name="head" />
        <variable line="171" name="tail" />
        <variable ilk="argument" name="name" />
      </scope>
      <scope doc="Rename a file or directory." ilk="function" name="rename" signature="rename(old, new)" />
      <scope doc="Super-rename; create directories as necessary and delete any&#xA;left empty." ilk="function" line="181" lineend="205" name="renames" signature="renames(old, new)">
        <variable ilk="argument" name="new" />
        <variable line="196" name="head" />
        <variable ilk="argument" name="old" />
        <variable line="196" name="tail" />
      </scope>
      <scope doc="Remove a directory." ilk="function" name="rmdir" signature="rmdir(path)" />
      <variable citdl="str" name="sep" />
      <scope doc="Execute file with arguments from args in a subprocess." ilk="function" line="601" lineend="608" name="spawnl" returns="spawnv()" signature="spawnl(mode, file, *args) -&gt; integer">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute file with arguments from args in a subprocess with&#xA;the supplied environment." ilk="function" line="610" lineend="619" name="spawnle" returns="spawnve()" signature="spawnle(mode, file, *args, env) -&gt; integer">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable line="618" name="env" />
      </scope>
      <scope doc="Execute the program &apos;path&apos; in a new process." ilk="function" line="556" lineend="563" name="spawnv" returns="_spawnvef()" signature="spawnv(mode, path, args)">
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute the program &apos;path&apos; in a new process." ilk="function" line="565" lineend="573" name="spawnve" returns="_spawnvef()" signature="spawnve(mode, path, args, env)">
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="env" />
      </scope>
      <scope doc="Start a file with its associated" ilk="function" name="startfile" signature="startfile(filepath [, operation])" />
      <scope doc="Perform a stat system call on the given path." ilk="function" name="stat" signature="stat(path) -&gt; stat result" />
      <scope doc="Determine whether os.[lf]stat represents time stamps as&#xA;float objects." ilk="function" name="stat_float_times" signature="stat_float_times([newval]) -&gt; oldval" />
      <scope classrefs="object" doc="stat_result: Result from stat or lstat.&#xA;This object may be accessed either as a tuple of (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.  Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev, or st_flags, they are available as attributes only.  See os.stat for more information." ilk="class" name="stat_result">
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope ilk="function" name="__reduce__" />
        <scope doc="x.__rmul__(n) &lt;==&gt; n*x" ilk="function" name="__rmul__" signature="x.__rmul__(n) &lt;==&gt; n*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__mul__(n) &lt;==&gt; x*n" ilk="function" name="__mul__" signature="x.__mul__(n) &lt;==&gt; x*n" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="object" doc="statvfs_result: Result from statvfs or fstatvfs.&#xA;This object may be accessed either as a tuple of (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax), or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.  See os.statvfs for more information." ilk="class" name="statvfs_result">
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope ilk="function" name="__reduce__" />
        <scope doc="x.__rmul__(n) &lt;==&gt; n*x" ilk="function" name="__rmul__" signature="x.__rmul__(n) &lt;==&gt; n*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__mul__(n) &lt;==&gt; x*n" ilk="function" name="__mul__" signature="x.__mul__(n) &lt;==&gt; x*n" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope doc="Translate an error code to a message string." ilk="function" name="strerror" returns="str" signature="strerror(code) -&gt; string" />
      <import module="sys" />
      <scope doc="Execute the command (a string) in a subshell." ilk="function" name="system" signature="system(command) -&gt; exit_status" />
      <scope doc="Return a unique name for a temporary file." ilk="function" name="tempnam" returns="str" signature="tempnam([dir[, prefix]]) -&gt; string" />
      <scope doc="Return a tuple of floating point numbers indicating process&#xA;times." ilk="function" name="times" signature="times() -&gt; (utime, stime, cutime, cstime, elapsed_time)" />
      <scope doc="Create a temporary file with no directory entries." ilk="function" name="tmpfile" returns="file" signature="tmpfile() -&gt; file object" />
      <scope doc="Return a unique name for a temporary file." ilk="function" name="tmpnam" returns="str" signature="tmpnam() -&gt; string" />
      <scope doc="Set the current numeric umask and return the previous umask." ilk="function" name="umask" signature="umask(new_mask) -&gt; old_mask" />
      <scope doc="Remove a file (same as remove(path))." ilk="function" name="unlink" signature="unlink(path)" />
      <scope doc="Delete an environment variable." ilk="function" line="405" lineend="406" name="unsetenv" signature="unsetenv(key)">
        <variable ilk="argument" name="key" />
      </scope>
      <scope doc="Return a string of n random bytes suitable for cryptographic&#xA;use." ilk="function" line="743" lineend="759" name="urandom" returns="str" signature="urandom(n) -&gt; str">
        <variable citdl="str" line="754" name="bs" />
        <variable attributes="protected" citdl="open()" line="750" name="_urandomfd" />
        <variable ilk="argument" name="n" />
      </scope>
      <scope doc="Set the access and modified time of the file to the given&#xA;values." ilk="function" name="utime" signature="utime(path, (atime, mtime))&#xA;utime(path, None)" />
      <scope doc="Wait for completion of a given process." ilk="function" name="waitpid" signature="waitpid(pid, options) -&gt; (pid, status &lt;&lt; 8)" />
      <scope doc="Directory tree generator." ilk="function" line="209" lineend="297" name="walk" signature="walk(top, topdown=True, onerror=None, followlinks=False)">
        <variable citdl="path.isdir" line="266" name="isdir" />
        <variable citdl="list" line="282" name="dirs" />
        <variable citdl="join()" line="292" name="new_path" />
        <variable citdl="list" line="282" name="nondirs" />
        <variable ilk="argument" name="onerror" />
        <variable citdl="path.join" line="266" name="join" />
        <variable ilk="argument" name="top" />
        <variable citdl="listdir()" line="276" name="names" />
        <variable citdl="False" ilk="argument" name="followlinks" />
        <variable citdl="True" ilk="argument" name="topdown" />
        <variable citdl="path.islink" line="266" name="islink" />
      </scope>
      <scope doc="Write a string to a file descriptor." ilk="function" name="write" signature="write(fd, string) -&gt; byteswritten" />
      <scope attributes="protected __hidden__" ilk="function" line="516" lineend="517" name="_exists" returns="bool" signature="_exists(name)">
        <variable ilk="argument" name="name" />
      </scope>
      <scope attributes="__hidden__" doc="Execute file (which is looked for along $PATH) with&#xA;arguments from args in a subprocess with the supplied&#xA;environment." ilk="function" line="587" lineend="595" name="spawnvpe" returns="_spawnvef()" signature="spawnvpe(mode, file, args, env) -&gt; integer">
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="env" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="717" lineend="718" name="_make_stat_result" returns="stat_result()" signature="_make_stat_result(tup, dict)">
        <variable ilk="argument" name="tup" />
        <variable ilk="argument" name="dict" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="720" lineend="722" name="_pickle_stat_result" returns="tuple" signature="_pickle_stat_result(sr)">
        <variable ilk="argument" name="sr" />
        <variable line="721" name="args" />
        <variable line="721" name="type" />
      </scope>
      <scope attributes="__hidden__" doc="Execute file (which is looked for along $PATH) with&#xA;arguments from args in a subprocess with the supplied&#xA;environment." ilk="function" line="638" lineend="647" name="spawnlpe" returns="spawnvpe()" signature="spawnlpe(mode, file, *args, env) -&gt; integer">
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable line="646" name="env" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="729" lineend="730" name="_make_statvfs_result" returns="statvfs_result()" signature="_make_statvfs_result(tup, dict)">
        <variable ilk="argument" name="tup" />
        <variable ilk="argument" name="dict" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="732" lineend="734" name="_pickle_statvfs_result" returns="tuple" signature="_pickle_statvfs_result(sr)">
        <variable ilk="argument" name="sr" />
        <variable line="733" name="args" />
        <variable line="733" name="type" />
      </scope>
      <variable attributes="protected __hidden__" citdl="sys.builtin_module_names" line="28" name="_names" />
      <scope attributes="protected __hidden__" ilk="function" line="357" lineend="389" name="_execvpe" signature="_execvpe(file, args, env=None)">
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="args" />
        <variable citdl="dict" ilk="argument" name="env" />
        <variable citdl="execve" line="359" name="func" />
        <variable citdl="tuple" line="360" name="argrest" />
        <variable line="366" name="head" />
        <variable line="366" name="tail" />
        <variable citdl="defpath" line="371" name="envpath" />
        <variable citdl="envpath.split()" line="374" name="PATH" />
        <variable citdl="e" line="375" name="saved_exc" />
        <variable line="376" name="saved_tb" />
        <variable citdl="path.join()" line="378" name="fullname" />
        <variable line="382" name="tb" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="35" lineend="39" name="_get_exports_list" returns="list()" signature="_get_exports_list(module)">
        <variable ilk="argument" name="module" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="529" lineend="554" name="_spawnvef" returns="WTERMSIG()" signature="_spawnvef(mode, file, args, env, func)">
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="env" />
        <variable ilk="argument" name="func" />
        <variable citdl="fork()" line="531" name="pid" />
        <variable line="546" name="wpid" />
        <variable line="546" name="sts" />
      </scope>
      <scope attributes="__hidden__" doc="Execute file (which is looked for along $PATH) with&#xA;arguments from args in a subprocess." ilk="function" line="577" lineend="585" name="spawnvp" returns="_spawnvef()" signature="spawnvp(mode, file, args) -&gt; integer">
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="args" />
      </scope>
      <scope attributes="__hidden__" doc="Execute file (which is looked for along $PATH) with&#xA;arguments from args in a subprocess with the supplied&#xA;environment." ilk="function" line="628" lineend="636" name="spawnlp" returns="spawnvp()" signature="spawnlp(mode, file, *args) -&gt; integer">
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
      <scope doc="Return the signal that terminated the process that provided&#xA;the &apos;status&apos; value." ilk="function" name="WTERMSIG" returns="int" signature="WTERMSIG(status) -&gt; integer" />
      <variable citdl="int" name="EX_IOERR" />
      <variable citdl="int" name="EX_NOHOST" />
      <scope doc="Set the current process&apos;s effective user id." ilk="function" name="seteuid" signature="seteuid(uid)" />
      <scope doc="Extracts a device major number from a raw device number." ilk="function" name="major" signature="major(device) -&gt; major number" />
      <scope doc="Perform an fstatvfs system call on the given fd." ilk="function" name="fstatvfs" signature="fstatvfs(fd) -&gt; statvfs result" />
      <scope doc="Return a tuple identifying the current operating system." ilk="function" name="uname" signature="uname() -&gt; (sysname, nodename, release, version, machine)" />
      <scope doc="Get tuple of the current process&apos;s real, effective, and&#xA;saved group ids." ilk="function" name="getresgid" signature="getresgid() -&gt; (rgid, egid, sgid)" />
      <variable citdl="int" name="EX_OSFILE" />
      <scope doc="Change the access permissions of the file given by file&#xA;descriptor fd." ilk="function" name="fchmod" signature="fchmod(fd, mode)" />
      <scope doc="Change the owner and group id of path to the numeric uid and&#xA;gid." ilk="function" name="lchown" signature="lchown(path, uid, gid)" />
      <scope doc="Set the current process&apos;s group id." ilk="function" name="setgid" signature="setgid(gid)" />
      <variable citdl="int" name="EX_NOINPUT" />
      <scope doc="Composes a raw device number from the major and minor device&#xA;numbers." ilk="function" name="makedev" signature="makedev(major, minor) -&gt; device number" />
      <scope doc="Return the parent&apos;s process id." ilk="function" name="getppid" signature="getppid() -&gt; ppid" />
      <scope doc="Change the owner and group id of the file given by file&#xA;descriptor fd to the numeric uid and gid." ilk="function" name="fchown" signature="fchown(fd, uid, gid)" />
      <scope doc="Return the number of processes in the system run queue&#xA;averaged over the last 1, 5, and 15 minutes or raises&#xA;OSError if the load average was unobtainable" ilk="function" name="getloadavg" signature="getloadavg() -&gt; (float, float, float)" />
      <scope doc="Return True if the process returning &apos;status&apos; was stopped." ilk="function" name="WIFSTOPPED" returns="bool" signature="WIFSTOPPED(status) -&gt; bool" />
      <variable citdl="int" name="O_NOATIME" />
      <scope doc="Set the process group associated with the terminal given by&#xA;a fd." ilk="function" name="tcsetpgrp" signature="tcsetpgrp(fd, pgid)" />
      <scope doc="Perform a statvfs system call on the given path." ilk="function" name="statvfs" signature="statvfs(path) -&gt; statvfs result" />
      <scope doc="Set the current process&apos;s real and effective user ids." ilk="function" name="setreuid" signature="setreuid(ruid, euid)" />
      <scope doc="Set the current process&apos;s effective group id." ilk="function" name="setegid" signature="setegid(gid)" />
      <variable citdl="int" name="EX_OSERR" />
      <scope doc="Return the name of the terminal device connected to &apos;fd&apos;." ilk="function" name="ttyname" returns="str" signature="ttyname(fd) -&gt; string" />
      <scope doc="Create a FIFO (a POSIX named pipe)." ilk="function" name="mkfifo" signature="mkfifo(filename [, mode=0666])" />
      <variable citdl="int" name="O_NOFOLLOW" />
      <variable citdl="int" name="EX_CANTCREAT" />
      <scope doc="Get tuple of the current process&apos;s real, effective, and&#xA;saved user ids." ilk="function" name="getresuid" signature="getresuid() -&gt; (ruid, euid, suid)" />
      <scope doc="Create a filesystem node (file, device special file or named&#xA;pipe) named filename." ilk="function" name="mknod" signature="mknod(filename [, mode=0600, device])" />
      <variable citdl="int" name="O_NOCTTY" />
      <scope doc="Return the current process&apos;s group id." ilk="function" name="getgid" signature="getgid() -&gt; gid" />
      <scope doc="Return the name of the controlling terminal for this&#xA;process." ilk="function" name="ctermid" returns="str" signature="ctermid() -&gt; string" />
      <scope doc="Return True if the process returning &apos;status&apos; was terminated&#xA;by a signal." ilk="function" name="WIFSIGNALED" returns="bool" signature="WIFSIGNALED(status) -&gt; bool" />
      <variable citdl="int" name="EX_CONFIG" />
      <variable citdl="int" name="EX_NOUSER" />
      <scope doc="Call the system call setsid()." ilk="function" name="setsid" signature="setsid()" />
      <variable citdl="int" name="NGROUPS_MAX" />
      <scope doc="Return True if the process returning &apos;status&apos; was continued&#xA;from a job control stop." ilk="function" name="WIFCONTINUED" returns="bool" signature="WIFCONTINUED(status) -&gt; bool" />
      <scope doc="Call the system call setpgid()." ilk="function" name="setpgid" signature="setpgid(pid, pgrp)" />
      <scope doc="Set the current process&apos;s real, effective, and saved group&#xA;ids." ilk="function" name="setresgid" signature="setresgid(rgid, egid, sgid)" />
      <scope doc="Create a symbolic link pointing to src named dst." ilk="function" name="symlink" signature="symlink(src, dst)" />
      <variable citdl="int" name="EX_SOFTWARE" />
      <scope doc="Change to the directory of the given file descriptor." ilk="function" name="fchdir" signature="fchdir(fildes)" />
      <variable citdl="int" name="O_ASYNC" />
      <scope doc="Call the system call getsid()." ilk="function" name="getsid" signature="getsid(pid) -&gt; sid" />
      <scope doc="Wait for completion of a child process." ilk="function" name="wait" signature="wait() -&gt; (pid, status)" />
      <variable citdl="int" name="O_DIRECTORY" />
      <scope doc="Open a pseudo-terminal, returning open fd&apos;s for both master&#xA;and slave end." ilk="function" name="openpty" signature="openpty() -&gt; (master_fd, slave_fd)" />
      <scope doc="Call the system initgroups() to initialize the group access&#xA;list with all of the groups of which the specified username&#xA;is a member, plus the specified group id." ilk="function" name="initgroups" signature="initgroups(username, gid) -&gt; None" />
      <variable citdl="dict" name="pathconf_names" />
      <scope doc="Return the current process group id." ilk="function" name="getpgrp" signature="getpgrp() -&gt; pgrp" />
      <scope doc="Set the current process&apos;s real and effective group ids." ilk="function" name="setregid" signature="setregid(rgid, egid)" />
      <variable citdl="int" name="O_DSYNC" />
      <variable citdl="int" name="O_RSYNC" />
      <variable citdl="int" name="EX_TEMPFAIL" />
      <scope doc="Return True if the process returning &apos;status&apos; was dumped to&#xA;a core file." ilk="function" name="WCOREDUMP" returns="bool" signature="WCOREDUMP(status) -&gt; bool" />
      <scope doc="Call the system call getpgid()." ilk="function" name="getpgid" signature="getpgid(pid) -&gt; pgid" />
      <scope doc="Return true if the process returning &apos;status&apos; exited using&#xA;the exit() system call." ilk="function" name="WIFEXITED" returns="bool" signature="WIFEXITED(status) -&gt; bool" />
      <scope doc="force write of file with filedescriptor to disk." ilk="function" name="fdatasync" signature="fdatasync(fildes)" />
      <scope doc="Extracts a device minor number from a raw device number." ilk="function" name="minor" signature="minor(device) -&gt; minor number" />
      <scope doc="Fork a child process." ilk="function" name="fork" signature="fork() -&gt; pid" />
      <scope doc="Return a string-valued system configuration variable." ilk="function" name="confstr" returns="str" signature="confstr(name) -&gt; string" />
      <variable citdl="int" name="O_LARGEFILE" />
      <variable citdl="int" name="EX_NOPERM" />
      <scope doc="Return the configuration limit name for the file or&#xA;directory path." ilk="function" name="pathconf" returns="int" signature="pathconf(path, name) -&gt; integer" />
      <scope doc="Return the signal that stopped the process that provided the&#xA;&apos;status&apos; value." ilk="function" name="WSTOPSIG" returns="int" signature="WSTOPSIG(status) -&gt; integer" />
      <variable citdl="dict" name="sysconf_names" />
      <scope doc="Create a hard link to a file." ilk="function" name="link" signature="link(src, dst)" />
      <scope doc="Wait for completion of a given child process." ilk="function" name="wait4" signature="wait4(pid, options) -&gt; (pid, status, rusage)" />
      <variable citdl="int" name="O_SYNC" />
      <scope doc="Wait for completion of a child process." ilk="function" name="wait3" signature="wait3(options) -&gt; (pid, status, rusage)" />
      <scope doc="Set the current process&apos;s real, effective, and saved user&#xA;ids." ilk="function" name="setresuid" signature="setresuid(ruid, euid, suid)" />
      <scope doc="Truncate a file to a specified length." ilk="function" name="ftruncate" signature="ftruncate(fd, length)" />
      <variable citdl="int" name="WUNTRACED" />
      <scope doc="Set the current process&apos;s user id." ilk="function" name="setuid" signature="setuid(uid)" />
      <variable citdl="int" name="EX_DATAERR" />
      <scope doc="Return an integer-valued system configuration variable." ilk="function" name="sysconf" returns="int" signature="sysconf(name) -&gt; integer" />
      <variable citdl="int" name="EX_OK" />
      <variable citdl="int" name="O_NONBLOCK" />
      <variable citdl="int" name="EX_UNAVAILABLE" />
      <scope doc="Change root directory to path." ilk="function" name="chroot" signature="chroot(path)" />
      <scope doc="Return list of supplemental group IDs for the process." ilk="function" name="getgroups" returns="list" signature="getgroups() -&gt; list of group IDs" />
      <scope doc="Return the current process&apos;s effective user id." ilk="function" name="geteuid" signature="geteuid() -&gt; euid" />
      <scope doc="Make this process the process group leader." ilk="function" name="setpgrp" signature="setpgrp()" />
      <scope doc="Return the process return code from &apos;status&apos;." ilk="function" name="WEXITSTATUS" returns="int" signature="WEXITSTATUS(status) -&gt; integer" />
      <scope doc="Fork a new process with a new pseudo-terminal as controlling&#xA;tty." ilk="function" name="forkpty" signature="forkpty() -&gt; (pid, master_fd)" />
      <scope doc="Decrease the priority of process by inc and return the new&#xA;priority." ilk="function" name="nice" signature="nice(inc) -&gt; new_priority" />
      <scope doc="Return the actual login name." ilk="function" name="getlogin" returns="str" signature="getlogin() -&gt; string" />
      <scope doc="Kill a process group with a signal." ilk="function" name="killpg" signature="killpg(pgid, sig)" />
      <variable citdl="int" name="O_DIRECT" />
      <scope doc="Return the current process&apos;s effective group id." ilk="function" name="getegid" signature="getegid() -&gt; egid" />
      <variable citdl="dict" name="confstr_names" />
      <scope doc="Set the groups of the current process to list." ilk="function" name="setgroups" signature="setgroups(list)" />
      <scope doc="Return a string representing the path to which the symbolic&#xA;link points." ilk="function" name="readlink" signature="readlink(path) -&gt; path" />
      <scope doc="Return the process group associated with the terminal given&#xA;by a fd." ilk="function" name="tcgetpgrp" signature="tcgetpgrp(fd) -&gt; pgid" />
      <scope doc="Return the current process&apos;s user id." ilk="function" name="getuid" signature="getuid() -&gt; uid" />
      <variable citdl="int" name="WNOHANG" />
      <variable citdl="int" name="WCONTINUED" />
      <scope doc="Return the configuration limit name for the file descriptor&#xA;fd." ilk="function" name="fpathconf" returns="int" signature="fpathconf(fd, name) -&gt; integer" />
      <scope doc="Change the owner and group id of path to the numeric uid and&#xA;gid." ilk="function" name="chown" signature="chown(path, uid, gid)" />
      <variable citdl="int" name="O_NDELAY" />
      <variable citdl="int" name="EX_PROTOCOL" />
      <variable citdl="int" name="EX_USAGE" />
      <scope doc="Change the access permissions of a file." ilk="function" name="lchmod" signature="lchmod(path, mode)" />
      <variable citdl="int" name="O_EXLOCK" />
      <variable citdl="int" name="O_SHLOCK" />
    </scope>
    