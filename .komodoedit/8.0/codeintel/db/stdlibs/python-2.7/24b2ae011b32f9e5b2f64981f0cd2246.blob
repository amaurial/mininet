<scope doc="Wrapper functions for Tcl/Tk.&#xA;Tkinter provides classes which allow the display, positioning and control of widgets. Toplevel widgets are Tk and Toplevel. Other widgets are Frame, Label, Entry, Text, Canvas, Button, Radiobutton, Checkbutton, Scale, Listbox, Scrollbar, OptionMenu, Spinbox LabelFrame and PanedWindow.  Properties of the widgets are specified with keyword arguments. Keyword arguments have the same name as the corresponding resource under Tk. " ilk="blob" lang="Python" name="Tkinter">
      <variable citdl="str" name="ACTIVE" />
      <variable citdl="str" name="ALL" />
      <variable citdl="str" name="ANCHOR" />
      <variable citdl="str" name="ARC" />
      <scope ilk="function" line="2096" lineend="2100" name="At" returns="tuple" signature="At(x, y=None)">
        <variable ilk="argument" name="y" />
        <variable ilk="argument" name="x" />
      </scope>
      <scope doc="# Indices: # XXX I don&apos;t like these -- take them away" ilk="function" line="2085" lineend="2086" name="AtEnd" returns="str" signature="AtEnd()" />
      <scope ilk="function" line="2087" lineend="2091" name="AtInsert" returns="str" signature="AtInsert(*args)">
        <variable citdl="str" line="2088" name="s" />
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
      <scope ilk="function" line="2092" lineend="2093" name="AtSelFirst" returns="str" signature="AtSelFirst()" />
      <scope ilk="function" line="2094" lineend="2095" name="AtSelLast" returns="str" signature="AtSelLast()" />
      <variable citdl="str" name="BASELINE" />
      <variable citdl="str" name="BEVEL" />
      <variable citdl="str" name="BOTH" />
      <variable citdl="str" name="BOTTOM" />
      <variable citdl="str" name="BROWSE" />
      <variable citdl="str" name="BUTT" />
      <scope classrefs="Misc" doc="Internal class.&#xA;" ilk="class" line="1932" lineend="1986" name="BaseWidget">
        <scope ilk="function" line="1984" lineend="1986" name="_do" returns="self.tk.call()" signature="_do(name, args=())">
          <variable citdl="BaseWidget" ilk="argument" name="self" />
          <variable citdl="tuple" ilk="argument" name="args" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Internal function. Sets up information about children." ilk="function" line="1934" lineend="1958" name="_setup" signature="_setup(master, cnf)">
          <variable ilk="argument" name="cnf" />
          <variable attributes="protected" citdl="Tk" line="1940" name="_default_root" />
          <variable citdl="BaseWidget" ilk="argument" name="self" />
          <variable citdl="Tk" ilk="argument" name="master" />
          <variable citdl="repr()" line="1944" name="name" />
        </scope>
        <scope doc="Destroy this and all descendants widgets." ilk="function" line="1977" lineend="1983" name="destroy" signature="destroy()">
          <variable citdl="BaseWidget" ilk="argument" name="self" />
        </scope>
        <scope doc="Construct a widget with the parent widget MASTER, a name&#xA;WIDGETNAME and appropriate options." ilk="function" line="1959" lineend="1976" name="__init__" signature="BaseWidget(master, widgetName, cnf={}, kw={}, extra=())">
          <variable citdl="tuple" ilk="argument" name="extra" />
          <variable citdl="BaseWidget" ilk="argument" name="self" />
          <variable ilk="argument" name="widgetName" />
          <variable citdl="_cnfmerge()" ilk="argument" name="cnf" />
          <variable citdl="list" line="1968" name="classes" />
          <variable citdl="dict" ilk="argument" name="kw" />
          <variable ilk="argument" name="master" />
        </scope>
        <variable attributes="__instancevar__" line="1964" name="widgetName" />
        <variable attributes="protected __instancevar__" citdl="repr()" line="1952" name="_w" />
        <variable attributes="protected __instancevar__" citdl="list" line="1967" name="_tclCommands" />
        <variable attributes="protected __instancevar__" citdl="repr()" line="1950" name="_name" />
        <variable attributes="__instancevar__" citdl="Tk" line="1942" name="master" />
        <variable attributes="__instancevar__" citdl="master.tk" line="1943" name="tk" />
        <variable attributes="__instancevar__" citdl="dict" line="1955" name="children" />
      </scope>
      <scope classrefs="Image" doc="Widget which can display a bitmap.&#xA;" ilk="class" line="3297" lineend="3303" name="BitmapImage">
        <scope doc="Create a bitmap with NAME." ilk="function" line="3299" lineend="3303" name="__init__" signature="BitmapImage(name=None, cnf={}, master=None, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="BitmapImage" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
        </scope>
      </scope>
      <scope classrefs="int" doc="bool(x) -&gt; bool&#xA;Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed." ilk="class" name="BooleanType">
        <scope doc="x.__rand__(y) &lt;==&gt; y&amp;x" ilk="function" name="__rand__" signature="x.__rand__(y) &lt;==&gt; y&amp;x" />
        <scope doc="x.__ror__(y) &lt;==&gt; y|x" ilk="function" name="__ror__" signature="x.__ror__(y) &lt;==&gt; y|x" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__xor__(y) &lt;==&gt; x^y" ilk="function" name="__xor__" signature="x.__xor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__and__(y) &lt;==&gt; x&amp;y" ilk="function" name="__and__" signature="x.__and__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__rxor__(y) &lt;==&gt; y^x" ilk="function" name="__rxor__" signature="x.__rxor__(y) &lt;==&gt; y^x" />
        <scope doc="x.__or__(y) &lt;==&gt; x|y" ilk="function" name="__or__" signature="x.__or__(y) &lt;==&gt; x|y" />
      </scope>
      <scope classrefs="Variable" doc="Value holder for boolean variables.&#xA;" ilk="class" line="304" lineend="321" name="BooleanVar">
        <scope doc="Return the value of the variable as a bool." ilk="function" line="319" lineend="321" name="get" returns="self._tk.getboolean()" signature="get()">
          <variable citdl="BooleanVar" ilk="argument" name="self" />
        </scope>
        <scope doc="Construct a boolean variable." ilk="function" line="307" lineend="317" name="__init__" signature="BooleanVar(master=None, value=None, name=None)">
          <variable citdl="BooleanVar" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="protected" citdl="False" line="306" name="_default" />
      </scope>
      <scope classrefs="object" doc="buffer(object [, offset[, size]])&#xA;Create a new buffer object which references the given object. The buffer will reference a slice of the target object from the start of the object (or at the specified offset). The slice will extend to the end of the target object (or with the specified size)." ilk="class" name="BufferType">
        <scope doc="x.__delitem__(y) &lt;==&gt; del x[y]" ilk="function" name="__delitem__" signature="x.__delitem__(y) &lt;==&gt; del x[y]" />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__delslice__" signature="x.__delslice__(i, j) &lt;==&gt; del x[i:j]" />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__rmul__(n) &lt;==&gt; n*x" ilk="function" name="__rmul__" signature="x.__rmul__(n) &lt;==&gt; n*x" />
        <scope doc="x.__setitem__(i, y) &lt;==&gt; x[i]=y" ilk="function" name="__setitem__" signature="x.__setitem__(i, y) &lt;==&gt; x[i]=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="Use  of negative indices is not supported." ilk="function" name="__setslice__" signature="x.__setslice__(i, j, y) &lt;==&gt; x[i:j]=y" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__mul__(n) &lt;==&gt; x*n" ilk="function" name="__mul__" signature="x.__mul__(n) &lt;==&gt; x*n" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="BuiltinFunctionType">
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="BuiltinMethodType">
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="Widget" doc="Button widget.&#xA;" ilk="class" line="2023" lineend="2081" name="Button">
        <scope ilk="function" line="2049" lineend="2050" name="tkButtonLeave" signature="tkButtonLeave(*dummy)">
          <variable attributes="varargs" ilk="argument" name="dummy" />
          <variable citdl="Button" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="2055" lineend="2056" name="tkButtonUp" signature="tkButtonUp(*dummy)">
          <variable attributes="varargs" ilk="argument" name="dummy" />
          <variable citdl="Button" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="2046" lineend="2047" name="tkButtonEnter" signature="tkButtonEnter(*dummy)">
          <variable attributes="varargs" ilk="argument" name="dummy" />
          <variable citdl="Button" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="2052" lineend="2053" name="tkButtonDown" signature="tkButtonDown(*dummy)">
          <variable attributes="varargs" ilk="argument" name="dummy" />
          <variable citdl="Button" ilk="argument" name="self" />
        </scope>
        <scope doc="Flash the button." ilk="function" line="2061" lineend="2071" name="flash" signature="flash()">
          <variable citdl="Button" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="2058" lineend="2059" name="tkButtonInvoke" signature="tkButtonInvoke(*dummy)">
          <variable attributes="varargs" ilk="argument" name="dummy" />
          <variable citdl="Button" ilk="argument" name="self" />
        </scope>
        <scope doc="Invoke the command associated with the button." ilk="function" line="2073" lineend="2081" name="invoke" returns="self.tk.call()" signature="invoke()">
          <variable citdl="Button" ilk="argument" name="self" />
        </scope>
        <scope doc="Construct a button widget with the parent MASTER." ilk="function" line="2025" lineend="2044" name="__init__" signature="Button(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Button" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
      </scope>
      <variable citdl="str" name="CASCADE" />
      <variable citdl="str" name="CENTER" />
      <variable citdl="str" name="CHAR" />
      <variable citdl="str" name="CHECKBUTTON" />
      <variable citdl="str" name="CHORD" />
      <variable citdl="str" name="COMMAND" />
      <variable citdl="str" name="CURRENT" />
      <scope doc="Internal class. Stores function to call when some user&#xA;defined Tcl function is called e.g. after an event occurred." ilk="class" line="1397" lineend="1414" name="CallWrapper">
        <scope doc="Apply first function SUBST to arguments, than FUNC." ilk="function" line="1405" lineend="1414" name="__call__" returns="CallWrapper.func()" signature="__call__(*args)">
          <variable citdl="CallWrapper" ilk="argument" name="self" />
          <variable attributes="varargs" citdl="subst()" ilk="argument" name="args" />
        </scope>
        <scope doc="Store FUNC, SUBST and WIDGET as members." ilk="function" line="1400" lineend="1404" name="__init__" signature="CallWrapper(func, subst, widget)">
          <variable ilk="argument" name="widget" />
          <variable ilk="argument" name="subst" />
          <variable ilk="argument" name="func" />
          <variable citdl="CallWrapper" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="1404" name="widget" />
        <variable attributes="__instancevar__" line="1403" name="subst" />
        <variable attributes="__instancevar__" line="1402" name="func" />
      </scope>
      <scope classrefs="Widget XView YView" doc="Canvas widget to display graphical elements like lines or text.&#xA;" ilk="class" line="2102" lineend="2341" name="Canvas">
        <scope doc="Return tags associated with the first item specified in&#xA;ARGS." ilk="function" line="2261" lineend="2264" name="gettags" returns="self.tk.splitlist()" signature="gettags(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Add tag NEWTAG to all items." ilk="function" line="2121" lineend="2123" name="addtag_all" signature="addtag_all(newtag)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="newtag" />
        </scope>
        <scope doc="Raise an item TAGORID given in ARGS (optional above another&#xA;item)." ilk="function" name="tkraise" />
        <scope doc="Configure resources of an item TAGORID." ilk="function" line="2280" lineend="2287" name="itemconfigure" returns="self._configure()" signature="itemconfigure(tagOrId, cnf=None, **kw)">
          <variable ilk="argument" name="cnf" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Create polygon with coordinates x1,y1,...,xn,yn." ilk="function" line="2205" lineend="2207" name="create_polygon" returns="Canvas._create()" signature="create_polygon(*args, **kw)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Move an item TAGORID given in ARGS." ilk="function" line="2298" lineend="2300" name="move" signature="move(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Adjust the view of the canvas to GAIN times the difference&#xA;between X and Y and the coordinates given in scan_mark." ilk="function" line="2319" lineend="2323" name="scan_dragto" signature="scan_dragto(x, y, gain=10)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="gain" />
        </scope>
        <scope doc="Create text with coordinates x1,y1." ilk="function" line="2211" lineend="2213" name="create_text" returns="Canvas._create()" signature="create_text(*args, **kw)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Add tag NEWTAG to all items which overlap the rectangle&#xA;defined by X1,Y1,X2,Y2." ilk="function" line="2137" lineend="2140" name="addtag_overlapping" signature="addtag_overlapping(newtag, x1, y1, x2, y2)">
          <variable ilk="argument" name="y2" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="newtag" />
          <variable ilk="argument" name="x2" />
          <variable ilk="argument" name="y1" />
          <variable ilk="argument" name="x1" />
        </scope>
        <scope doc="Return the canvas y coordinate of pixel position SCREENY&#xA;rounded to nearest multiple of GRIDSPACING units." ilk="function" line="2168" lineend="2172" name="canvasy" returns="getdouble()" signature="canvasy(screeny, gridspacing=None)">
          <variable ilk="argument" name="gridspacing" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="screeny" />
        </scope>
        <scope doc="Return the canvas x coordinate of pixel position SCREENX&#xA;rounded to nearest multiple of GRIDSPACING units." ilk="function" line="2163" lineend="2167" name="canvasx" returns="getdouble()" signature="canvasx(screenx, gridspacing=None)">
          <variable ilk="argument" name="gridspacing" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="screenx" />
        </scope>
        <scope doc="Create window with coordinates x1,y1,x2,y2." ilk="function" line="2214" lineend="2216" name="create_window" returns="Canvas._create()" signature="create_window(*args, **kw)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Delete tag or id given as last arguments in ARGS from items&#xA;identified by first argument in ARGS." ilk="function" line="2224" lineend="2227" name="dtag" signature="dtag(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Remember the current X, Y coordinates." ilk="function" line="2316" lineend="2318" name="scan_mark" signature="scan_mark(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Canvas" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the fixed end of a selection in item TAGORID to INDEX." ilk="function" line="2330" lineend="2332" name="select_from" signature="select_from(tagOrId, index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Internal function." ilk="function" line="2115" lineend="2117" name="addtag" signature="addtag(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Construct a canvas widget with the parent MASTER." ilk="function" line="2104" lineend="2114" name="__init__" signature="Canvas(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
        <scope doc="Configure resources of an item TAGORID." ilk="function" line="2288" name="itemconfig" />
        <scope doc="Raise an item TAGORID given in ARGS (optional above another&#xA;item)." ilk="function" line="2308" lineend="2311" name="tag_raise" signature="tag_raise(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Unbind for all items with TAGORID for event SEQUENCE  the&#xA;function identified with FUNCID." ilk="function" line="2149" lineend="2154" name="tag_unbind" signature="tag_unbind(tagOrId, sequence, funcid=None)">
          <variable ilk="argument" name="funcid" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="tagOrId" />
          <variable ilk="argument" name="sequence" />
        </scope>
        <scope doc="Scale item TAGORID with XORIGIN, YORIGIN, XSCALE, YSCALE." ilk="function" line="2313" lineend="2315" name="scale" signature="scale(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Set cursor at position POS in the item identified by&#xA;TAGORID." ilk="function" line="2265" lineend="2268" name="icursor" signature="icursor(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Create oval with coordinates x1,y1,x2,y2." ilk="function" line="2202" lineend="2204" name="create_oval" returns="Canvas._create()" signature="create_oval(*args, **kw)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Return all items below TAGORID." ilk="function" line="2238" lineend="2240" name="find_below" returns="Canvas.find()" signature="find_below(tagOrId)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Bind to all items with TAGORID at event SEQUENCE a call to&#xA;function FUNC." ilk="function" line="2155" lineend="2162" name="tag_bind" returns="self._bind()" signature="tag_bind(tagOrId, sequence=None, func=None, add=None)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="sequence" />
          <variable ilk="argument" name="add" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Create image item with coordinates x1,y1." ilk="function" line="2196" lineend="2198" name="create_image" returns="Canvas._create()" signature="create_image(*args, **kw)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Internal function." ilk="function" line="2228" lineend="2231" name="find" returns="tuple" signature="find(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Return all items which overlap the rectangle defined by&#xA;X1,Y1,X2,Y2." ilk="function" line="2251" lineend="2254" name="find_overlapping" returns="Canvas.find()" signature="find_overlapping(x1, y1, x2, y2)">
          <variable ilk="argument" name="y1" />
          <variable ilk="argument" name="x2" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="x1" />
          <variable ilk="argument" name="y2" />
        </scope>
        <scope doc="Adjust the end of the selection near the cursor of an item&#xA;TAGORID to index." ilk="function" line="2324" lineend="2326" name="select_adjust" signature="select_adjust(tagOrId, index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Return all items with TAGORID." ilk="function" line="2255" lineend="2257" name="find_withtag" returns="Canvas.find()" signature="find_withtag(tagOrId)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Return the type of the item TAGORID." ilk="function" line="2339" lineend="2341" name="type" returns="self.tk.call()" signature="type(tagOrId)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Internal function." ilk="function" line="2179" lineend="2189" name="_create" returns="getint()" signature="_create(itemType, args, kw)">
          <variable citdl="dict" line="2182" name="cnf" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable citdl="_flatten()" ilk="argument" name="args" />
          <variable ilk="argument" name="kw" />
          <variable ilk="argument" name="itemType" />
        </scope>
        <scope doc="Add tag NEWTAG to all items below TAGORID." ilk="function" line="2124" lineend="2126" name="addtag_below" signature="addtag_below(newtag, tagOrId)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="newtag" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Add tag NEWTAG to item which is closest to pixel at X, Y." ilk="function" line="2127" lineend="2132" name="addtag_closest" signature="addtag_closest(newtag, x, y, halo=None, start=None)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="newtag" />
          <variable ilk="argument" name="start" />
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="halo" />
        </scope>
        <scope doc="Return position of cursor as integer in item specified in&#xA;ARGS." ilk="function" line="2269" lineend="2271" name="index" returns="getint()" signature="index(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Add tag NEWTAG to all items in the rectangle defined by&#xA;X1,Y1,X2,Y2." ilk="function" line="2133" lineend="2136" name="addtag_enclosed" signature="addtag_enclosed(newtag, x1, y1, x2, y2)">
          <variable ilk="argument" name="y2" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="newtag" />
          <variable ilk="argument" name="x2" />
          <variable ilk="argument" name="y1" />
          <variable ilk="argument" name="x1" />
        </scope>
        <scope doc="Print the contents of the canvas to a postscript file." ilk="function" line="2301" lineend="2307" name="postscript" returns="self.tk.call()" signature="postscript(cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Add tag NEWTAG to all items with TAGORID." ilk="function" line="2141" lineend="2143" name="addtag_withtag" signature="addtag_withtag(newtag, tagOrId)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="newtag" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Create arc shaped region with coordinates x1,y1,x2,y2." ilk="function" line="2190" lineend="2192" name="create_arc" returns="Canvas._create()" signature="create_arc(*args, **kw)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Return items above TAGORID." ilk="function" line="2232" lineend="2234" name="find_above" returns="Canvas.find()" signature="find_above(tagOrId)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Raise an item TAGORID given in ARGS (optional above another&#xA;item)." ilk="function" line="2312" name="lift" />
        <scope doc="Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle&#xA;which encloses all items with tags specified as arguments." ilk="function" line="2144" lineend="2148" name="bbox" returns="self._getints()" signature="bbox(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Set focus to the first item specified in ARGS." ilk="function" line="2258" lineend="2260" name="focus" returns="self.tk.call()" signature="focus(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Create bitmap with coordinates x1,y1." ilk="function" line="2193" lineend="2195" name="create_bitmap" returns="Canvas._create()" signature="create_bitmap(*args, **kw)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Return all items in rectangle defined by X1,Y1,X2,Y2." ilk="function" line="2247" lineend="2250" name="find_enclosed" returns="Canvas.find()" signature="find_enclosed(x1, y1, x2, y2)">
          <variable ilk="argument" name="y1" />
          <variable ilk="argument" name="x2" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="x1" />
          <variable ilk="argument" name="y2" />
        </scope>
        <scope doc="Delete characters of text items identified by tag or id in&#xA;ARGS (possibly several times) from FIRST to LAST character&#xA;(including)." ilk="function" line="2217" lineend="2220" name="dchars" signature="dchars(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Insert TEXT in item TAGORID at position POS." ilk="function" line="2272" lineend="2275" name="insert" signature="insert(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Lower an item TAGORID given in ARGS (optional below another&#xA;item)." ilk="function" line="2297" name="lower" />
        <scope doc="Add tag NEWTAG to all items above TAGORID." ilk="function" line="2118" lineend="2120" name="addtag_above" signature="addtag_above(newtag, tagOrId)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="newtag" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Create rectangle with coordinates x1,y1,x2,y2." ilk="function" line="2208" lineend="2210" name="create_rectangle" returns="Canvas._create()" signature="create_rectangle(*args, **kw)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Return item which is closest to pixel at X, Y." ilk="function" line="2241" lineend="2246" name="find_closest" returns="Canvas.find()" signature="find_closest(x, y, halo=None, start=None)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="halo" />
          <variable ilk="argument" name="start" />
        </scope>
        <scope doc="Return all items." ilk="function" line="2235" lineend="2237" name="find_all" returns="Canvas.find()" signature="find_all()">
          <variable citdl="Canvas" ilk="argument" name="self" />
        </scope>
        <scope doc="Lower an item TAGORID given in ARGS (optional below another&#xA;item)." ilk="function" line="2293" lineend="2296" name="tag_lower" signature="tag_lower(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Return the resource value for an OPTION for item TAGORID." ilk="function" line="2276" lineend="2279" name="itemcget" returns="self.tk.call()" signature="itemcget(tagOrId, option)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Create line with coordinates x1,y1,...,xn,yn." ilk="function" line="2199" lineend="2201" name="create_line" returns="Canvas._create()" signature="create_line(*args, **kw)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Return a list of coordinates for the item given in ARGS." ilk="function" line="2173" lineend="2178" name="coords" returns="map()" signature="coords(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Set the variable end of a selection in item TAGORID to&#xA;INDEX." ilk="function" line="2336" lineend="2338" name="select_to" signature="select_to(tagOrId, index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Return the item which has the selection." ilk="function" line="2333" lineend="2335" name="select_item" returns="self.tk.call()" signature="select_item()">
          <variable citdl="Canvas" ilk="argument" name="self" />
        </scope>
        <scope doc="Clear the selection if it is in this widget." ilk="function" line="2327" lineend="2329" name="select_clear" signature="select_clear()">
          <variable citdl="Canvas" ilk="argument" name="self" />
        </scope>
        <scope doc="Delete items identified by all tag or ids contained in ARGS." ilk="function" line="2221" lineend="2223" name="delete" signature="delete(*args)">
          <variable citdl="Canvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Checkbutton widget which is either in on- or off-state.&#xA;" ilk="class" line="2343" lineend="2370" name="Checkbutton">
        <scope doc="Put the button in off-state." ilk="function" line="2356" lineend="2358" name="deselect" signature="deselect()">
          <variable citdl="Checkbutton" ilk="argument" name="self" />
        </scope>
        <scope doc="Toggle the button and invoke a command if given as resource." ilk="function" line="2362" lineend="2364" name="invoke" returns="self.tk.call()" signature="invoke()">
          <variable citdl="Checkbutton" ilk="argument" name="self" />
        </scope>
        <scope doc="Flash the button." ilk="function" line="2359" lineend="2361" name="flash" signature="flash()">
          <variable citdl="Checkbutton" ilk="argument" name="self" />
        </scope>
        <scope doc="Toggle the button." ilk="function" line="2368" lineend="2370" name="toggle" signature="toggle()">
          <variable citdl="Checkbutton" ilk="argument" name="self" />
        </scope>
        <scope doc="Put the button in on-state." ilk="function" line="2365" lineend="2367" name="select" signature="select()">
          <variable citdl="Checkbutton" ilk="argument" name="self" />
        </scope>
        <scope doc="Construct a checkbutton widget with the parent MASTER." ilk="function" line="2345" lineend="2355" name="__init__" signature="Checkbutton(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Checkbutton" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
      </scope>
      <scope classrefs="object" doc="classobj(name, bases, dict)&#xA;Create a class object.  The name must be a string; the second argument a tuple of classes, and the third a dictionary." ilk="class" name="ClassType">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
      </scope>
      <scope classrefs="object" doc="code(argcount, nlocals, stacksize, flags, codestring, constants, names,&#xA;varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])  Create a code object.  Not for the faint of heart." ilk="class" name="CodeType">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="object" doc="complex(real[, imag]) -&gt; complex number&#xA;Create a complex number from a real part and an optional imaginary part. This is equivalent to (real + imag*1j) where imag defaults to 0." ilk="class" name="ComplexType">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="Returns the complex conjugate of its argument." ilk="function" name="conjugate" returns="complex" signature="complex.conjugate() -&gt; complex" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope doc="Converts to a string according to format_spec." ilk="function" name="__format__" returns="str" signature="complex.__format__() -&gt; str" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <variable citdl="str" name="DISABLED" />
      <variable citdl="str" name="DOTBOX" />
      <scope classrefs="object" doc="&#xA;" ilk="class" name="DictProxyType">
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="D.iteritems() -&gt; an iterator over the (key, value) items of D" ilk="function" name="iteritems" signature="D.iteritems() -&gt; an iterator over the (key, value) items of D" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="D.has_key(k) -&gt; True if D has a key k, else False" ilk="function" name="has_key" returns="bool" signature="D.has_key(k) -&gt; True if D has a key k, else False" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="D.itervalues() -&gt; an iterator over the values of D" ilk="function" name="itervalues" signature="D.itervalues() -&gt; an iterator over the values of D" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if D.has_key(k), else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if D.has_key(k), else d.  d defaults to None." />
        <scope doc="D.keys() -&gt; list of D&apos;s keys" ilk="function" name="keys" returns="list" signature="D.keys() -&gt; list of D&apos;s keys" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="D.iterkeys() -&gt; an iterator over the keys of D" ilk="function" name="iterkeys" signature="D.iterkeys() -&gt; an iterator over the keys of D" />
        <scope doc="D.items() -&gt; list of D&apos;s (key, value) pairs, as 2-tuples" ilk="function" name="items" returns="list" signature="D.items() -&gt; list of D&apos;s (key, value) pairs, as 2-tuples" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="D.values() -&gt; list of D&apos;s values" ilk="function" name="values" returns="list" signature="D.values() -&gt; list of D&apos;s values" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="object" doc="dict() -&gt; new empty dictionary&#xA;dict(mapping) -&gt; new dictionary initialized from a mapping object&apos;s (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)" ilk="class" name="DictType">
        <scope doc="2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="If key is not found, d is returned if given, otherwise&#xA;KeyError is raised" ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="D.has_key(k) -&gt; True if D has a key k, else False" ilk="function" name="has_key" returns="bool" signature="D.has_key(k) -&gt; True if D has a key k, else False" />
        <scope doc="D.viewkeys() -&gt; a set-like object providing a view on D&apos;s keys" ilk="function" name="viewkeys" signature="D.viewkeys() -&gt; a set-like object providing a view on D&apos;s keys" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="D.__sizeof__() -&gt; size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__() -&gt; size of D in memory, in bytes" />
        <scope ilk="function" name="__init__" />
        <scope doc="D.viewitems() -&gt; a set-like object providing a view on D&apos;s items" ilk="function" name="viewitems" signature="D.viewitems() -&gt; a set-like object providing a view on D&apos;s items" />
        <scope doc="D.__contains__(k) -&gt; True if D has a key k, else False" ilk="function" name="__contains__" returns="bool" signature="D.__contains__(k) -&gt; True if D has a key k, else False" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="D.itervalues() -&gt; an iterator over the values of D" ilk="function" name="itervalues" signature="D.itervalues() -&gt; an iterator over the values of D" />
        <scope doc="D.iteritems() -&gt; an iterator over the (key, value) items of D" ilk="function" name="iteritems" signature="D.iteritems() -&gt; an iterator over the (key, value) items of D" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="D.keys() -&gt; list of D&apos;s keys" ilk="function" name="keys" returns="list" signature="D.keys() -&gt; list of D&apos;s keys" />
        <scope doc="If E has a .keys() method, does:     for k in E: D[k] = E[k]&#xA;If E lacks .keys() method, does:     for (k, v) in E: D[k] =&#xA;v In either case, this is followed by: for k in F: D[k] =&#xA;F[k]" ilk="function" name="update" signature="D.update(E, **F) -&gt; None.  Update D from dict/iterable E and F." />
        <scope doc="x.__setitem__(i, y) &lt;==&gt; x[i]=y" ilk="function" name="__setitem__" signature="x.__setitem__(i, y) &lt;==&gt; x[i]=y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="D.iterkeys() -&gt; an iterator over the keys of D" ilk="function" name="iterkeys" signature="D.iterkeys() -&gt; an iterator over the keys of D" />
        <scope doc="x.__delitem__(y) &lt;==&gt; del x[y]" ilk="function" name="__delitem__" signature="x.__delitem__(y) &lt;==&gt; del x[y]" />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
        <scope doc="D.viewvalues() -&gt; an object providing a view on D&apos;s values" ilk="function" name="viewvalues" signature="D.viewvalues() -&gt; an object providing a view on D&apos;s values" />
        <scope doc="D.items() -&gt; list of D&apos;s (key, value) pairs, as 2-tuples" ilk="function" name="items" returns="list" signature="D.items() -&gt; list of D&apos;s (key, value) pairs, as 2-tuples" />
        <scope doc="D.clear() -&gt; None.  Remove all items from D." ilk="function" name="clear" signature="D.clear() -&gt; None.  Remove all items from D." />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="D.values() -&gt; list of D&apos;s values" ilk="function" name="values" returns="list" signature="D.values() -&gt; list of D&apos;s values" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="object" doc="dict() -&gt; new empty dictionary&#xA;dict(mapping) -&gt; new dictionary initialized from a mapping object&apos;s (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)" ilk="class" name="DictionaryType">
        <scope doc="2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="If key is not found, d is returned if given, otherwise&#xA;KeyError is raised" ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="D.has_key(k) -&gt; True if D has a key k, else False" ilk="function" name="has_key" returns="bool" signature="D.has_key(k) -&gt; True if D has a key k, else False" />
        <scope doc="D.viewkeys() -&gt; a set-like object providing a view on D&apos;s keys" ilk="function" name="viewkeys" signature="D.viewkeys() -&gt; a set-like object providing a view on D&apos;s keys" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="D.__sizeof__() -&gt; size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__() -&gt; size of D in memory, in bytes" />
        <scope ilk="function" name="__init__" />
        <scope doc="D.viewitems() -&gt; a set-like object providing a view on D&apos;s items" ilk="function" name="viewitems" signature="D.viewitems() -&gt; a set-like object providing a view on D&apos;s items" />
        <scope doc="D.__contains__(k) -&gt; True if D has a key k, else False" ilk="function" name="__contains__" returns="bool" signature="D.__contains__(k) -&gt; True if D has a key k, else False" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="D.itervalues() -&gt; an iterator over the values of D" ilk="function" name="itervalues" signature="D.itervalues() -&gt; an iterator over the values of D" />
        <scope doc="D.iteritems() -&gt; an iterator over the (key, value) items of D" ilk="function" name="iteritems" signature="D.iteritems() -&gt; an iterator over the (key, value) items of D" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="D.keys() -&gt; list of D&apos;s keys" ilk="function" name="keys" returns="list" signature="D.keys() -&gt; list of D&apos;s keys" />
        <scope doc="If E has a .keys() method, does:     for k in E: D[k] = E[k]&#xA;If E lacks .keys() method, does:     for (k, v) in E: D[k] =&#xA;v In either case, this is followed by: for k in F: D[k] =&#xA;F[k]" ilk="function" name="update" signature="D.update(E, **F) -&gt; None.  Update D from dict/iterable E and F." />
        <scope doc="x.__setitem__(i, y) &lt;==&gt; x[i]=y" ilk="function" name="__setitem__" signature="x.__setitem__(i, y) &lt;==&gt; x[i]=y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="D.iterkeys() -&gt; an iterator over the keys of D" ilk="function" name="iterkeys" signature="D.iterkeys() -&gt; an iterator over the keys of D" />
        <scope doc="x.__delitem__(y) &lt;==&gt; del x[y]" ilk="function" name="__delitem__" signature="x.__delitem__(y) &lt;==&gt; del x[y]" />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
        <scope doc="D.viewvalues() -&gt; an object providing a view on D&apos;s values" ilk="function" name="viewvalues" signature="D.viewvalues() -&gt; an object providing a view on D&apos;s values" />
        <scope doc="D.items() -&gt; list of D&apos;s (key, value) pairs, as 2-tuples" ilk="function" name="items" returns="list" signature="D.items() -&gt; list of D&apos;s (key, value) pairs, as 2-tuples" />
        <scope doc="D.clear() -&gt; None.  Remove all items from D." ilk="function" name="clear" signature="D.clear() -&gt; None.  Remove all items from D." />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="D.values() -&gt; list of D&apos;s values" ilk="function" name="values" returns="list" signature="D.values() -&gt; list of D&apos;s values" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="Variable" doc="Value holder for float variables.&#xA;" ilk="class" line="285" lineend="302" name="DoubleVar">
        <scope doc="Return the value of the variable as a float." ilk="function" line="300" lineend="302" name="get" returns="getdouble()" signature="get()">
          <variable citdl="DoubleVar" ilk="argument" name="self" />
        </scope>
        <scope doc="Construct a float variable." ilk="function" line="288" lineend="298" name="__init__" signature="DoubleVar(master=None, value=None, name=None)">
          <variable citdl="DoubleVar" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="protected" citdl="float" line="287" name="_default" />
      </scope>
      <variable citdl="str" name="E" />
      <variable citdl="str" name="END" />
      <variable citdl="str" name="EW" />
      <variable citdl="int" line="52" name="EXCEPTION" />
      <variable citdl="str" name="EXTENDED" />
      <scope classrefs="object" doc="&#xA;" ilk="class" name="EllipsisType">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <scope classrefs="Widget XView" doc="Entry widget which allows to display simple text.&#xA;" ilk="class" line="2372" lineend="2435" name="Entry">
        <scope doc="Remember the current X, Y coordinates." ilk="function" line="2402" lineend="2404" name="scan_mark" signature="scan_mark(x)">
          <variable ilk="argument" name="x" />
          <variable citdl="Entry" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the fixed end of a selection to INDEX." ilk="function" line="2418" lineend="2420" name="selection_from" signature="selection_from(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Entry" ilk="argument" name="self" />
        </scope>
        <scope doc="Adjust the view of the canvas to 10 times the difference&#xA;between X and Y and the coordinates given in scan_mark." ilk="function" line="2405" lineend="2409" name="scan_dragto" signature="scan_dragto(x)">
          <variable ilk="argument" name="x" />
          <variable citdl="Entry" ilk="argument" name="self" />
        </scope>
        <scope doc="Clear the selection if it is in this widget." ilk="function" line="2414" lineend="2416" name="selection_clear" signature="selection_clear()">
          <variable citdl="Entry" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the fixed end of a selection to INDEX." ilk="function" line="2421" name="select_from" />
        <scope doc="Construct an entry widget with the parent MASTER." ilk="function" line="2374" lineend="2385" name="__init__" signature="Entry(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Entry" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
        <scope doc="Return position of cursor." ilk="function" line="2395" lineend="2398" name="index" returns="getint()" signature="index(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Entry" ilk="argument" name="self" />
        </scope>
        <scope doc="Insert cursor at INDEX." ilk="function" line="2392" lineend="2394" name="icursor" signature="icursor(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Entry" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the selection from START to END (not included)." ilk="function" line="2431" name="select_range" />
        <scope doc="Set the selection from START to END (not included)." ilk="function" line="2428" lineend="2430" name="selection_range" signature="selection_range(start, end)">
          <variable ilk="argument" name="start" />
          <variable citdl="Entry" ilk="argument" name="self" />
          <variable ilk="argument" name="end" />
        </scope>
        <scope doc="Adjust the end of the selection near the cursor to INDEX." ilk="function" line="2413" name="select_adjust" />
        <scope doc="Adjust the end of the selection near the cursor to INDEX." ilk="function" line="2410" lineend="2412" name="selection_adjust" signature="selection_adjust(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Entry" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the variable end of a selection to INDEX." ilk="function" line="2432" lineend="2434" name="selection_to" signature="selection_to(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Entry" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the text." ilk="function" line="2389" lineend="2391" name="get" returns="self.tk.call()" signature="get()">
          <variable citdl="Entry" ilk="argument" name="self" />
        </scope>
        <scope doc="Return True if there are characters selected in the entry,&#xA;False otherwise." ilk="function" line="2422" lineend="2426" name="selection_present" returns="self.tk.getboolean()" signature="selection_present()">
          <variable citdl="Entry" ilk="argument" name="self" />
        </scope>
        <scope doc="Return True if there are characters selected in the entry,&#xA;False otherwise." ilk="function" line="2427" name="select_present" />
        <scope doc="Insert STRING at INDEX." ilk="function" line="2399" lineend="2401" name="insert" signature="insert(index, string)">
          <variable ilk="argument" name="index" />
          <variable citdl="Entry" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
        </scope>
        <scope doc="Clear the selection if it is in this widget." ilk="function" line="2417" name="select_clear" />
        <scope doc="Set the variable end of a selection to INDEX." ilk="function" line="2435" name="select_to" />
        <scope doc="Delete text from FIRST to LAST (not included)." ilk="function" line="2386" lineend="2388" name="delete" signature="delete(first, last=None)">
          <variable citdl="Entry" ilk="argument" name="self" />
          <variable ilk="argument" name="last" />
          <variable ilk="argument" name="first" />
        </scope>
      </scope>
      <scope doc="Container for the properties of an event.&#xA;Instances of this type are generated if one of the following events occurs:  KeyPress, KeyRelease - for keyboard events ButtonPress, ButtonRelease, Motion, Enter, Leave, MouseWheel - for mouse events Visibility, Unmap, Map, Expose, FocusIn, FocusOut, Circulate, Colormap, Gravity, Reparent, Property, Destroy, Activate, Deactivate - for window events.  If a callback function for one of these events is registered using bind, bind_all, bind_class, or tag_bind, the callback is" ilk="class" line="94" lineend="136" name="Event" />
      <variable citdl="int" name="FALSE" />
      <variable citdl="str" name="FIRST" />
      <variable citdl="str" name="FLAT" />
      <scope classrefs="object" doc="file(name[, mode[, buffering]]) -&gt; file object&#xA;Open a file.  The mode can be &apos;r&apos;, &apos;w&apos; or &apos;a&apos; for reading (default), writing or appending.  The file will be created if it doesn&apos;t exist when opened for writing or appending; it will be truncated when opened for writing.  Add a &apos;b&apos; to the mode for binary files. Add a &apos;+&apos; to the mode to allow simultaneous reading and writing. If the buffering argument is given, 0 means unbuffered, 1 means line buffered, and larger numbers specify the buffer size.  The preferred way to open a file is with the builtin open() function. Add a &apos;U&apos; to mode to open the file for input with universal newline support.  Any line ending in the input file will be seen as a &apos;\n&apos;" ilk="class" name="FileType">
        <scope doc="For backward compatibility." ilk="function" name="xreadlines" signature="xreadlines() -&gt; returns self." />
        <scope doc="Call readline() repeatedly and return a list of the lines so&#xA;read." ilk="function" name="readlines" returns="list" signature="readlines([size]) -&gt; list of strings, each a line from the file." />
        <scope doc="flush() -&gt; None.  Flush the internal I/O buffer." ilk="function" name="flush" signature="flush() -&gt; None.  Flush the internal I/O buffer." />
        <scope doc="Sets data attribute .closed to True." ilk="function" name="close" signature="close() -&gt; None or (perhaps) an integer.  Close the file." />
        <scope doc="Argument offset is a byte count." ilk="function" name="seek" signature="seek(offset[, whence]) -&gt; None.  Move to new file position." />
        <scope ilk="function" name="__init__" />
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="readinto() -&gt; Undocumented.  Don&apos;t use this; it may go away." ilk="function" name="readinto" signature="readinto() -&gt; Undocumented.  Don&apos;t use this; it may go away." />
        <scope doc="__enter__() -&gt; self." ilk="function" name="__enter__" signature="__enter__() -&gt; self." />
        <scope doc="x.next() -&gt; the next value, or raise StopIteration" ilk="function" name="next" signature="x.next() -&gt; the next value, or raise StopIteration" />
        <scope doc="Note that due to buffering, flush() or close() may be needed&#xA;before the file on disk reflects the data written." ilk="function" name="write" signature="write(str) -&gt; None.  Write string str to file." />
        <scope doc="tell() -&gt; current file position, an integer (may be a long integer)." ilk="function" name="tell" signature="tell() -&gt; current file position, an integer (may be a long integer)." />
        <scope doc="__exit__(*excinfo) -&gt; None.  Closes the file." ilk="function" name="__exit__" signature="__exit__(*excinfo) -&gt; None.  Closes the file." />
        <scope doc="isatty() -&gt; true or false.  True if the file is connected to a tty device." ilk="function" name="isatty" returns="bool" signature="isatty() -&gt; true or false.  True if the file is connected to a tty device." />
        <scope doc="Size defaults to the current file position, as returned by&#xA;tell()." ilk="function" name="truncate" signature="truncate([size]) -&gt; None.  Truncate the file to at most size bytes." />
        <scope doc="If the size argument is negative or omitted, read until EOF&#xA;is reached." ilk="function" name="read" signature="read([size]) -&gt; read at most size bytes, returned as a string." />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="Retain newline." ilk="function" name="readline" signature="readline([size]) -&gt; next line from the file, as a string." />
        <scope doc="This is needed for lower-level file interfaces, such&#xA;os.read()." ilk="function" name="fileno" returns="int" signature="fileno() -&gt; integer &quot;file descriptor&quot;." />
        <scope doc="Note that newlines are not added." ilk="function" name="writelines" signature="writelines(sequence_of_strings) -&gt; None.  Write the strings to the file." />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <import module="FixTk" />
      <scope classrefs="object" doc="float(x) -&gt; floating point number&#xA;Convert a string or number to a floating point number, if possible." ilk="class" name="FloatType">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="Returns self, the complex conjugate of any float." ilk="function" name="conjugate" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="Returns the Integral closest to x between 0 and x." ilk="function" name="__trunc__" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="Returns a pair of integers, whose ratio is exactly equal to&#xA;the original float and with a positive denominator." ilk="function" name="as_integer_ratio" signature="float.as_integer_ratio() -&gt; (int, int)" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Formats the float according to format_spec." ilk="function" name="__format__" returns="str" signature="float.__format__(format_spec) -&gt; string" />
        <scope doc="Return a hexadecimal representation of a floating-point&#xA;number." ilk="function" name="hex" returns="str" signature="float.hex() -&gt; string" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="Returns True if the float is an integer." ilk="function" name="is_integer" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <scope classrefs="Widget" doc="Frame widget which may contain other widgets and can have a 3D border.&#xA;" ilk="class" line="2437" lineend="2453" name="Frame">
        <scope doc="Construct a frame widget with the parent MASTER." ilk="function" line="2439" lineend="2453" name="__init__" signature="Frame(master=None, cnf={}, **kw)">
          <variable citdl="_cnfmerge()" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Frame" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="tuple" line="2446" name="extra" />
        </scope>
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="FrameType">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="F.__sizeof__() -&gt; size of F in memory, in bytes" ilk="function" name="__sizeof__" signature="F.__sizeof__() -&gt; size of F in memory, in bytes" />
      </scope>
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])&#xA;Create a function object from a code object and a dictionary. The optional name string overrides the name from the code object. The optional argdefs tuple specifies the default argument values. The optional closure tuple supplies the bindings for free variables." ilk="class" name="FunctionType">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="descr.__get__(obj[, type]) -&gt; value" ilk="function" name="__get__" signature="descr.__get__(obj[, type]) -&gt; value" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <variable citdl="str" name="GROOVE" />
      <scope classrefs="object" doc="&#xA;" ilk="class" name="GeneratorType">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="return next yielded value or raise StopIteration." ilk="function" name="send" signature="send(arg) -&gt; send &apos;arg&apos; into generator," />
        <scope doc="x.next() -&gt; the next value, or raise StopIteration" ilk="function" name="next" signature="x.next() -&gt; the next value, or raise StopIteration" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="close(arg) -&gt; raise GeneratorExit inside generator." ilk="function" name="close" signature="close(arg) -&gt; raise GeneratorExit inside generator." />
        <scope doc="return next yielded value or raise StopIteration." ilk="function" name="throw" signature="throw(typ[,val[,tb]]) -&gt; raise exception in generator," />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="GetSetDescriptorType">
        <scope doc="descr.__set__(obj, value)" ilk="function" name="__set__" signature="descr.__set__(obj, value)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="descr.__get__(obj[, type]) -&gt; value" ilk="function" name="__get__" signature="descr.__get__(obj[, type]) -&gt; value" />
        <scope doc="descr.__delete__(obj)" ilk="function" name="__delete__" signature="descr.__delete__(obj)" />
      </scope>
      <scope doc="Geometry manager Grid.&#xA;Base class to use the methods grid_* in every widget." ilk="class" line="1879" lineend="1930" name="Grid">
        <scope doc="Unmap this widget." ilk="function" line="1908" name="forget" />
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" name="grid_propagate" />
        <scope doc="Configure column INDEX of a grid." ilk="function" name="grid_columnconfigure" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" name="grid_slaves" />
        <scope doc="Return a tuple of integer coordinates for the bounding box&#xA;of this widget controlled by the geometry manager grid." ilk="function" name="grid_bbox" />
        <scope doc="Return a tuple of the number of column and rows in the grid." ilk="function" line="1929" name="size" />
        <scope doc="Return a tuple of column and row which identify the cell at&#xA;which the pixel at position X and Y inside the master widget&#xA;is located." ilk="function" line="1926" name="location" />
        <scope doc="Position a widget in the parent widget in a grid." ilk="function" name="config" />
        <scope doc="Position a widget in the parent widget in a grid." ilk="function" name="configure" />
        <scope doc="Return information about the options for positioning this&#xA;widget in a grid." ilk="function" line="1912" lineend="1924" name="grid_info" returns="dict" signature="grid_info()">
          <variable citdl="self._nametowidget()" line="1920" name="value" />
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable citdl="dict" line="1917" name="dict" />
          <variable citdl="list" line="1919" name="key" />
          <variable citdl="self.tk.splitlist()" line="1915" name="words" />
        </scope>
        <scope doc="Configure column INDEX of a grid." ilk="function" line="1904" name="columnconfigure" />
        <scope doc="Unmap this widget but remember the grid options." ilk="function" line="1909" lineend="1911" name="grid_remove" signature="grid_remove()">
          <variable citdl="Grid" ilk="argument" name="self" />
        </scope>
        <scope doc="Position a widget in the parent widget in a grid." ilk="function" line="1884" lineend="1901" name="grid_configure" signature="grid_configure(cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Position a widget in the parent widget in a grid." ilk="function" line="1902" name="grid" />
        <scope doc="Return a tuple of integer coordinates for the bounding box&#xA;of this widget controlled by the geometry manager grid." ilk="function" line="1903" name="bbox" />
        <scope doc="Configure row INDEX of a grid." ilk="function" name="grid_rowconfigure" />
        <scope doc="Return information about the options for positioning this&#xA;widget in a grid." ilk="function" line="1925" name="info" />
        <scope doc="Return a tuple of the number of column and rows in the grid." ilk="function" name="grid_size" />
        <scope doc="Unmap this widget." ilk="function" line="1905" lineend="1907" name="grid_forget" signature="grid_forget()">
          <variable citdl="Grid" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" line="1930" name="slaves" />
        <scope doc="Return a tuple of column and row which identify the cell at&#xA;which the pixel at position X and Y inside the master widget&#xA;is located." ilk="function" name="grid_location" />
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" line="1927" name="propagate" />
        <scope doc="Configure row INDEX of a grid." ilk="function" line="1928" name="rowconfigure" />
      </scope>
      <variable citdl="str" name="HIDDEN" />
      <variable citdl="str" name="HORIZONTAL" />
      <variable citdl="str" name="INSERT" />
      <variable citdl="str" name="INSIDE" />
      <scope doc="Base class for images.&#xA;" ilk="class" line="3177" lineend="3235" name="Image">
        <scope ilk="function" line="3212" lineend="3213" name="__getitem__" returns="self.tk.call()" signature="__getitem__(key)">
          <variable citdl="Image" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="3203" lineend="3209" name="__del__" signature="__del__()">
          <variable citdl="Image" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the type of the imgage, e.g. &quot;photo&quot; or &quot;bitmap&quot;." ilk="function" line="3229" lineend="3231" name="type" returns="self.tk.call()" signature="type()">
          <variable citdl="Image" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="3202" lineend="3202" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="Image" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the height of the image." ilk="function" line="3225" lineend="3228" name="height" returns="getint()" signature="height()">
          <variable citdl="Image" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the width of the image." ilk="function" line="3232" lineend="3235" name="width" returns="getint()" signature="width()">
          <variable citdl="Image" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="3210" lineend="3211" name="__setitem__" signature="__setitem__(key, value)">
          <variable citdl="Image" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Configure the image." ilk="function" line="3224" name="config" />
        <scope ilk="function" line="3180" lineend="3201" name="__init__" signature="Image(imgtype, name=None, cnf={}, master=None, **kw)">
          <variable citdl="str" ilk="argument" name="name" />
          <variable citdl="Image" ilk="argument" name="self" />
          <variable citdl="_cnfmerge()" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="self._register()" line="3198" name="v" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="imgtype" />
          <variable citdl="tuple" line="3195" name="options" />
        </scope>
        <scope doc="Configure the image." ilk="function" line="3214" lineend="3223" name="configure" signature="configure(**kw)">
          <variable citdl="tuple" line="3216" name="res" />
          <variable citdl="Image" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="list" line="3219" name="k" />
          <variable citdl="self._register()" line="3221" name="v" />
        </scope>
        <variable attributes="protected" citdl="int" line="3179" name="_last_id" />
        <variable attributes="__instancevar__" citdl="master.tk" line="3186" name="tk" />
        <variable attributes="__instancevar__" citdl="list" line="3181" name="name" />
      </scope>
      <scope classrefs="object" doc="instance(class[, dict])&#xA;Create an instance without calling its __init__() method. The class must be a classic class. If present, dict must be a dictionary or None." ilk="class" name="InstanceType">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__ror__(y) &lt;==&gt; y|x" ilk="function" name="__ror__" signature="x.__ror__(y) &lt;==&gt; y|x" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" ilk="function" name="__lshift__" signature="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope doc="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" ilk="function" name="__rshift__" signature="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="x.__and__(y) &lt;==&gt; x&amp;y" ilk="function" name="__and__" signature="x.__and__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" ilk="function" name="__rrshift__" signature="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.next() -&gt; the next value, or raise StopIteration" ilk="function" name="next" signature="x.next() -&gt; the next value, or raise StopIteration" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope doc="x.__rand__(y) &lt;==&gt; y&amp;x" ilk="function" name="__rand__" signature="x.__rand__(y) &lt;==&gt; y&amp;x" />
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__imod__(y) &lt;==&gt; x%y" ilk="function" name="__imod__" signature="x.__imod__(y) &lt;==&gt; x%y" />
        <scope doc="x.__iand__(y) &lt;==&gt; x&amp;y" ilk="function" name="__iand__" signature="x.__iand__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="x.__ipow__(y) &lt;==&gt; x**y" ilk="function" name="__ipow__" signature="x.__ipow__(y) &lt;==&gt; x**y" />
        <scope doc="x.__or__(y) &lt;==&gt; x|y" ilk="function" name="__or__" signature="x.__or__(y) &lt;==&gt; x|y" />
        <scope doc="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" ilk="function" name="__rlshift__" signature="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__itruediv__(y) &lt;==&gt; x/y" ilk="function" name="__itruediv__" signature="x.__itruediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="x.__ilshift__(y) &lt;==&gt; x&lt;&lt;y" ilk="function" name="__ilshift__" signature="x.__ilshift__(y) &lt;==&gt; x&lt;&lt;y" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__ixor__(y) &lt;==&gt; x^y" ilk="function" name="__ixor__" signature="x.__ixor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__irshift__(y) &lt;==&gt; x&gt;&gt;y" ilk="function" name="__irshift__" signature="x.__irshift__(y) &lt;==&gt; x&gt;&gt;y" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__invert__() &lt;==&gt; ~x" ilk="function" name="__invert__" signature="x.__invert__() &lt;==&gt; ~x" />
        <scope doc="x.__ifloordiv__(y) &lt;==&gt; x//y" ilk="function" name="__ifloordiv__" signature="x.__ifloordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope doc="x.__idiv__(y) &lt;==&gt; x/y" ilk="function" name="__idiv__" signature="x.__idiv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x[y:z] &lt;==&gt; x[y.__index__():z.__index__()]" ilk="function" name="__index__" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__delslice__" signature="x.__delslice__(i, j) &lt;==&gt; del x[i:j]" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__hex__() &lt;==&gt; hex(x)" ilk="function" name="__hex__" signature="x.__hex__() &lt;==&gt; hex(x)" />
        <scope doc="x.__oct__() &lt;==&gt; oct(x)" ilk="function" name="__oct__" signature="x.__oct__() &lt;==&gt; oct(x)" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__rxor__(y) &lt;==&gt; y^x" ilk="function" name="__rxor__" signature="x.__rxor__(y) &lt;==&gt; y^x" />
        <scope doc="x.__isub__(y) &lt;==&gt; x-y" ilk="function" name="__isub__" signature="x.__isub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__delitem__(y) &lt;==&gt; del x[y]" ilk="function" name="__delitem__" signature="x.__delitem__(y) &lt;==&gt; del x[y]" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__imul__(y) &lt;==&gt; x*y" ilk="function" name="__imul__" signature="x.__imul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="Use  of negative indices is not supported." ilk="function" name="__setslice__" signature="x.__setslice__(i, j, y) &lt;==&gt; x[i:j]=y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="x.__setitem__(i, y) &lt;==&gt; x[i]=y" ilk="function" name="__setitem__" signature="x.__setitem__(i, y) &lt;==&gt; x[i]=y" />
        <scope doc="x.__iadd__(y) &lt;==&gt; x+y" ilk="function" name="__iadd__" signature="x.__iadd__(y) &lt;==&gt; x+y" />
        <scope doc="x.__xor__(y) &lt;==&gt; x^y" ilk="function" name="__xor__" signature="x.__xor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__ior__(y) &lt;==&gt; x|y" ilk="function" name="__ior__" signature="x.__ior__(y) &lt;==&gt; x|y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <scope classrefs="object" doc="int(x[, base]) -&gt; integer&#xA;Convert a string or number to an integer, if possible.  A floating point argument will be truncated towards zero (this does not include a string representation of a floating point number!)  When converting a string, use the optional base.  It is an error to supply a base when converting a non-string.  If base is zero, the proper base is guessed based on the string content.  If the argument is outside the integer range a long object will be returned instead." ilk="class" name="IntType">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__ror__(y) &lt;==&gt; y|x" ilk="function" name="__ror__" signature="x.__ror__(y) &lt;==&gt; y|x" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" ilk="function" name="__lshift__" signature="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="Returns self, the complex conjugate of any int." ilk="function" name="conjugate" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="x.__and__(y) &lt;==&gt; x&amp;y" ilk="function" name="__and__" signature="x.__and__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" ilk="function" name="__rrshift__" signature="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope doc="x.__rand__(y) &lt;==&gt; y&amp;x" ilk="function" name="__rand__" signature="x.__rand__(y) &lt;==&gt; y&amp;x" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="x.__or__(y) &lt;==&gt; x|y" ilk="function" name="__or__" signature="x.__or__(y) &lt;==&gt; x|y" />
        <scope doc="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" ilk="function" name="__rlshift__" signature="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="Number of bits necessary to represent self in binary." ilk="function" name="bit_length" returns="int" signature="int.bit_length() -&gt; int" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" ilk="function" name="__rshift__" signature="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__invert__() &lt;==&gt; ~x" ilk="function" name="__invert__" signature="x.__invert__() &lt;==&gt; ~x" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope ilk="function" name="__format__" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x[y:z] &lt;==&gt; x[y.__index__():z.__index__()]" ilk="function" name="__index__" />
        <scope doc="x.__hex__() &lt;==&gt; hex(x)" ilk="function" name="__hex__" signature="x.__hex__() &lt;==&gt; hex(x)" />
        <scope doc="x.__oct__() &lt;==&gt; oct(x)" ilk="function" name="__oct__" signature="x.__oct__() &lt;==&gt; oct(x)" />
        <scope doc="x.__rxor__(y) &lt;==&gt; y^x" ilk="function" name="__rxor__" signature="x.__rxor__(y) &lt;==&gt; y^x" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="Truncating an Integral returns itself." ilk="function" name="__trunc__" />
        <scope doc="x.__xor__(y) &lt;==&gt; x^y" ilk="function" name="__xor__" signature="x.__xor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <scope classrefs="Variable" doc="Value holder for integer variables.&#xA;" ilk="class" line="260" lineend="283" name="IntVar">
        <scope doc="Set the variable to value, converting booleans to integers." ilk="function" line="275" lineend="279" name="set" returns="Variable.set()" signature="set(value)">
          <variable citdl="IntVar" ilk="argument" name="self" />
          <variable citdl="int()" ilk="argument" name="value" />
        </scope>
        <scope doc="Return the value of the variable as an integer." ilk="function" line="281" lineend="283" name="get" returns="getint()" signature="get()">
          <variable citdl="IntVar" ilk="argument" name="self" />
        </scope>
        <scope doc="Construct an integer variable." ilk="function" line="263" lineend="273" name="__init__" signature="IntVar(master=None, value=None, name=None)">
          <variable citdl="IntVar" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="protected" citdl="int" line="262" name="_default" />
      </scope>
      <variable citdl="str" name="LAST" />
      <variable citdl="str" name="LEFT" />
      <scope classrefs="Widget" doc="Label widget which can display text and bitmaps.&#xA;" ilk="class" line="2455" lineend="2475" name="Label">
        <scope doc="Construct a label widget with the parent MASTER." ilk="function" line="2457" lineend="2475" name="__init__" signature="Label(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Label" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="labelframe widget.&#xA;" ilk="class" line="3467" lineend="3485" name="LabelFrame">
        <scope doc="Construct a labelframe widget with the parent MASTER." ilk="function" line="3469" lineend="3485" name="__init__" signature="LabelFrame(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="LabelFrame" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
      </scope>
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])&#xA;Create a function object from a code object and a dictionary. The optional name string overrides the name from the code object. The optional argdefs tuple specifies the default argument values. The optional closure tuple supplies the bindings for free variables." ilk="class" name="LambdaType">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="descr.__get__(obj[, type]) -&gt; value" ilk="function" name="__get__" signature="descr.__get__(obj[, type]) -&gt; value" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <scope classrefs="object" doc="list() -&gt; new empty list&#xA;list(iterable) -&gt; new list initialized from iterable&apos;s items" ilk="class" name="ListType">
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="Raises IndexError if list is empty or index is out of range." ilk="function" name="pop" signature="L.pop([index]) -&gt; item -- remove and return item at index (default last)." />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="L.remove(value)" />
        <scope doc="x.__rmul__(n) &lt;==&gt; n*x" ilk="function" name="__rmul__" signature="x.__rmul__(n) &lt;==&gt; n*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="size of L in memory, in bytes" ilk="function" name="__sizeof__" signature="L.__sizeof__()" />
        <scope ilk="function" name="__init__" />
        <scope doc="L.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="L.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="L.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__delslice__" signature="x.__delslice__(i, j) &lt;==&gt; del x[i:j]" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="append object to end" ilk="function" name="append" signature="L.append(object)" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__mul__(n) &lt;==&gt; x*n" ilk="function" name="__mul__" signature="x.__mul__(n) &lt;==&gt; x*n" />
        <scope doc="stable sort *IN PLACE*;" ilk="function" name="sort" signature="L.sort(cmp=None, key=None, reverse=False)&#xA;cmp(x, y) -&gt; -1, 0, 1" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="insert object before index" ilk="function" name="insert" signature="L.insert(index, object)" />
        <scope doc="x.__setitem__(i, y) &lt;==&gt; x[i]=y" ilk="function" name="__setitem__" signature="x.__setitem__(i, y) &lt;==&gt; x[i]=y" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="L.reverse()" />
        <scope doc="extend list by appending elements from the iterable" ilk="function" name="extend" signature="L.extend(iterable)" />
        <scope doc="x.__delitem__(y) &lt;==&gt; del x[y]" ilk="function" name="__delitem__" signature="x.__delitem__(y) &lt;==&gt; del x[y]" />
        <scope doc="return a reverse iterator over the list" ilk="function" name="__reversed__" signature="L.__reversed__()" />
        <scope doc="x.__imul__(y) &lt;==&gt; x*=y" ilk="function" name="__imul__" signature="x.__imul__(y) &lt;==&gt; x*=y" />
        <scope doc="Use  of negative indices is not supported." ilk="function" name="__setslice__" signature="x.__setslice__(i, j, y) &lt;==&gt; x[i:j]=y" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__iadd__(y) &lt;==&gt; x+=y" ilk="function" name="__iadd__" signature="x.__iadd__(y) &lt;==&gt; x+=y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="Widget XView YView" doc="Listbox widget which can display a list of strings.&#xA;" ilk="class" line="2477" lineend="2569" name="Listbox">
        <scope doc="Remember the current X, Y coordinates." ilk="function" line="2523" lineend="2525" name="scan_mark" signature="scan_mark(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Listbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Return 1 if INDEX is part of the selection." ilk="function" line="2543" lineend="2546" name="selection_includes" returns="self.tk.getboolean()" signature="selection_includes(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Listbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Activate item identified by INDEX." ilk="function" line="2488" lineend="2490" name="activate" signature="activate(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Listbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Configure resources of an ITEM." ilk="function" line="2560" lineend="2568" name="itemconfigure" returns="self._configure()" signature="itemconfigure(index, cnf=None, **kw)">
          <variable ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Listbox" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Get index of item which is nearest to y coordinate Y." ilk="function" line="2519" lineend="2522" name="nearest" returns="getint()" signature="nearest(y)">
          <variable ilk="argument" name="y" />
          <variable citdl="Listbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Adjust the view of the listbox to 10 times the difference&#xA;between X and Y and the coordinates given in scan_mark." ilk="function" line="2526" lineend="2530" name="scan_dragto" signature="scan_dragto(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Listbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the fixed end oft the selection to INDEX." ilk="function" line="2537" name="select_anchor" />
        <scope doc="Scroll such that INDEX is visible." ilk="function" line="2531" lineend="2533" name="see" signature="see(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Listbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Clear the selection from FIRST to LAST (not included)." ilk="function" line="2538" lineend="2541" name="selection_clear" signature="selection_clear(first, last=None)">
          <variable citdl="Listbox" ilk="argument" name="self" />
          <variable ilk="argument" name="last" />
          <variable ilk="argument" name="first" />
        </scope>
        <scope doc="Construct a listbox widget with the parent MASTER." ilk="function" line="2479" lineend="2487" name="__init__" signature="Listbox(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Listbox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
        <scope doc="Return the number of elements in the listbox." ilk="function" line="2553" lineend="2555" name="size" returns="getint()" signature="size()">
          <variable citdl="Listbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Return index of item identified with INDEX." ilk="function" line="2511" lineend="2515" name="index" returns="getint()" signature="index(index)">
          <variable citdl="self.tk.call()" line="2513" name="i" />
          <variable ilk="argument" name="index" />
          <variable citdl="Listbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the selection from FIRST to LAST (not included) without&#xA;changing the currently selected elements." ilk="function" line="2548" lineend="2551" name="selection_set" signature="selection_set(first, last=None)">
          <variable citdl="Listbox" ilk="argument" name="self" />
          <variable ilk="argument" name="last" />
          <variable ilk="argument" name="first" />
        </scope>
        <scope doc="Return the resource value for an ITEM and an OPTION." ilk="function" line="2556" lineend="2559" name="itemcget" returns="self.tk.call()" signature="itemcget(index, option)">
          <variable ilk="argument" name="index" />
          <variable citdl="Listbox" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
        </scope>
        <scope doc="Set the selection from FIRST to LAST (not included) without&#xA;changing the currently selected elements." ilk="function" line="2552" name="select_set" />
        <scope doc="Configure resources of an ITEM." ilk="function" line="2569" name="itemconfig" />
        <scope doc="Get list of items from FIRST to LAST (not included)." ilk="function" line="2504" lineend="2510" name="get" returns="self.tk.call()" signature="get(first, last=None)">
          <variable citdl="Listbox" ilk="argument" name="self" />
          <variable ilk="argument" name="last" />
          <variable ilk="argument" name="first" />
        </scope>
        <scope doc="Set the fixed end oft the selection to INDEX." ilk="function" line="2534" lineend="2536" name="selection_anchor" signature="selection_anchor(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Listbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle&#xA;which encloses the item identified by index in ARGS." ilk="function" line="2491" lineend="2495" name="bbox" returns="self._getints()" signature="bbox(*args)">
          <variable citdl="Listbox" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Insert ELEMENTS at INDEX." ilk="function" line="2516" lineend="2518" name="insert" signature="insert(index, *elements)">
          <variable ilk="argument" name="index" />
          <variable citdl="Listbox" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="elements" />
        </scope>
        <scope doc="Clear the selection from FIRST to LAST (not included)." ilk="function" line="2542" name="select_clear" />
        <scope doc="Return 1 if INDEX is part of the selection." ilk="function" line="2547" name="select_includes" />
        <scope doc="Return list of indices of currently selected item." ilk="function" line="2496" lineend="2500" name="curselection" returns="self.tk.splitlist()" signature="curselection()">
          <variable citdl="Listbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Delete items from FIRST to LAST (not included)." ilk="function" line="2501" lineend="2503" name="delete" signature="delete(first, last=None)">
          <variable citdl="Listbox" ilk="argument" name="self" />
          <variable ilk="argument" name="last" />
          <variable ilk="argument" name="first" />
        </scope>
      </scope>
      <scope classrefs="object" doc="long(x[, base]) -&gt; integer&#xA;Convert a string or number to a long integer, if possible.  A floating point argument will be truncated towards zero (this does not include a string representation of a floating point number!)  When converting a string, use the optional base.  It is an error to supply a base when converting a non-string." ilk="class" name="LongType">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__ror__(y) &lt;==&gt; y|x" ilk="function" name="__ror__" signature="x.__ror__(y) &lt;==&gt; y|x" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" ilk="function" name="__lshift__" signature="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="Returns self, the complex conjugate of any long." ilk="function" name="conjugate" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="x.__and__(y) &lt;==&gt; x&amp;y" ilk="function" name="__and__" signature="x.__and__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" ilk="function" name="__rrshift__" signature="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="Returns size in memory, in bytes" ilk="function" name="__sizeof__" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope doc="x.__rand__(y) &lt;==&gt; y&amp;x" ilk="function" name="__rand__" signature="x.__rand__(y) &lt;==&gt; y&amp;x" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="x.__or__(y) &lt;==&gt; x|y" ilk="function" name="__or__" signature="x.__or__(y) &lt;==&gt; x|y" />
        <scope doc="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" ilk="function" name="__rlshift__" signature="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="Number of bits necessary to represent self in binary." ilk="function" name="bit_length" returns="int" signature="long.bit_length() -&gt; int or long" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" ilk="function" name="__rshift__" signature="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__invert__() &lt;==&gt; ~x" ilk="function" name="__invert__" signature="x.__invert__() &lt;==&gt; ~x" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope ilk="function" name="__format__" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x[y:z] &lt;==&gt; x[y.__index__():z.__index__()]" ilk="function" name="__index__" />
        <scope doc="x.__hex__() &lt;==&gt; hex(x)" ilk="function" name="__hex__" signature="x.__hex__() &lt;==&gt; hex(x)" />
        <scope doc="x.__oct__() &lt;==&gt; oct(x)" ilk="function" name="__oct__" signature="x.__oct__() &lt;==&gt; oct(x)" />
        <scope doc="x.__rxor__(y) &lt;==&gt; y^x" ilk="function" name="__rxor__" signature="x.__rxor__(y) &lt;==&gt; y^x" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="Truncating an Integral returns itself." ilk="function" name="__trunc__" />
        <scope doc="x.__xor__(y) &lt;==&gt; x^y" ilk="function" name="__xor__" signature="x.__xor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <variable citdl="str" name="MITER" />
      <variable citdl="str" name="MOVETO" />
      <variable citdl="str" name="MULTIPLE" />
      <scope classrefs="object" doc="&#xA;" ilk="class" name="MemberDescriptorType">
        <scope doc="descr.__set__(obj, value)" ilk="function" name="__set__" signature="descr.__set__(obj, value)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="descr.__get__(obj[, type]) -&gt; value" ilk="function" name="__get__" signature="descr.__get__(obj[, type]) -&gt; value" />
        <scope doc="descr.__delete__(obj)" ilk="function" name="__delete__" signature="descr.__delete__(obj)" />
      </scope>
      <scope classrefs="Widget" doc="Menu widget which allows to display menu bars, pull-down menus and pop-up menus.&#xA;" ilk="class" line="2571" lineend="2690" name="Menu">
        <scope doc="Add hierarchical menu item." ilk="function" line="2613" lineend="2615" name="add_cascade" signature="add_cascade(cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Activate entry at INDEX." ilk="function" line="2606" lineend="2608" name="activate" signature="activate(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="2593" lineend="2594" name="tk_nextMenu" signature="tk_nextMenu(count)">
          <variable ilk="argument" name="count" />
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="2583" lineend="2584" name="tk_mbPost" signature="tk_mbPost()">
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope doc="Add checkbutton menu item at INDEX." ilk="function" line="2635" lineend="2637" name="insert_checkbutton" signature="insert_checkbutton(index, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="2591" lineend="2592" name="tk_getMenuButtons" returns="self.tk.call()" signature="tk_getMenuButtons()">
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope doc="Post the menu at position X,Y with entry ENTRY." ilk="function" line="2603" lineend="2605" name="tk_popup" signature="tk_popup(x, y, entry=&apos;&apos;)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="entry" />
        </scope>
        <scope doc="Unmap a menu." ilk="function" line="2684" lineend="2686" name="unpost" signature="unpost()">
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="2601" lineend="2602" name="tk_mbButtonDown" signature="tk_mbButtonDown()">
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope doc="Add command menu item at INDEX." ilk="function" line="2638" lineend="2640" name="insert_command" signature="insert_command(index, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Construct menu widget with the parent MASTER." ilk="function" line="2573" lineend="2580" name="__init__" signature="Menu(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
        <scope ilk="function" line="2587" lineend="2588" name="tk_traverseToMenu" signature="tk_traverseToMenu(char)">
          <variable ilk="argument" name="char" />
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the index of a menu item identified by INDEX." ilk="function" line="2669" lineend="2673" name="index" returns="getint()" signature="index(index)">
          <variable citdl="self.tk.call()" line="2671" name="i" />
          <variable ilk="argument" name="index" />
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope doc="Addd radio menu item." ilk="function" line="2622" lineend="2624" name="add_radiobutton" signature="add_radiobutton(cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Configure a menu item at INDEX." ilk="function" line="2668" name="entryconfig" />
        <scope doc="Add hierarchical menu item at INDEX." ilk="function" line="2632" lineend="2634" name="insert_cascade" signature="insert_cascade(index, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="2595" lineend="2596" name="tk_nextMenuEntry" signature="tk_nextMenuEntry(count)">
          <variable ilk="argument" name="count" />
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal function." ilk="function" line="2609" lineend="2612" name="add" signature="add(itemType, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable ilk="argument" name="itemType" />
        </scope>
        <scope doc="Add command menu item." ilk="function" line="2619" lineend="2621" name="add_command" signature="add_command(cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Addd radio menu item at INDEX." ilk="function" line="2641" lineend="2643" name="insert_radiobutton" signature="insert_radiobutton(index, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Return the type of the menu item at INDEX." ilk="function" line="2681" lineend="2683" name="type" returns="self.tk.call()" signature="type(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="2589" lineend="2590" name="tk_traverseWithinMenu" signature="tk_traverseWithinMenu(char)">
          <variable ilk="argument" name="char" />
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope doc="Invoke a menu item identified by INDEX and execute the&#xA;associated command." ilk="function" line="2674" lineend="2677" name="invoke" returns="self.tk.call()" signature="invoke(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the y-position of the topmost pixel of the menu item&#xA;at INDEX." ilk="function" line="2687" lineend="2690" name="yposition" returns="getint()" signature="yposition(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope doc="Add separator at INDEX." ilk="function" line="2644" lineend="2646" name="insert_separator" signature="insert_separator(index, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Display a menu at position X,Y." ilk="function" line="2678" lineend="2680" name="post" signature="post(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="2581" lineend="2582" name="tk_bindForTraversal" signature="tk_bindForTraversal()">
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope doc="Configure a menu item at INDEX." ilk="function" line="2665" lineend="2667" name="entryconfigure" returns="self._configure()" signature="entryconfigure(index, cnf=None, **kw)">
          <variable ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Return the resource value of an menu item for OPTION at&#xA;INDEX." ilk="function" line="2662" lineend="2664" name="entrycget" returns="self.tk.call()" signature="entrycget(index, option)">
          <variable ilk="argument" name="index" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
        </scope>
        <scope doc="Internal function." ilk="function" line="2628" lineend="2631" name="insert" signature="insert(index, itemType, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable ilk="argument" name="itemType" />
        </scope>
        <scope ilk="function" line="2599" lineend="2600" name="tk_firstMenu" signature="tk_firstMenu()">
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="2585" lineend="2586" name="tk_mbUnpost" signature="tk_mbUnpost()">
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope doc="Add separator." ilk="function" line="2625" lineend="2627" name="add_separator" signature="add_separator(cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="2597" lineend="2598" name="tk_invokeMenu" signature="tk_invokeMenu()">
          <variable citdl="Menu" ilk="argument" name="self" />
        </scope>
        <scope doc="Add checkbutton menu item." ilk="function" line="2616" lineend="2618" name="add_checkbutton" signature="add_checkbutton(cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Delete menu items between INDEX1 and INDEX2 (included)." ilk="function" line="2647" lineend="2661" name="delete" signature="delete(index1, index2=None)">
          <variable citdl="str()" line="2658" name="c" />
          <variable citdl="int" line="2652" name="num_index1" />
          <variable citdl="Menu" ilk="argument" name="self" />
          <variable citdl="int" line="2652" name="num_index2" />
          <variable ilk="argument" name="index2" />
          <variable ilk="argument" name="index1" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Menubutton widget, obsolete since Tk8.0.&#xA;" ilk="class" line="2692" lineend="2695" name="Menubutton">
        <scope ilk="function" line="2694" lineend="2695" name="__init__" signature="Menubutton(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Menubutton" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Message widget to display multiline text. Obsolete since Label does it too.&#xA;" ilk="class" line="2697" lineend="2700" name="Message">
        <scope ilk="function" line="2699" lineend="2700" name="__init__" signature="Message(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
      </scope>
      <scope classrefs="object" doc="instancemethod(function, instance, class)&#xA;Create an instance method object." ilk="class" name="MethodType">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="descr.__get__(obj[, type]) -&gt; value" ilk="function" name="__get__" signature="descr.__get__(obj[, type]) -&gt; value" />
      </scope>
      <scope doc="Internal class.&#xA;Base class which defines methods common for interior widgets." ilk="class" line="336" lineend="1394" name="Misc">
        <scope doc="Unbind for this widget for event SEQUENCE  the function&#xA;identified with FUNCID." ilk="function" line="986" lineend="991" name="unbind" signature="unbind(sequence, funcid=None)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="funcid" />
          <variable ilk="argument" name="sequence" />
        </scope>
        <scope doc="Return the number of bits per pixel of the root window of&#xA;the screen of this widget." ilk="function" line="805" lineend="809" name="winfo_screendepth" returns="Misc.getint()" signature="winfo_screendepth()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return x coordinate of upper left corner of this widget on&#xA;the root window." ilk="function" line="787" lineend="791" name="winfo_rootx" returns="Misc.getint()" signature="winfo_rootx()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the window path name of this widget." ilk="function" line="1216" lineend="1218" name="__str__" returns="self._w" signature="__str__()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the number of pixels of the width of the screen of&#xA;this widget in mm." ilk="function" line="820" lineend="824" name="winfo_screenmmwidth" returns="Misc.getint()" signature="winfo_screenmmwidth()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Direct input focus to this widget." ilk="function" line="431" name="focus" />
        <scope doc="Configure column INDEX of a grid." ilk="function" line="1304" lineend="1310" name="grid_columnconfigure" returns="Misc._grid_configure()" signature="grid_columnconfigure(index, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Raise this widget in the stacking order." ilk="function" line="666" lineend="668" name="tkraise" signature="tkraise(aboveThis=None)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="aboveThis" />
        </scope>
        <scope doc="Internal function." ilk="function" line="929" lineend="945" name="_bind" returns="self._register()" signature="_bind(what, sequence, func, add, needcleanup=1)">
          <variable ilk="argument" name="what" />
          <variable citdl="int" ilk="argument" name="needcleanup" />
          <variable ilk="argument" name="sequence" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="str" line="936" name="cmd" />
          <variable ilk="argument" name="add" />
          <variable ilk="argument" name="func" />
          <variable citdl="self._register()" line="934" name="funcid" />
        </scope>
        <scope doc="Internal function." ilk="function" line="1033" lineend="1039" name="_displayof" returns="tuple" signature="_displayof(displayof)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="displayof" />
        </scope>
        <scope doc="Cancel scheduling of function identified with ID." ilk="function" line="510" lineend="523" name="after_cancel" signature="after_cancel(id)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="self.tk.call()" line="516" name="data" />
          <variable ilk="argument" name="id" />
          <variable line="519" name="script" />
        </scope>
        <scope doc="Return the y coordinate of the pointer on the root window." ilk="function" line="770" lineend="773" name="winfo_pointery" returns="Misc.getint()" signature="winfo_pointery()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the x coordinate of the pointer on the root window." ilk="function" line="762" lineend="765" name="winfo_pointerx" returns="Misc.getint()" signature="winfo_pointerx()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a boolean value for Tcl boolean values true and false&#xA;given as parameter." ilk="function" line="421" lineend="423" name="getboolean" returns="self.tk.getboolean()" signature="getboolean(s)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
        <scope doc="Return the widget which has currently the focus in the&#xA;application." ilk="function" line="437" lineend="446" name="focus_get" returns="self._nametowidget()" signature="focus_get()">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="self.tk.call()" line="444" name="name" />
        </scope>
        <scope doc="The widget under mouse will get automatically focus." ilk="function" line="461" lineend="464" name="tk_focusFollowsMouse" signature="tk_focusFollowsMouse()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return true if the widget and all its higher ancestors are&#xA;mapped." ilk="function" line="843" lineend="846" name="winfo_viewable" returns="Misc.getint()" signature="winfo_viewable()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return true if this widget exists." ilk="function" line="716" lineend="719" name="winfo_exists" returns="Misc.getint()" signature="winfo_exists()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return y coordinate of upper left corner of this widget on&#xA;the root window." ilk="function" line="792" lineend="796" name="winfo_rooty" returns="Misc.getint()" signature="winfo_rooty()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Rounded integer value of winfo_fpixels." ilk="function" line="758" lineend="761" name="winfo_pixels" returns="Misc.getint()" signature="winfo_pixels(number)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="number" />
        </scope>
        <scope doc="Call FUNC once if the Tcl main loop has no event to process." ilk="function" line="503" lineend="509" name="after_idle" returns="Misc.after()" signature="after_idle(func, *args)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable ilk="argument" name="func" />
        </scope>
        <scope doc="Call the mainloop of Tk." ilk="function" line="1015" lineend="1017" name="mainloop" signature="mainloop(n=0)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="n" />
        </scope>
        <scope doc="Return a tuple of x and y coordinates of the pointer on the&#xA;root window." ilk="function" line="766" lineend="769" name="winfo_pointerxy" returns="self._getints()" signature="winfo_pointerxy()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the resource value for a KEY given as string." ilk="function" line="1207" name="__getitem__" />
        <scope doc="Return the widget which would have the focus if top level&#xA;for this widget gets the focus from the window manager." ilk="function" line="455" lineend="460" name="focus_lastfor" returns="self._nametowidget()" signature="focus_lastfor()">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="self.tk.call()" line="458" name="name" />
        </scope>
        <scope doc="Return the number of pixels of the height of the screen of&#xA;this widget in mm." ilk="function" line="815" lineend="819" name="winfo_screenmmheight" returns="Misc.getint()" signature="winfo_screenmmheight()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a list of all visuals available for the screen of&#xA;this widget." ilk="function" line="855" lineend="866" name="winfo_visualsavailable" returns="map()" signature="winfo_visualsavailable(includeids=0)">
          <variable citdl="int" ilk="argument" name="includeids" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="list" line="861" name="data" />
        </scope>
        <scope doc="Return the name of this widget." ilk="function" line="747" lineend="749" name="winfo_name" returns="self.tk.call()" signature="winfo_name()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the number of pixels of the height of the screen of&#xA;this widget in pixel." ilk="function" line="810" lineend="814" name="winfo_screenheight" returns="Misc.getint()" signature="winfo_screenheight()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the resource value for a KEY given as string." ilk="function" line="1204" lineend="1206" name="cget" returns="self.tk.call()" signature="cget(key)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Generate an event SEQUENCE." ilk="function" line="1371" lineend="1378" name="event_generate" signature="event_generate(sequence, **kw)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="tuple" line="1375" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable ilk="argument" name="sequence" />
        </scope>
        <scope doc="Return the X identifier for the visual for this widget." ilk="function" line="852" lineend="854" name="winfo_visualid" returns="self.tk.call()" signature="winfo_visualid()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a list of all existing image names." ilk="function" line="1388" lineend="1390" name="image_names" returns="self.tk.call()" signature="image_names()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal function." ilk="function" line="1270" lineend="1303" name="_grid_configure" returns="dict" signature="_grid_configure(command, index, cnf, kw)">
          <variable ilk="argument" name="index" />
          <variable citdl="list" line="1286" name="key" />
          <variable citdl="self.tk.call()" line="1281" name="res" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="getdouble()" line="1287" name="value" />
          <variable citdl="list" ilk="argument" name="cnf" />
          <variable ilk="argument" name="command" />
          <variable citdl="self.tk.splitlist()" line="1283" name="words" />
          <variable ilk="argument" name="kw" />
          <variable citdl="_options()" line="1277" name="options" />
          <variable citdl="dict" line="1284" name="dict" />
        </scope>
        <scope doc="Return the widget which is at the root coordinates ROOTX,&#xA;ROOTY." ilk="function" line="706" lineend="712" name="winfo_containing" returns="self._nametowidget()" signature="winfo_containing(rootX, rootY, displayof=0)">
          <variable citdl="self.tk.call()" line="710" name="name" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="tuple" line="708" name="args" />
          <variable citdl="int" ilk="argument" name="displayof" />
          <variable ilk="argument" name="rootY" />
          <variable ilk="argument" name="rootX" />
        </scope>
        <scope doc="Return the name of the parent of this widget." ilk="function" line="750" lineend="752" name="winfo_parent" returns="self.tk.call()" signature="winfo_parent()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the number of pixels for the given distance NUMBER&#xA;(e.g." ilk="function" line="720" lineend="724" name="winfo_fpixels" returns="Misc.getdouble()" signature="winfo_fpixels(number)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="number" />
        </scope>
        <scope doc="Bind a virtual event VIRTUAL (of the form &lt;&lt;Name&gt;&gt;) to an&#xA;event SEQUENCE such that the virtual event is triggered&#xA;whenever SEQUENCE occurs." ilk="function" line="1359" lineend="1364" name="event_add" signature="event_add(virtual, *sequences)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="tuple" line="1363" name="args" />
          <variable ilk="argument" name="virtual" />
          <variable attributes="varargs" ilk="argument" name="sequences" />
        </scope>
        <scope doc="Return None, &quot;local&quot; or &quot;global&quot; if this widget has no, a&#xA;local or a global grab." ilk="function" line="584" lineend="589" name="grab_status" returns="self.tk.call()" signature="grab_status()">
          <variable citdl="self.tk.call()" line="587" name="status" />
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Wait until the variable is modified." ilk="function" line="397" name="waitvar" />
        <scope doc="Set global grab for this widget." ilk="function" line="577" lineend="583" name="grab_set_global" signature="grab_set_global()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the number of the cells in the colormap of the screen&#xA;of this widget." ilk="function" line="800" lineend="804" name="winfo_screencells" returns="Misc.getint()" signature="winfo_screencells()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return window class name of this widget." ilk="function" line="699" lineend="701" name="winfo_class" returns="self.tk.call()" signature="winfo_class()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Unbind a virtual event VIRTUAL from SEQUENCE." ilk="function" line="1366" lineend="1369" name="event_delete" signature="event_delete(virtual, *sequences)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="tuple" line="1368" name="args" />
          <variable ilk="argument" name="virtual" />
          <variable attributes="varargs" ilk="argument" name="sequences" />
        </scope>
        <scope doc="Return the number of pixels of the width of the screen of&#xA;this widget in pixel." ilk="function" line="830" lineend="834" name="winfo_screenwidth" returns="Misc.getint()" signature="winfo_screenwidth()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" line="1221" lineend="1232" name="pack_propagate" returns="Misc._getboolean()" signature="pack_propagate(flag=_noarg_)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="flag" />
        </scope>
        <scope doc="Return a list of all available image types (e.g." ilk="function" line="1392" lineend="1394" name="image_types" returns="self.tk.call()" signature="image_types()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Useless. Not implemented in Tk." ilk="function" line="670" lineend="672" name="colormodel" returns="self.tk.call()" signature="colormodel(value=None)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Internal function." ilk="function" name="_Misc__winfo_parseitem" />
        <scope doc="Set Tcl internal variable, whether the look and feel should&#xA;adhere to Motif." ilk="function" line="363" lineend="371" name="tk_strictMotif" returns="self.tk.getboolean()" signature="tk_strictMotif(boolean=None)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="boolean" />
        </scope>
        <scope doc="Configure column INDEX of a grid." ilk="function" line="1311" name="columnconfigure" />
        <scope doc="Direct input focus to this widget." ilk="function" line="424" lineend="430" name="focus_set" signature="focus_set()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return owner of X selection." ilk="function" line="649" lineend="659" name="selection_own_get" returns="self._nametowidget()" signature="selection_own_get(**kw)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="self.tk.call()" line="657" name="name" />
        </scope>
        <scope doc="Return height of this widget." ilk="function" line="728" lineend="731" name="winfo_height" returns="Misc.getint()" signature="winfo_height()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return identifier ID for this widget." ilk="function" line="732" lineend="735" name="winfo_id" returns="self.tk.getint()" signature="winfo_id()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1208" lineend="1209" name="__setitem__" signature="__setitem__(key, value)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Direct input focus to this widget even if the application&#xA;does not have the focus." ilk="function" line="432" lineend="436" name="focus_force" signature="focus_force()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" line="1242" lineend="1248" name="place_slaves" returns="map()" signature="place_slaves()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return one of the strings directcolor, grayscale,&#xA;pseudocolor, staticcolor, staticgray, or truecolor for the&#xA;colormodel of this widget." ilk="function" line="847" lineend="851" name="winfo_visual" returns="self.tk.call()" signature="winfo_visual()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the value for an option NAME for this widget with&#xA;CLASSNAME." ilk="function" line="602" lineend="607" name="option_get" returns="self.tk.call()" signature="option_get(name, className)">
          <variable ilk="argument" name="className" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Return the x coordinate of the upper left corner of this&#xA;widget in the parent." ilk="function" line="899" lineend="903" name="winfo_x" returns="Misc.getint()" signature="winfo_x()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a tuple of the number of column and rows in the grid." ilk="function" line="1339" lineend="1342" name="grid_size" returns="Misc._getints()" signature="grid_size()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal function." ilk="function" line="1040" lineend="1065" name="_options" returns="tuple" signature="_options(cnf, kw=None)">
          <variable citdl="tuple" line="1046" name="res" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="_cnfmerge()" ilk="argument" name="cnf" />
          <variable ilk="argument" name="kw" />
          <variable citdl="str.join()" line="1051" name="v" />
          <variable citdl="list" line="1049" name="k" />
          <variable citdl="list" line="1053" name="nv" />
        </scope>
        <scope doc="Return the screen name of this widget." ilk="function" line="797" lineend="799" name="winfo_screen" returns="self.tk.call()" signature="winfo_screen()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Set grab for this widget." ilk="function" line="571" lineend="576" name="grab_set" signature="grab_set()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the next widget in the focus order which follows&#xA;widget which has currently the focus." ilk="function" line="465" lineend="476" name="tk_focusNext" returns="self._nametowidget()" signature="tk_focusNext()">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="self.tk.call()" line="474" name="name" />
        </scope>
        <scope doc="Return a tuple of the number of column and rows in the grid." ilk="function" line="1343" name="size" />
        <scope doc="Ring a display&apos;s bell." ilk="function" line="524" lineend="526" name="bell" signature="bell(displayof=0)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="displayof" />
        </scope>
        <scope doc="Enter event loop until all idle callbacks have been called." ilk="function" line="912" lineend="916" name="update_idletasks" signature="update_idletasks()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a list of all virtual events or the information about&#xA;the SEQUENCE bound to the virtual event VIRTUAL." ilk="function" line="1380" lineend="1384" name="event_info" returns="self.tk.splitlist()" signature="event_info(virtual=None)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="virtual" />
        </scope>
        <scope doc="Return the contents of the current X selection." ilk="function" line="618" lineend="626" name="selection_get" returns="self.tk.call()" signature="selection_get(**kw)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Send Tcl command CMD to different interpreter INTERP to be&#xA;executed." ilk="function" line="660" lineend="662" name="send" returns="self.tk.call()" signature="send(interp, cmd, *args)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="interp" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Return a tuple of integer coordinates for the bounding box&#xA;of this widget controlled by the geometry manager grid." ilk="function" line="1250" lineend="1267" name="grid_bbox" returns="Misc._getints()" signature="grid_bbox(column=None, row=None, col2=None, row2=None)">
          <variable ilk="argument" name="row2" />
          <variable ilk="argument" name="column" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="tuple" line="1262" name="args" />
          <variable ilk="argument" name="col2" />
          <variable ilk="argument" name="row" />
        </scope>
        <scope doc="Return the Tkinter instance of a widget identified by its&#xA;Tcl name NAME." ilk="function" line="1066" lineend="1081" name="nametowidget" returns="Misc" signature="nametowidget(name)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="name" />
          <variable citdl="w._root()" line="1070" name="w" />
        </scope>
        <scope doc="Return number of cells in the colormap for this widget." ilk="function" line="682" lineend="685" name="winfo_cells" returns="Misc.getint()" signature="winfo_cells()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a tuple of integer coordinates for the bounding box&#xA;of this widget controlled by the geometry manager grid." ilk="function" line="1269" name="bbox" />
        <scope doc="Do not use. Needed in Tk 3.6 and earlier." ilk="function" line="388" lineend="390" name="tk_menuBar" signature="tk_menuBar(*args)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Quit the Tcl interpreter. All widgets will be destroyed." ilk="function" line="1018" lineend="1020" name="quit" signature="quit()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal function." ilk="function" line="1177" lineend="1193" name="_configure" returns="tuple" signature="_configure(cmd, cnf, kw)">
          <variable citdl="_cnfmerge()" ilk="argument" name="cnf" />
          <variable citdl="self.tk.split()" line="1190" name="x" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="kw" />
        </scope>
        <scope doc="Return name of atom with identifier ID." ilk="function" line="677" lineend="681" name="winfo_atomname" returns="self.tk.call()" signature="winfo_atomname(id, displayof=0)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="tuple" line="679" name="args" />
          <variable citdl="int" ilk="argument" name="displayof" />
          <variable ilk="argument" name="id" />
        </scope>
        <scope doc="Specify a function COMMAND to call if the X selection owned&#xA;by this widget is queried by another application." ilk="function" line="627" lineend="641" name="selection_handle" signature="selection_handle(command, **kw)">
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="command" />
          <variable citdl="self._register()" line="639" name="name" />
        </scope>
        <scope doc="Internal function." ilk="function" line="1114" lineend="1170" name="_substitute" returns="tuple" signature="_substitute(*args)">
          <variable citdl="self.tk.getboolean" line="1117" name="getboolean" />
          <variable citdl="Event" line="1129" name="e" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="int" line="1119" name="getint" />
          <scope doc="Tk changed behavior in 8.4.2, returning &quot;??&quot; rather more&#xA;often." ilk="function" line="1120" lineend="1125" name="getint_event" returns="int()" signature="getint_event(s)">
            <variable ilk="argument" name="s" />
          </scope>
        </scope>
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" line="1234" lineend="1239" name="pack_slaves" returns="map()" signature="pack_slaves()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a list of all widgets which are children of this&#xA;widget." ilk="function" line="686" lineend="697" name="winfo_children" returns="list" signature="winfo_children()">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="list" line="688" name="result" />
        </scope>
        <scope doc="Return the x offset of the virtual root relative to the root&#xA;window of the screen of this widget." ilk="function" line="885" lineend="889" name="winfo_vrootx" returns="Misc.getint()" signature="winfo_vrootx()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the toplevel widget of this widget." ilk="function" line="839" lineend="842" name="winfo_toplevel" returns="self._nametowidget()" signature="winfo_toplevel()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the number of bits per pixel." ilk="function" line="713" lineend="715" name="winfo_depth" returns="Misc.getint()" signature="winfo_depth()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal function." ilk="function" name="_Misc__winfo_getint" />
        <scope doc="Return the y offset of the virtual root relative to the root&#xA;window of the screen of this widget." ilk="function" line="890" lineend="894" name="winfo_vrooty" returns="Misc.getint()" signature="winfo_vrooty()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the y coordinate of the upper left corner of this&#xA;widget in the parent." ilk="function" line="904" lineend="908" name="winfo_y" returns="Misc.getint()" signature="winfo_y()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal function." ilk="function" line="1171" lineend="1176" name="_report_exception" signature="_report_exception()">
          <variable citdl="_root()" line="1175" name="root" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="sys.exc_traceback" line="1174" name="tb" />
          <variable citdl="sys.exc_type" line="1174" name="exc" />
          <variable citdl="sys.exc_value" line="1174" name="val" />
        </scope>
        <scope doc="Return requested width of this widget." ilk="function" line="778" lineend="781" name="winfo_reqwidth" returns="Misc.getint()" signature="winfo_reqwidth()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return true if this widget is mapped." ilk="function" line="740" lineend="743" name="winfo_ismapped" returns="Misc.getint()" signature="winfo_ismapped()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Lower this widget in the stacking order." ilk="function" line="663" lineend="665" name="lower" signature="lower(belowThis=None)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="belowThis" />
        </scope>
        <scope doc="Return previous widget in the focus order." ilk="function" line="477" lineend="481" name="tk_focusPrev" returns="self._nametowidget()" signature="tk_focusPrev()">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="self.tk.call()" line="479" name="name" />
        </scope>
        <scope doc="Raise this widget in the stacking order." ilk="function" line="669" name="lift" />
        <scope doc="Internal function." ilk="function" line="353" lineend="362" name="deletecommand" signature="deletecommand(name)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Return value of Tcl variable NAME." ilk="function" line="416" lineend="418" name="getvar" returns="self.tk.getvar()" signature="getvar(name=&apos;PY_VAR&apos;)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="name" />
        </scope>
        <scope doc="Bind to all widgets at an event SEQUENCE a call to function&#xA;FUNC." ilk="function" line="992" lineend="997" name="bind_all" returns="Misc._bind()" signature="bind_all(sequence=None, func=None, add=None)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="add" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="sequence" />
        </scope>
        <scope doc="Return the width of the virtual root window associated with&#xA;this widget in pixel." ilk="function" line="879" lineend="884" name="winfo_vrootwidth" returns="Misc.getint()" signature="winfo_vrootwidth()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Wait until the variable is modified." ilk="function" line="391" lineend="396" name="wait_variable" signature="wait_variable(name=&apos;PY_VAR&apos;)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="name" />
        </scope>
        <scope doc="Release grab for this widget if currently set." ilk="function" line="568" lineend="570" name="grab_release" signature="grab_release()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Set a new color scheme for all widget elements." ilk="function" line="375" lineend="387" name="tk_setPalette" signature="tk_setPalette(*args, **kw)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Bind to widgets with bindtag CLASSNAME at event SEQUENCE a&#xA;call of function FUNC." ilk="function" line="1001" lineend="1010" name="bind_class" returns="Misc._bind()" signature="bind_class(className, sequence=None, func=None, add=None)">
          <variable ilk="argument" name="className" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="add" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="sequence" />
        </scope>
        <scope doc="Return the Tkinter instance of a widget identified by its&#xA;Tcl name NAME." ilk="function" line="1082" name="_nametowidget" />
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" line="1319" lineend="1330" name="grid_propagate" returns="Misc._getboolean()" signature="grid_propagate(flag=_noarg_)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="flag" />
        </scope>
        <scope doc="Return a newly created Tcl function." ilk="function" line="1104" name="register" />
        <scope doc="Internal function." ilk="function" line="1029" lineend="1032" name="_getboolean" returns="self.tk.getboolean()" signature="_getboolean(string)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
        </scope>
        <scope doc="Return the widget which has currently the focus on the&#xA;display where this widget is located." ilk="function" line="447" lineend="454" name="focus_displayof" returns="self._nametowidget()" signature="focus_displayof()">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="self.tk.call()" line="452" name="name" />
        </scope>
        <scope doc="Set a VALUE (second parameter) for an option PATTERN (first&#xA;parameter)." ilk="function" line="590" lineend="596" name="option_add" signature="option_add(pattern, value, priority=None)">
          <variable ilk="argument" name="priority" />
          <variable ilk="argument" name="pattern" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Clear the data in the Tk clipboard." ilk="function" line="545" lineend="551" name="clipboard_clear" signature="clipboard_clear(**kw)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1210" lineend="1211" name="__contains__" signature="__contains__(key)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Return requested height of this widget." ilk="function" line="774" lineend="777" name="winfo_reqheight" returns="Misc.getint()" signature="winfo_reqheight()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Retrieve data from the clipboard on window&apos;s display." ilk="function" line="529" lineend="543" name="clipboard_get" returns="self.tk.call()" signature="clipboard_get(**kw)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Set or get the list of bindtags for this widget." ilk="function" line="917" lineend="928" name="bindtags" returns="self.tk.splitlist()" signature="bindtags(tagList=None)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="tagList" />
        </scope>
        <scope doc="Change the color scheme to light brown as used in Tk 3.6 and&#xA;before." ilk="function" line="372" lineend="374" name="tk_bisque" signature="tk_bisque()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Clear the current X selection." ilk="function" line="614" lineend="617" name="selection_clear" signature="selection_clear(**kw)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Return widget which has currently the grab in this&#xA;application or None." ilk="function" line="562" lineend="567" name="grab_current" returns="self._nametowidget()" signature="grab_current()">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="self.tk.call()" line="565" name="name" />
        </scope>
        <scope doc="Configure resources of a widget." ilk="function" line="1195" lineend="1202" name="configure" returns="Misc._configure()" signature="configure(cnf=None, **kw)">
          <variable ilk="argument" name="cnf" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Append STRING to the Tk clipboard." ilk="function" line="552" lineend="560" name="clipboard_append" signature="clipboard_append(string, **kw)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable ilk="argument" name="string" />
        </scope>
        <scope doc="Internal function." ilk="function" line="1105" lineend="1109" name="_root" returns="w.master" signature="_root()">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="Misc" line="1107" name="w" />
        </scope>
        <scope doc="Wait until a WIDGET is destroyed." ilk="function" line="398" lineend="404" name="wait_window" signature="wait_window(window=None)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="Misc" ilk="argument" name="window" />
        </scope>
        <scope doc="Return geometry string for this widget in the form&#xA;&quot;widthxheight+X+Y&quot;." ilk="function" line="725" lineend="727" name="winfo_geometry" returns="self.tk.call()" signature="winfo_geometry()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal function." ilk="function" line="343" lineend="352" name="destroy" signature="destroy()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Become owner of X selection." ilk="function" line="642" lineend="648" name="selection_own" signature="selection_own(**kw)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Return integer which represents atom NAME." ilk="function" line="673" lineend="676" name="winfo_atom" returns="Misc.getint()" signature="winfo_atom(name, displayof=0)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="tuple" line="675" name="args" />
          <variable citdl="int" ilk="argument" name="displayof" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Configure resources of a widget." ilk="function" line="1203" name="config" />
        <scope doc="Set Tcl variable NAME to VALUE." ilk="function" line="413" lineend="415" name="setvar" signature="setvar(name=&apos;PY_VAR&apos;, value=&apos;1&apos;)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="name" />
          <variable citdl="str" ilk="argument" name="value" />
        </scope>
        <scope doc="Return tuple of decimal values for red, green, blue for&#xA;COLOR in this widget." ilk="function" line="782" lineend="786" name="winfo_rgb" returns="self._getints()" signature="winfo_rgb(color)">
          <variable ilk="argument" name="color" />
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a list of all resource names of this widget." ilk="function" line="1212" lineend="1215" name="keys" returns="map()" signature="keys()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal function." ilk="function" line="1025" lineend="1028" name="_getdoubles" returns="tuple()" signature="_getdoubles(string)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
        </scope>
        <scope doc="Call function once after given time." ilk="function" line="482" lineend="502" name="after" returns="self.tk.call()" signature="after(ms, func=None, *args)">
          <variable ilk="argument" name="ms" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable ilk="argument" name="func" />
          <scope ilk="function" line="493" lineend="500" name="callit" signature="callit()" />
          <variable citdl="self._register()" line="501" name="name" />
        </scope>
        <scope doc="Enter event loop until all pending events have been&#xA;processed by Tcl." ilk="function" line="909" lineend="911" name="update" signature="update()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return information of the X-Server of the screen of this&#xA;widget in the form &quot;XmajorRminor vendor vendorVersion&quot;." ilk="function" line="835" lineend="838" name="winfo_server" returns="self.tk.call()" signature="winfo_server()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" line="1233" name="propagate" />
        <scope doc="Wait until the visibility of a WIDGET changes (e.g." ilk="function" line="405" lineend="412" name="wait_visibility" signature="wait_visibility(window=None)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="Misc" ilk="argument" name="window" />
        </scope>
        <scope doc="Return the height of the virtual root window associated with&#xA;this widget in pixels." ilk="function" line="873" lineend="878" name="winfo_vrootheight" returns="Misc.getint()" signature="winfo_vrootheight()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Read file FILENAME into the option database." ilk="function" line="608" lineend="613" name="option_readfile" signature="option_readfile(fileName, priority=None)">
          <variable ilk="argument" name="priority" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="fileName" />
        </scope>
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" line="1344" lineend="1354" name="grid_slaves" returns="map()" signature="grid_slaves(row=None, column=None)">
          <variable ilk="argument" name="column" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="tuple" line="1347" name="args" />
          <variable ilk="argument" name="row" />
        </scope>
        <scope doc="Configure row INDEX of a grid." ilk="function" line="1331" lineend="1337" name="grid_rowconfigure" returns="Misc._grid_configure()" signature="grid_rowconfigure(index, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Return the window mananger name for this widget." ilk="function" line="744" lineend="746" name="winfo_manager" returns="self.tk.call()" signature="winfo_manager()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the width of this widget." ilk="function" line="895" lineend="898" name="winfo_width" returns="Misc.getint()" signature="winfo_width()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a newly created Tcl function." ilk="function" line="1083" lineend="1103" name="_register" returns="repr()" signature="_register(func, subst=None, needcleanup=1)">
          <variable citdl="int" ilk="argument" name="needcleanup" />
          <variable citdl="repr()" line="1089" name="name" />
          <variable line="1088" name="f" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="subst" />
          <variable citdl="func.im_func" ilk="argument" name="func" />
        </scope>
        <scope doc="Bind to this widget at event SEQUENCE a call to function&#xA;FUNC." ilk="function" line="946" lineend="985" name="bind" returns="Misc._bind()" signature="bind(sequence=None, func=None, add=None)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="add" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="sequence" />
        </scope>
        <scope doc="Unbind for all widgets for event SEQUENCE all functions." ilk="function" line="998" lineend="1000" name="unbind_all" signature="unbind_all(sequence)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="sequence" />
        </scope>
        <scope doc="Internal function." ilk="function" line="1021" lineend="1024" name="_getints" returns="tuple()" signature="_getints(string)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
        </scope>
        <scope doc="Return the pathname of the widget given by ID." ilk="function" line="753" lineend="757" name="winfo_pathname" returns="self.tk.call()" signature="winfo_pathname(id, displayof=0)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="tuple" line="755" name="args" />
          <variable citdl="int" ilk="argument" name="displayof" />
          <variable ilk="argument" name="id" />
        </scope>
        <scope doc="Unbind for a all widgets with bindtag CLASSNAME for event&#xA;SEQUENCE all functions." ilk="function" line="1011" lineend="1014" name="unbind_class" signature="unbind_class(className, sequence)">
          <variable ilk="argument" name="className" />
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="sequence" />
        </scope>
        <scope doc="Return true if at the last color request the colormap was&#xA;full." ilk="function" line="702" lineend="705" name="winfo_colormapfull" returns="self.tk.getboolean()" signature="winfo_colormapfull()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the name of all Tcl interpreters for this display." ilk="function" line="736" lineend="739" name="winfo_interps" returns="self.tk.splitlist()" signature="winfo_interps(displayof=0)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable citdl="self._displayof()" line="738" name="args" />
          <variable citdl="int" ilk="argument" name="displayof" />
        </scope>
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" line="1240" name="slaves" />
        <scope doc="Return a tuple of column and row which identify the cell at&#xA;which the pixel at position X and Y inside the master widget&#xA;is located." ilk="function" line="1312" lineend="1318" name="grid_location" returns="Misc._getints()" signature="grid_location(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return one of the strings directcolor, grayscale,&#xA;pseudocolor, staticcolor, staticgray, or truecolor for the&#xA;default colormodel of this screen." ilk="function" line="825" lineend="829" name="winfo_screenvisual" returns="self.tk.call()" signature="winfo_screenvisual()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope doc="Configure row INDEX of a grid." ilk="function" line="1338" name="rowconfigure" />
        <scope doc="Clear the option database." ilk="function" line="597" lineend="601" name="option_clear" signature="option_clear()">
          <variable citdl="Misc" ilk="argument" name="self" />
        </scope>
        <scope attributes="private" doc="Internal function." ilk="function" line="867" lineend="869" name="__winfo_parseitem" returns="list" signature="__winfo_parseitem(t)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="t" />
        </scope>
        <variable citdl="float" line="420" name="getdouble" />
        <variable attributes="protected" citdl="tuple" line="1110" name="_subst_format" />
        <scope attributes="private" doc="Internal function." ilk="function" line="870" lineend="872" name="__winfo_getint" returns="int()" signature="__winfo_getint(x)">
          <variable citdl="Misc" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
        <variable attributes="protected" citdl="list" line="342" name="_tclCommands" />
        <variable citdl="int" line="419" name="getint" />
        <variable attributes="protected" citdl="list" line="1220" name="_noarg_" />
        <variable attributes="protected" citdl="str.join()" line="1113" name="_subst_format_str" />
      </scope>
      <scope classrefs="object" doc="module(name[, doc])&#xA;Create a module object. The name must be a string; the optional doc argument can have any type." ilk="class" name="ModuleType">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope ilk="function" name="__init__" />
      </scope>
      <variable citdl="str" name="N" />
      <variable citdl="str" name="NE" />
      <variable citdl="int" name="NO" />
      <variable citdl="str" name="NONE" />
      <variable citdl="str" name="NORMAL" />
      <variable citdl="str" name="NS" />
      <variable citdl="str" name="NSEW" />
      <variable citdl="str" name="NUMERIC" />
      <variable citdl="str" name="NW" />
      <scope doc="Inhibit setting of default root window." ilk="function" line="141" lineend="151" name="NoDefaultRoot" signature="NoDefaultRoot()">
        <variable attributes="protected" citdl="int" line="148" name="_support_default_root" />
        <variable attributes="protected" line="150" name="_default_root" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="NoneType">
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="NotImplementedType">
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <variable citdl="int" name="OFF" />
      <variable citdl="int" name="ON" />
      <variable citdl="str" name="OUTSIDE" />
      <scope doc="The most base type&#xA;" ilk="class" name="ObjectType">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="helper for pickle" ilk="function" name="__reduce_ex__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="default object formatter" ilk="function" name="__format__" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Menubutton" doc="OptionMenu which allows the user to select a value from a menu.&#xA;" ilk="class" line="3140" lineend="3175" name="OptionMenu">
        <scope doc="Destroy this widget and the associated menu." ilk="function" line="3172" lineend="3175" name="destroy" signature="destroy()">
          <variable citdl="OptionMenu" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="3167" lineend="3170" name="__getitem__" returns="self.__menu" signature="__getitem__(name)">
          <variable citdl="OptionMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Construct an optionmenu widget with the parent MASTER, with&#xA;the resource textvariable set to VARIABLE, the initially&#xA;selected value VALUE, the other menu values VALUES and an&#xA;additional keyword argument command." ilk="function" line="3142" lineend="3165" name="__init__" signature="OptionMenu(master, variable, value, *values, **kwargs)">
          <variable citdl="Menu" line="3152" name="menu" />
          <variable citdl="OptionMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable citdl="kwargs.get()" line="3155" name="callback" />
          <variable attributes="varargs" ilk="argument" name="values" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
          <variable ilk="argument" name="variable" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" line="3147" name="kw" />
        </scope>
        <variable attributes="__instancevar__" citdl="menu._w" line="3153" name="menuname" />
        <variable attributes="private __instancevar__" line="3175" name="__menu" />
        <variable attributes="__instancevar__" citdl="str" line="3151" name="widgetName" />
      </scope>
      <variable citdl="str" name="PAGES" />
      <variable citdl="str" name="PIESLICE" />
      <variable citdl="str" name="PROJECTING" />
      <scope doc="Geometry manager Pack.&#xA;Base class to use the methods pack_* in every widget." ilk="class" line="1784" lineend="1827" name="Pack">
        <scope doc="Return information about the packing options for this&#xA;widget." ilk="function" line="1825" name="info" />
        <scope doc="Unmap this widget and do not use it for the packing order." ilk="function" line="1811" name="forget" />
        <scope doc="Pack a widget in the parent widget." ilk="function" name="configure" />
        <scope doc="Pack a widget in the parent widget." ilk="function" line="1788" lineend="1806" name="pack_configure" signature="pack_configure(cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable citdl="Pack" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" name="pack_slaves" />
        <scope doc="Unmap this widget and do not use it for the packing order." ilk="function" line="1808" lineend="1810" name="pack_forget" signature="pack_forget()">
          <variable citdl="Pack" ilk="argument" name="self" />
        </scope>
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" name="pack_propagate" />
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" line="1826" name="propagate" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" line="1827" name="slaves" />
        <scope doc="Return information about the packing options for this&#xA;widget." ilk="function" line="1812" lineend="1824" name="pack_info" returns="dict" signature="pack_info()">
          <variable citdl="self._nametowidget()" line="1820" name="value" />
          <variable citdl="Pack" ilk="argument" name="self" />
          <variable citdl="dict" line="1817" name="dict" />
          <variable citdl="list" line="1819" name="key" />
          <variable citdl="self.tk.splitlist()" line="1815" name="words" />
        </scope>
        <scope doc="Pack a widget in the parent widget." ilk="function" name="config" />
        <scope doc="Pack a widget in the parent widget." ilk="function" line="1807" name="pack" />
      </scope>
      <scope classrefs="Widget" doc="panedwindow widget.&#xA;" ilk="class" line="3489" lineend="3681" name="PanedWindow">
        <scope doc="Remove the proxy from the display." ilk="function" line="3547" lineend="3550" name="proxy_forget" returns="PanedWindow.proxy()" signature="proxy_forget()">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
        </scope>
        <scope doc="Returns an ordered list of the child panes." ilk="function" line="3679" lineend="3681" name="panes" returns="self.tk.call()" signature="panes()">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
        </scope>
        <scope doc="Remove the pane containing child from the panedwindow" ilk="function" line="3523" name="forget" />
        <scope doc="Place the sash given by index at the given coordinates" ilk="function" line="3583" lineend="3586" name="sash_place" returns="PanedWindow.sash()" signature="sash_place(index, x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="index" />
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
        <scope doc="Remove the pane containing child from the panedwindow" ilk="function" line="3517" lineend="3522" name="remove" signature="remove(child)">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable ilk="argument" name="child" />
        </scope>
        <scope doc="Internal function." ilk="function" line="3557" lineend="3560" name="sash" returns="tuple" signature="sash(*args)">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Add a child widget to the panedwindow in a new pane." ilk="function" line="3507" lineend="3515" name="add" signature="add(child, **kw)">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable ilk="argument" name="child" />
        </scope>
        <scope doc="Query or modify the management options for window." ilk="function" line="3596" lineend="3676" name="paneconfigure" returns="tuple" signature="paneconfigure(tagOrId, cnf=None, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable citdl="self.tk.split()" line="3672" name="x" />
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable ilk="argument" name="tagOrId" />
        </scope>
        <scope doc="Identify the panedwindow component at point x, y" ilk="function" line="3525" lineend="3535" name="identify" returns="self.tk.call()" signature="identify(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="PanedWindow" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal function." ilk="function" line="3537" lineend="3540" name="proxy" returns="tuple" signature="proxy(*args)">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Place the proxy at the given x and y coordinates." ilk="function" line="3552" lineend="3555" name="proxy_place" returns="PanedWindow.proxy()" signature="proxy_place(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="PanedWindow" ilk="argument" name="self" />
        </scope>
        <scope doc="Records x and y for the sash given by index;" ilk="function" line="3576" lineend="3581" name="sash_mark" returns="PanedWindow.sash()" signature="sash_mark(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="PanedWindow" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the x and y pair of the most recent proxy location" ilk="function" line="3542" lineend="3545" name="proxy_coord" returns="PanedWindow.proxy()" signature="proxy_coord()">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
        </scope>
        <scope doc="Query or modify the management options for window." ilk="function" line="3677" name="paneconfig" />
        <scope doc="Query a management option for window." ilk="function" line="3588" lineend="3594" name="panecget" returns="self.tk.call()" signature="panecget(child, option)">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="child" />
        </scope>
        <scope doc="Construct a panedwindow widget with the parent MASTER." ilk="function" line="3491" lineend="3505" name="__init__" signature="PanedWindow(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
        <scope doc="Return the current x and y pair for the sash given by index." ilk="function" line="3562" lineend="3574" name="sash_coord" returns="PanedWindow.sash()" signature="sash_coord(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="PanedWindow" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="Image" doc="Widget which can display colored images in GIF, PPM/PGM format.&#xA;" ilk="class" line="3237" lineend="3295" name="PhotoImage">
        <scope doc="# XXX config" ilk="function" line="3252" lineend="3253" name="__getitem__" returns="self.tk.call()" signature="__getitem__(key)">
          <variable citdl="PhotoImage" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Return the color (red, green, blue) of the pixel at X,Y." ilk="function" line="3274" lineend="3276" name="get" returns="self.tk.call()" signature="get(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="PhotoImage" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a new PhotoImage with the same image as this widget&#xA;but zoom it with X and Y." ilk="function" line="3260" lineend="3266" name="zoom" signature="zoom(x, y=&apos;&apos;)">
          <variable citdl="str" ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="PhotoImage" ilk="argument" name="self" />
          <variable citdl="" line="3263" name="destImage" />
        </scope>
        <scope doc="Write image to file FILENAME in FORMAT starting from&#xA;position FROM_COORDS." ilk="function" line="3287" lineend="3295" name="write" signature="write(filename, format=None, from_coords=None)">
          <variable ilk="argument" name="format" />
          <variable citdl="PhotoImage" ilk="argument" name="self" />
          <variable citdl="tuple" line="3290" name="args" />
          <variable ilk="argument" name="from_coords" />
          <variable ilk="argument" name="filename" />
        </scope>
        <scope doc="Return a new PhotoImage based on the same image as this&#xA;widget but use only every Xth or Yth pixel." ilk="function" line="3267" lineend="3273" name="subsample" signature="subsample(x, y=&apos;&apos;)">
          <variable citdl="str" ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="PhotoImage" ilk="argument" name="self" />
          <variable citdl="" line="3270" name="destImage" />
        </scope>
        <scope doc="Display a transparent image." ilk="function" line="3245" lineend="3247" name="blank" signature="blank()">
          <variable citdl="PhotoImage" ilk="argument" name="self" />
        </scope>
        <scope doc="Put row formatted colors to image starting from position TO,&#xA;e.g." ilk="function" line="3277" lineend="3285" name="put" signature="put(data, to=None)">
          <variable citdl="list" ilk="argument" name="to" />
          <variable citdl="PhotoImage" ilk="argument" name="self" />
          <variable citdl="tuple" line="3280" name="args" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope doc="Return a new PhotoImage with the same image as this widget." ilk="function" line="3255" lineend="3259" name="copy" signature="copy()">
          <variable citdl="PhotoImage" ilk="argument" name="self" />
          <variable citdl="" line="3257" name="destImage" />
        </scope>
        <scope doc="Return the value of OPTION." ilk="function" line="3248" lineend="3250" name="cget" returns="self.tk.call()" signature="cget(option)">
          <variable citdl="PhotoImage" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
        </scope>
        <scope doc="Create an image with NAME." ilk="function" line="3239" lineend="3244" name="__init__" signature="PhotoImage(name=None, cnf={}, master=None, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="PhotoImage" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
        </scope>
      </scope>
      <scope doc="Geometry manager Place.&#xA;Base class to use the methods place_* in every widget." ilk="class" line="1829" lineend="1877" name="Place">
        <scope doc="Return information about the placing options for this&#xA;widget." ilk="function" line="1876" name="info" />
        <scope doc="Place a widget in the parent widget." ilk="function" name="configure" />
        <scope doc="Unmap this widget." ilk="function" line="1859" lineend="1861" name="place_forget" signature="place_forget()">
          <variable citdl="Place" ilk="argument" name="self" />
        </scope>
        <scope doc="Place a widget in the parent widget." ilk="function" line="1833" lineend="1857" name="place_configure" signature="place_configure(cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable citdl="Place" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Return information about the placing options for this&#xA;widget." ilk="function" line="1863" lineend="1875" name="place_info" returns="dict" signature="place_info()">
          <variable citdl="self._nametowidget()" line="1871" name="value" />
          <variable citdl="Place" ilk="argument" name="self" />
          <variable citdl="dict" line="1868" name="dict" />
          <variable citdl="list" line="1870" name="key" />
          <variable citdl="self.tk.splitlist()" line="1866" name="words" />
        </scope>
        <scope doc="Place a widget in the parent widget." ilk="function" line="1858" name="place" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" line="1877" name="slaves" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" name="place_slaves" />
        <scope doc="Place a widget in the parent widget." ilk="function" name="config" />
        <scope doc="Unmap this widget." ilk="function" line="1862" name="forget" />
      </scope>
      <variable citdl="str" name="RADIOBUTTON" />
      <variable citdl="str" name="RAISED" />
      <variable citdl="int" line="50" name="READABLE" />
      <variable citdl="str" name="RIDGE" />
      <variable citdl="str" name="RIGHT" />
      <variable citdl="str" name="ROUND" />
      <scope classrefs="Widget" doc="Radiobutton widget which shows only one of several buttons in on-state.&#xA;" ilk="class" line="2702" lineend="2727" name="Radiobutton">
        <scope doc="Put the button in off-state." ilk="function" line="2715" lineend="2718" name="deselect" signature="deselect()">
          <variable citdl="Radiobutton" ilk="argument" name="self" />
        </scope>
        <scope doc="Toggle the button and invoke a command if given as resource." ilk="function" line="2722" lineend="2724" name="invoke" returns="self.tk.call()" signature="invoke()">
          <variable citdl="Radiobutton" ilk="argument" name="self" />
        </scope>
        <scope doc="Flash the button." ilk="function" line="2719" lineend="2721" name="flash" signature="flash()">
          <variable citdl="Radiobutton" ilk="argument" name="self" />
        </scope>
        <scope doc="Put the button in on-state." ilk="function" line="2725" lineend="2727" name="select" signature="select()">
          <variable citdl="Radiobutton" ilk="argument" name="self" />
        </scope>
        <scope doc="Construct a radiobutton widget with the parent MASTER." ilk="function" line="2704" lineend="2714" name="__init__" signature="Radiobutton(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Radiobutton" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
      </scope>
      <variable citdl="str" name="S" />
      <variable citdl="str" name="SCROLL" />
      <variable citdl="str" name="SE" />
      <variable citdl="str" name="SEL" />
      <variable citdl="str" name="SEL_FIRST" />
      <variable citdl="str" name="SEL_LAST" />
      <variable citdl="str" name="SEPARATOR" />
      <variable citdl="str" name="SINGLE" />
      <variable citdl="str" name="SOLID" />
      <variable citdl="str" name="SUNKEN" />
      <variable citdl="str" name="SW" />
      <scope classrefs="Widget" doc="Scale widget which can display a numerical scale.&#xA;" ilk="class" line="2729" lineend="2760" name="Scale">
        <scope doc="Set the value to VALUE." ilk="function" line="2748" lineend="2750" name="set" signature="set(value)">
          <variable citdl="Scale" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Get the current value as integer or float." ilk="function" line="2741" lineend="2747" name="get" returns="getint()" signature="get()">
          <variable citdl="Scale" ilk="argument" name="self" />
          <variable citdl="self.tk.call()" line="2743" name="value" />
        </scope>
        <scope doc="Return a tuple (X,Y) of the point along the centerline of&#xA;the trough that corresponds to VALUE or the current value if&#xA;None is given." ilk="function" line="2751" lineend="2756" name="coords" returns="self._getints()" signature="coords(value=None)">
          <variable citdl="Scale" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Return where the point X,Y lies." ilk="function" line="2757" lineend="2760" name="identify" returns="self.tk.call()" signature="identify(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Scale" ilk="argument" name="self" />
        </scope>
        <scope doc="Construct a scale widget with the parent MASTER." ilk="function" line="2731" lineend="2740" name="__init__" signature="Scale(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Scale" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Scrollbar widget which displays a slider at a certain position.&#xA;" ilk="class" line="2762" lineend="2798" name="Scrollbar">
        <scope doc="Display the element at INDEX with activebackground and&#xA;activerelief." ilk="function" line="2774" lineend="2777" name="activate" signature="activate(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Scrollbar" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the current fractional values (upper and lower end)&#xA;of the slider position." ilk="function" line="2791" lineend="2794" name="get" returns="self._getdoubles()" signature="get()">
          <variable citdl="Scrollbar" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the fractional values of the slider position (upper and&#xA;lower ends as value between 0 and 1)." ilk="function" line="2795" lineend="2798" name="set" signature="set(*args)">
          <variable citdl="Scrollbar" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Return the element under position X,Y as one of&#xA;&quot;arrow1&quot;,&quot;slider&quot;,&quot;arrow2&quot; or &quot;&quot;." ilk="function" line="2787" lineend="2790" name="identify" returns="self.tk.call()" signature="identify(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Scrollbar" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the fractional value which corresponds to a slider&#xA;position of X,Y." ilk="function" line="2783" lineend="2786" name="fraction" returns="getdouble()" signature="fraction(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Scrollbar" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the fractional change of the scrollbar setting if it&#xA;would be moved by DELTAX or DELTAY pixels." ilk="function" line="2778" lineend="2782" name="delta" returns="getdouble()" signature="delta(deltax, deltay)">
          <variable ilk="argument" name="deltax" />
          <variable ilk="argument" name="deltay" />
          <variable citdl="Scrollbar" ilk="argument" name="self" />
        </scope>
        <scope doc="Construct a scrollbar widget with the parent MASTER." ilk="function" line="2764" lineend="2773" name="__init__" signature="Scrollbar(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Scrollbar" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
      </scope>
      <scope classrefs="object" doc="slice([start,] stop[, step])&#xA;Create a slice object.  This is used for extended slicing (e.g. a[0:10:2])." ilk="class" name="SliceType">
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="Assuming a sequence of length len, calculate the start and&#xA;stop indices, and the stride length of the extended slice&#xA;described by S." ilk="function" name="indices" signature="S.indices(len) -&gt; (start, stop, stride)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
      </scope>
      <scope classrefs="Widget XView" doc="spinbox widget.&#xA;" ilk="class" line="3309" lineend="3463" name="Spinbox">
        <scope doc="Records x and the current view in the spinbox window;" ilk="function" line="3409" lineend="3416" name="scan_mark" returns="Spinbox.scan()" signature="scan_mark(x)">
          <variable ilk="argument" name="x" />
          <variable citdl="Spinbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Returns the numerical index corresponding to index" ilk="function" line="3384" lineend="3387" name="index" returns="self.tk.call()" signature="index(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Spinbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal function." ilk="function" line="3430" lineend="3433" name="selection" returns="tuple" signature="selection(*args)">
          <variable citdl="Spinbox" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Alter the position of the insertion cursor." ilk="function" line="3369" lineend="3375" name="icursor" returns="self.tk.call()" signature="icursor(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Spinbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Causes the specified element to be invoked" ilk="function" line="3396" lineend="3402" name="invoke" returns="self.tk.call()" signature="invoke(element)">
          <variable citdl="Spinbox" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
        </scope>
        <scope doc="Returns the spinbox&apos;s string" ilk="function" line="3365" lineend="3367" name="get" returns="self.tk.call()" signature="get()">
          <variable citdl="Spinbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal function." ilk="function" line="3404" lineend="3407" name="scan" returns="tuple" signature="scan(*args)">
          <variable citdl="Spinbox" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Compute the difference between the given x argument and the&#xA;x argument to the last scan mark command" ilk="function" line="3418" lineend="3428" name="scan_dragto" returns="Spinbox.scan()" signature="scan_dragto(x)">
          <variable ilk="argument" name="x" />
          <variable citdl="Spinbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Returns the name of the widget at position x, y" ilk="function" line="3377" lineend="3382" name="identify" returns="self.tk.call()" signature="identify(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Spinbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle&#xA;which encloses the character given by index." ilk="function" line="3340" lineend="3352" name="bbox" returns="self.tk.call()" signature="bbox(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Spinbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Sets or gets the currently selected element." ilk="function" line="3457" lineend="3463" name="selection_element" returns="Spinbox.selection()" signature="selection_element(element=None)">
          <variable citdl="Spinbox" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
        </scope>
        <scope doc="Insert string s at index" ilk="function" line="3389" lineend="3394" name="insert" returns="self.tk.call()" signature="insert(index, s)">
          <variable ilk="argument" name="index" />
          <variable citdl="Spinbox" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
        <scope doc="Locate the end of the selection nearest to the character&#xA;given by index," ilk="function" line="3435" lineend="3447" name="selection_adjust" returns="Spinbox.selection()" signature="selection_adjust(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Spinbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Clear the selection" ilk="function" line="3449" lineend="3455" name="selection_clear" returns="Spinbox.selection()" signature="selection_clear()">
          <variable citdl="Spinbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Construct a spinbox widget with the parent MASTER." ilk="function" line="3311" lineend="3338" name="__init__" signature="Spinbox(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Spinbox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
        <scope doc="Delete one or more elements of the spinbox." ilk="function" line="3354" lineend="3363" name="delete" returns="self.tk.call()" signature="delete(first, last=None)">
          <variable citdl="Spinbox" ilk="argument" name="self" />
          <variable ilk="argument" name="last" />
          <variable ilk="argument" name="first" />
        </scope>
      </scope>
      <scope classrefs="basestring" doc="str(object) -&gt; string&#xA;Return a nice string representation of the object. If the argument is a string, the return value is the same object." ilk="class" name="StringType">
        <scope doc="Return a copy of the string S converted to uppercase." ilk="function" name="upper" returns="str" signature="S.upper() -&gt; string" />
        <scope doc="Return a formatted version of S as described by format_spec." ilk="function" name="__format__" returns="str" signature="S.__format__(format_spec) -&gt; string" />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope doc="Return True if S starts with the specified prefix, False&#xA;otherwise." ilk="function" name="startswith" returns="bool" signature="S.startswith(prefix[, start[, end]]) -&gt; bool" />
        <scope doc="Return a copy of the string S with leading whitespace&#xA;removed." ilk="function" name="lstrip" returns="str" signature="S.lstrip([chars]) -&gt; string or unicode" />
        <scope doc="Return a copy of the string S with only its first character&#xA;capitalized." ilk="function" name="capitalize" returns="str" signature="S.capitalize() -&gt; string" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="Search for the separator sep in S, starting at the end of S,&#xA;and return the part before it, the separator itself, and the&#xA;part after it." ilk="function" name="rpartition" signature="S.rpartition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return a copy of string S with all occurrences of substring&#xA;old replaced by new." ilk="function" name="replace" returns="str" signature="S.replace(old, new[, count]) -&gt; string" />
        <scope doc="Return True if all characters in S are digits and there is&#xA;at least one character in S, False otherwise." ilk="function" name="isdigit" returns="bool" signature="S.isdigit() -&gt; bool" />
        <scope doc="Return True if S ends with the specified suffix, False&#xA;otherwise." ilk="function" name="endswith" returns="bool" signature="S.endswith(suffix[, start[, end]]) -&gt; bool" />
        <scope doc="Return a list of the lines in S, breaking at line&#xA;boundaries." ilk="function" name="splitlines" returns="list" signature="S.splitlines([keepends]) -&gt; list of strings" />
        <scope doc="Return a copy of S where all tab characters are expanded&#xA;using spaces." ilk="function" name="expandtabs" returns="str" signature="S.expandtabs([tabsize]) -&gt; string" />
        <scope doc="Return a copy of the string S with leading and trailing&#xA;whitespace removed." ilk="function" name="strip" returns="str" signature="S.strip([chars]) -&gt; string or unicode" />
        <scope doc="x.__rmul__(n) &lt;==&gt; n*x" ilk="function" name="__rmul__" signature="x.__rmul__(n) &lt;==&gt; n*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="Return S left-justified in a string of length width." ilk="function" name="ljust" returns="str" signature="S.ljust(width[, fillchar]) -&gt; string" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="Like S.find() but raise ValueError when the substring is not&#xA;found." ilk="function" name="index" returns="int" signature="S.index(sub [,start [,end]]) -&gt; int" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return True if all characters in S are alphanumeric and&#xA;there is at least one character in S, False otherwise." ilk="function" name="isalnum" returns="bool" signature="S.isalnum() -&gt; bool" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="Like S.rfind() but raise ValueError when the substring is&#xA;not found." ilk="function" name="rindex" returns="int" signature="S.rindex(sub [,start [,end]]) -&gt; int" />
        <scope doc="Return a list of the words in the string S, using sep as the&#xA;delimiter string, starting at the end of the string and&#xA;working to the front." ilk="function" name="rsplit" returns="list" signature="S.rsplit([sep [,maxsplit]]) -&gt; list of strings" />
        <scope doc="Return a formatted version of S, using substitutions from&#xA;args and kwargs." ilk="function" name="format" returns="str" signature="S.format(*args, **kwargs) -&gt; string" />
        <scope doc="Return the lowest index in S where substring sub is found,&#xA;such that sub is contained within s[start:end]." ilk="function" name="find" returns="int" signature="S.find(sub [,start [,end]]) -&gt; int" />
        <scope doc="Decodes S using the codec registered for encoding." ilk="function" name="decode" returns="object" signature="S.decode([encoding[,errors]]) -&gt; object" />
        <scope doc="Return True if all characters in S are alphabetic and there&#xA;is at least one character in S, False otherwise." ilk="function" name="isalpha" returns="bool" signature="S.isalpha() -&gt; bool" />
        <scope doc="Return a list of the words in the string S, using sep as the&#xA;delimiter string." ilk="function" name="split" returns="list" signature="S.split([sep [,maxsplit]]) -&gt; list of strings" />
        <scope doc="Return a copy of the string S with trailing whitespace&#xA;removed." ilk="function" name="rstrip" returns="str" signature="S.rstrip([chars]) -&gt; string or unicode" />
        <scope doc="Encodes S using the codec registered for encoding." ilk="function" name="encode" returns="object" signature="S.encode([encoding[,errors]]) -&gt; object" />
        <scope ilk="function" name="_formatter_parser" />
        <scope doc="Return a copy of the string S, where all characters&#xA;occurring in the optional argument deletechars are removed,&#xA;and the remaining characters have been mapped through the&#xA;given translation table, which must be a string of length&#xA;256." ilk="function" name="translate" returns="str" signature="S.translate(table [,deletechars]) -&gt; string" />
        <scope doc="Return True if all characters in S are whitespace and there&#xA;is at least one character in S, False otherwise." ilk="function" name="isspace" returns="bool" signature="S.isspace() -&gt; bool" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__mul__(n) &lt;==&gt; x*n" ilk="function" name="__mul__" signature="x.__mul__(n) &lt;==&gt; x*n" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="Return S right-justified in a string of length width." ilk="function" name="rjust" returns="str" signature="S.rjust(width[, fillchar]) -&gt; string" />
        <scope doc="Return a copy of the string S with uppercase characters&#xA;converted to lowercase and vice versa." ilk="function" name="swapcase" returns="str" signature="S.swapcase() -&gt; string" />
        <scope doc="Return True if all cased characters in S are lowercase and&#xA;there is at least one cased character in S, False otherwise." ilk="function" name="islower" returns="bool" signature="S.islower() -&gt; bool" />
        <scope doc="Pad a numeric string S with zeros on the left, to fill a&#xA;field of the specified width." ilk="function" name="zfill" returns="str" signature="S.zfill(width) -&gt; string" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope doc="Return the number of non-overlapping occurrences of&#xA;substring sub in string S[start:end]." ilk="function" name="count" returns="int" signature="S.count(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return a copy of the string S converted to lowercase." ilk="function" name="lower" returns="str" signature="S.lower() -&gt; string" />
        <scope doc="Return a string which is the concatenation of the strings in&#xA;the iterable." ilk="function" name="join" returns="str" signature="S.join(iterable) -&gt; string" />
        <scope doc="Return S centered in a string of length width." ilk="function" name="center" returns="str" signature="S.center(width[, fillchar]) -&gt; string" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="Search for the separator sep in S, and return the part&#xA;before it, the separator itself, and the part after it." ilk="function" name="partition" signature="S.partition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return the highest index in S where substring sub is found,&#xA;such that sub is contained within s[start:end]." ilk="function" name="rfind" returns="int" signature="S.rfind(sub [,start [,end]]) -&gt; int" />
        <scope doc="Return True if S is a titlecased string and there is at&#xA;least one character in S, i.e." ilk="function" name="istitle" returns="bool" signature="S.istitle() -&gt; bool" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope ilk="function" name="_formatter_field_name_split" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="Return a titlecased version of S, i.e." ilk="function" name="title" returns="str" signature="S.title() -&gt; string" />
        <scope doc="Return True if all cased characters in S are uppercase and&#xA;there is at least one cased character in S, False otherwise." ilk="function" name="isupper" returns="bool" signature="S.isupper() -&gt; bool" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <variable citdl="tuple" name="StringTypes" />
      <scope classrefs="Variable" doc="Value holder for strings variables.&#xA;" ilk="class" line="238" lineend="258" name="StringVar">
        <scope doc="Return value of variable as string." ilk="function" line="253" lineend="258" name="get" returns="self._tk.globalgetvar()" signature="get()">
          <variable citdl="StringVar" ilk="argument" name="self" />
          <variable citdl="self._tk.globalgetvar()" line="255" name="value" />
        </scope>
        <scope doc="Construct a string variable." ilk="function" line="241" lineend="251" name="__init__" signature="StringVar(master=None, value=None, name=None)">
          <variable citdl="StringVar" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="protected" citdl="str" line="240" name="_default" />
      </scope>
      <scope classrefs="Button" doc="&#xA;" ilk="class" line="3686" lineend="3692" name="Studbutton">
        <scope ilk="function" line="3687" lineend="3692" name="__init__" signature="Studbutton(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Studbutton" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
      </scope>
      <variable citdl="str" name="TOP" />
      <variable citdl="int" name="TRUE" />
      <scope ilk="function" line="1781" lineend="1782" name="Tcl" returns="Tk" signature="Tcl(screenName=None, baseName=None, className=&apos;Tk&apos;, useTk=0)">
        <variable citdl="str" ilk="argument" name="className" />
        <variable ilk="argument" name="baseName" />
        <variable citdl="int" ilk="argument" name="useTk" />
        <variable ilk="argument" name="screenName" />
      </scope>
      <scope classrefs="Exception" doc="&#xA;" ilk="class" line="41" name="TclError" />
      <variable citdl="float" line="48" name="TclVersion" />
      <scope classrefs="Widget XView YView" doc="Text widget which can display text in various forms.&#xA;" ilk="class" line="2802" lineend="3126" name="Text">
        <scope doc="Undoes the last edit action" ilk="function" line="2947" lineend="2956" name="edit_undo" returns="Text.edit()" signature="edit_undo()">
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Remember the current X, Y coordinates." ilk="function" line="3008" lineend="3010" name="scan_mark" signature="scan_mark(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Add tag TAGNAME to all characters between INDEX1 and index2&#xA;in ARGS." ilk="function" line="3038" lineend="3042" name="tag_add" signature="tag_add(tagName, index1, *args)">
          <variable citdl="Text" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable ilk="argument" name="index1" />
          <variable ilk="argument" name="tagName" />
        </scope>
        <scope doc="Return the contents of the widget between index1 and index2." ilk="function" line="2859" lineend="2896" name="dump" returns="list" signature="dump(index1, index2=None, command=None, **kw)">
          <variable citdl="self._register()" line="2872" name="func_name" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable citdl="list" line="2871" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="list" line="2873" name="result" />
          <variable ilk="argument" name="index2" />
          <variable citdl="Text.dump.append_triple" ilk="argument" name="command" />
          <scope ilk="function" line="2880" lineend="2881" name="append_triple" signature="append_triple(key, value, index, result=result)">
            <variable ilk="argument" name="key" />
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="index" />
            <variable citdl="list" ilk="argument" name="result" />
          </scope>
          <variable ilk="argument" name="index1" />
        </scope>
        <scope doc="Create an embedded image at INDEX." ilk="function" line="2972" lineend="2976" name="image_create" returns="self.tk.call()" signature="image_create(index, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Adjust the view of the text to 10 times the difference&#xA;between X and Y and the coordinates given in scan_mark." ilk="function" line="3011" lineend="3015" name="scan_dragto" signature="scan_dragto(x, y)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Return whether between index INDEX1 and index INDEX2 the&#xA;relation OP is satisfied." ilk="function" line="2841" lineend="2845" name="compare" returns="self.tk.getboolean()" signature="compare(index1, op, index2)">
          <variable ilk="argument" name="index2" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="index1" />
          <variable ilk="argument" name="op" />
        </scope>
        <scope ilk="function" line="2839" lineend="2840" name="tk_textResetAnchor" signature="tk_textResetAnchor(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Scroll such that the character at INDEX is visible." ilk="function" line="3035" lineend="3037" name="see" signature="see(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a list of ranges of text which have tag TAGNAME." ilk="function" line="3096" lineend="3099" name="tag_ranges" returns="self.tk.splitlist()" signature="tag_ranges(tagName)">
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="tagName" />
        </scope>
        <scope doc="Return a list of all tag names." ilk="function" line="3075" lineend="3078" name="tag_names" returns="self.tk.splitlist()" signature="tag_names(index=None)">
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the value of OPTION of an embedded image at INDEX." ilk="function" line="2962" lineend="2968" name="image_cget" returns="self.tk.call()" signature="image_cget(index, option)">
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="option" />
        </scope>
        <scope doc="Return the value of OPTION for tag TAGNAME." ilk="function" line="3057" lineend="3063" name="tag_cget" returns="self.tk.call()" signature="tag_cget(tagName, option)">
          <variable citdl="Text" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="option" />
          <variable ilk="argument" name="tagName" />
        </scope>
        <scope doc="Change the gravity of a mark MARKNAME to DIRECTION (LEFT or&#xA;RIGHT)." ilk="function" line="2987" lineend="2991" name="mark_gravity" returns="self.tk.call()" signature="mark_gravity(markName, direction=None)">
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="direction" />
          <variable ilk="argument" name="markName" />
        </scope>
        <scope doc="Configure an embedded image at INDEX." ilk="function" line="2969" lineend="2971" name="image_configure" returns="self._configure()" signature="image_configure(index, cnf=None, **kw)">
          <variable ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Clears the undo and redo stacks" ilk="function" line="2935" lineend="2938" name="edit_reset" returns="Text.edit()" signature="edit_reset()">
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Change the priority of tag TAGNAME such that it is higher&#xA;than the priority of ABOVETHIS." ilk="function" line="3091" lineend="3095" name="tag_raise" signature="tag_raise(tagName, aboveThis=None)">
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="aboveThis" />
          <variable ilk="argument" name="tagName" />
        </scope>
        <scope doc="Return the index in the form line.char for INDEX." ilk="function" line="2980" lineend="2982" name="index" returns="str()" signature="index(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Inserts a separator (boundary) on the undo stack." ilk="function" line="2940" lineend="2945" name="edit_separator" returns="Text.edit()" signature="edit_separator()">
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Redo the last undone edit" ilk="function" line="2925" lineend="2933" name="edit_redo" returns="Text.edit()" signature="edit_redo()">
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Bind to all characters with TAGNAME at event SEQUENCE a call&#xA;to function FUNC." ilk="function" line="3049" lineend="3056" name="tag_bind" returns="self._bind()" signature="tag_bind(tagName, sequence, func, add=None)">
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="add" />
          <variable ilk="argument" name="tagName" />
          <variable ilk="argument" name="sequence" />
        </scope>
        <scope ilk="function" line="2835" lineend="2836" name="tk_textBackspace" signature="tk_textBackspace()">
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Construct a text widget with the parent MASTER." ilk="function" line="2804" lineend="2827" name="__init__" signature="Text(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
        <scope ilk="function" line="2837" lineend="2838" name="tk_textIndexCloser" signature="tk_textIndexCloser(a, b, c)">
          <variable ilk="argument" name="a" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="b" />
          <variable ilk="argument" name="c" />
        </scope>
        <scope doc="Return a list of start and end index for the first sequence&#xA;of characters between INDEX1 and INDEX2 which all have tag&#xA;TAGNAME." ilk="function" line="3085" lineend="3090" name="tag_prevrange" returns="self.tk.splitlist()" signature="tag_prevrange(tagName, index1, index2=None)">
          <variable ilk="argument" name="index2" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="index1" />
          <variable ilk="argument" name="tagName" />
        </scope>
        <scope doc="Return tuple (x,y,width,height,baseline) giving the bounding&#xA;box and baseline position of the visible part of the line&#xA;containing the character at INDEX." ilk="function" line="2854" lineend="2858" name="dlineinfo" returns="self._getints()" signature="dlineinfo(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the name of the next mark after INDEX." ilk="function" line="3002" lineend="3004" name="mark_next" returns="self.tk.call()" signature="mark_next(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the text from INDEX1 to INDEX2 (not included)." ilk="function" line="2958" lineend="2960" name="get" returns="self.tk.call()" signature="get(index1, index2=None)">
          <variable ilk="argument" name="index2" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="index1" />
        </scope>
        <scope doc="Return the name of the previous mark before INDEX." ilk="function" line="3005" lineend="3007" name="mark_previous" returns="self.tk.call()" signature="mark_previous(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Configure a tag TAGNAME." ilk="function" line="3064" lineend="3066" name="tag_configure" returns="self._configure()" signature="tag_configure(tagName, cnf=None, **kw)">
          <variable ilk="argument" name="cnf" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable ilk="argument" name="tagName" />
        </scope>
        <scope doc="Remove tag TAGNAME from all characters between INDEX1 and&#xA;INDEX2." ilk="function" line="3100" lineend="3103" name="tag_remove" signature="tag_remove(tagName, index1, index2=None)">
          <variable ilk="argument" name="index2" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="index1" />
          <variable ilk="argument" name="tagName" />
        </scope>
        <scope doc="Return all mark names." ilk="function" line="2992" lineend="2995" name="mark_names" returns="self.tk.splitlist()" signature="mark_names()">
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a tuple of (x,y,width,height) which gives the&#xA;bounding box of the visible part of the character at the&#xA;index in ARGS." ilk="function" line="2828" lineend="2832" name="bbox" returns="self._getints()" signature="bbox(*args)">
          <variable citdl="Text" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Configure an embedded window at INDEX." ilk="function" line="3114" name="window_config" />
        <scope doc="Return a list of start and end index for the first sequence&#xA;of characters between INDEX1 and INDEX2 which all have tag&#xA;TAGNAME." ilk="function" line="3079" lineend="3084" name="tag_nextrange" returns="self.tk.splitlist()" signature="tag_nextrange(tagName, index1, index2=None)">
          <variable ilk="argument" name="index2" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="index1" />
          <variable ilk="argument" name="tagName" />
        </scope>
        <scope doc="Configure an embedded window at INDEX." ilk="function" line="3111" lineend="3113" name="window_configure" returns="self._configure()" signature="window_configure(index, cnf=None, **kw)">
          <variable ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Create a window at INDEX." ilk="function" line="3115" lineend="3119" name="window_create" signature="window_create(index, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Unbind for all characters with TAGNAME for event SEQUENCE&#xA;the function identified with FUNCID." ilk="function" line="3043" lineend="3048" name="tag_unbind" signature="tag_unbind(tagName, sequence, funcid=None)">
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="funcid" />
          <variable ilk="argument" name="tagName" />
          <variable ilk="argument" name="sequence" />
        </scope>
        <scope doc="Insert CHARS before the characters at INDEX." ilk="function" line="2983" lineend="2986" name="insert" signature="insert(index, chars, *args)">
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable ilk="argument" name="chars" />
        </scope>
        <scope doc="Search PATTERN beginning from INDEX until STOPINDEX." ilk="function" line="3016" lineend="3034" name="search" returns="str()" signature="search(pattern, index, stopindex=None, forwards=None, backwards=None, exact=None, regexp=None, nocase=None, count=None, elide=None)">
          <variable ilk="argument" name="count" />
          <variable ilk="argument" name="index" />
          <variable ilk="argument" name="backwards" />
          <variable ilk="argument" name="stopindex" />
          <variable ilk="argument" name="forwards" />
          <variable ilk="argument" name="pattern" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable citdl="list" line="3022" name="args" />
          <variable ilk="argument" name="elide" />
          <variable ilk="argument" name="nocase" />
          <variable ilk="argument" name="regexp" />
          <variable ilk="argument" name="exact" />
        </scope>
        <scope ilk="function" line="2833" lineend="2834" name="tk_textSelectTo" signature="tk_textSelectTo(index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Set mark MARKNAME before the character at INDEX." ilk="function" line="2996" lineend="2998" name="mark_set" signature="mark_set(markName, index)">
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="markName" />
        </scope>
        <scope doc="Internal method" ilk="function" line="2899" lineend="2912" name="edit" returns="self.tk.call()" signature="edit(*args)">
          <variable citdl="Text" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Delete all tags in TAGNAMES." ilk="function" line="3068" lineend="3070" name="tag_delete" signature="tag_delete(*tagNames)">
          <variable attributes="varargs" ilk="argument" name="tagNames" />
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Return all names of embedded images in this widget." ilk="function" line="2977" lineend="2979" name="image_names" returns="self.tk.call()" signature="image_names()">
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Change the priority of tag TAGNAME such that it is lower&#xA;than the priority of BELOWTHIS." ilk="function" line="3071" lineend="3074" name="tag_lower" signature="tag_lower(tagName, belowThis=None)">
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="belowThis" />
          <variable ilk="argument" name="tagName" />
        </scope>
        <scope doc="Configure a tag TAGNAME." ilk="function" line="3067" name="tag_config" />
        <scope doc="Return the value of OPTION of an embedded window at INDEX." ilk="function" line="3104" lineend="3110" name="window_cget" returns="self.tk.call()" signature="window_cget(index, option)">
          <variable ilk="argument" name="index" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="option" />
        </scope>
        <scope doc="Get or Set the modified flag" ilk="function" line="2914" lineend="2923" name="edit_modified" returns="Text.edit()" signature="edit_modified(arg=None)">
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope doc="Turn on the internal consistency checks of the B-Tree inside&#xA;the text widget according to BOOLEAN." ilk="function" line="2846" lineend="2850" name="debug" returns="self.tk.getboolean()" signature="debug(boolean=None)">
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="boolean" />
        </scope>
        <scope doc="Delete all marks in MARKNAMES." ilk="function" line="2999" lineend="3001" name="mark_unset" signature="mark_unset(*markNames)">
          <variable attributes="varargs" ilk="argument" name="markNames" />
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Obsolete function, use see." ilk="function" line="3124" lineend="3126" name="yview_pickplace" signature="yview_pickplace(*what)">
          <variable citdl="Text" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="what" />
        </scope>
        <scope doc="Return all names of embedded windows in this widget." ilk="function" line="3120" lineend="3123" name="window_names" returns="self.tk.splitlist()" signature="window_names()">
          <variable citdl="Text" ilk="argument" name="self" />
        </scope>
        <scope doc="Delete the characters between INDEX1 and INDEX2 (not&#xA;included)." ilk="function" line="2851" lineend="2853" name="delete" signature="delete(index1, index2=None)">
          <variable ilk="argument" name="index2" />
          <variable citdl="Text" ilk="argument" name="self" />
          <variable ilk="argument" name="index1" />
        </scope>
      </scope>
      <scope classrefs="Misc Wm" doc="Toplevel widget of Tk which represents mostly the main window&#xA;of an application. It has an associated Tcl interpreter." ilk="class" line="1661" lineend="1764" name="Tk">
        <scope doc="Internal function." ilk="function" line="1733" lineend="1753" name="readprofile" signature="readprofile(baseName, className)">
          <variable citdl="os.path.join()" line="1742" name="base_tcl" />
          <variable citdl="os.path.join()" line="1743" name="base_py" />
          <variable citdl="Tk" ilk="argument" name="self" />
          <variable citdl="os.path.join()" line="1741" name="class_py" />
          <variable ilk="argument" name="className" />
          <variable citdl="os.path.join()" line="1740" name="class_tcl" />
          <variable citdl="os.curdir" line="1738" name="home" />
          <variable ilk="argument" name="baseName" />
          <variable citdl="dict" line="1744" name="dir" />
        </scope>
        <scope ilk="function" line="1693" lineend="1723" name="_loadtk" signature="_loadtk()">
          <variable attributes="protected" citdl="Tk" line="1722" name="_default_root" />
          <variable citdl="Tk" ilk="argument" name="self" />
          <variable citdl="str()" line="1703" name="tcl_version" />
          <variable citdl="self.tk.getvar()" line="1697" name="tk_version" />
        </scope>
        <scope ilk="function" line="1689" lineend="1692" name="loadtk" signature="loadtk()">
          <variable citdl="Tk" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal function. It reports exception on sys.stderr." ilk="function" line="1754" lineend="1761" name="report_callback_exception" signature="report_callback_exception(exc, val, tb)">
          <variable citdl="Tk" ilk="argument" name="self" />
          <variable ilk="argument" name="tb" />
          <variable ilk="argument" name="exc" />
          <variable ilk="argument" name="val" />
        </scope>
        <scope doc="Delegate attribute access to the interpreter object" ilk="function" line="1762" lineend="1764" name="__getattr__" returns="getattr()" signature="__getattr__(attr)">
          <variable citdl="Tk" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
        </scope>
        <scope doc="Destroy this and all descendants widgets." ilk="function" line="1724" lineend="1732" name="destroy" signature="destroy()">
          <variable attributes="protected" line="1732" name="_default_root" />
          <variable citdl="Tk" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a new Toplevel widget on screen SCREENNAME." ilk="function" line="1665" lineend="1688" name="__init__" signature="Tk(screenName=None, baseName=None, className=&apos;Tk&apos;, useTk=1, sync=0, use=None)">
          <variable ilk="argument" name="use" />
          <variable citdl="Tk" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="useTk" />
          <variable citdl="int" ilk="argument" name="sync" />
          <variable citdl="str" ilk="argument" name="className" />
          <variable line="1681" name="ext" />
          <variable citdl="int" line="1684" name="interactive" />
          <variable citdl="os.path.basename()" ilk="argument" name="baseName" />
          <variable ilk="argument" name="screenName" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="1674" name="_tkloaded" />
        <variable attributes="protected" citdl="str" line="1664" name="_w" />
        <variable attributes="protected __instancevar__" citdl="list" line="1716" name="_tclCommands" />
        <variable attributes="__instancevar__" line="1672" name="master" />
        <variable attributes="__instancevar__" citdl="_tkinter.create()" line="1677" name="tk" />
        <variable attributes="__instancevar__" citdl="dict" line="1673" name="children" />
      </scope>
      <variable citdl="float" line="47" name="TkVersion" />
      <scope classrefs="BaseWidget Wm" doc="Toplevel widget, e.g. for dialogs.&#xA;" ilk="class" line="1995" lineend="2021" name="Toplevel">
        <scope doc="Construct a toplevel widget with the parent MASTER." ilk="function" line="1997" lineend="2021" name="__init__" signature="Toplevel(master=None, cnf={}, **kw)">
          <variable citdl="str" line="2013" name="opt" />
          <variable line="2010" name="val" />
          <variable citdl="tuple" line="2006" name="extra" />
          <variable citdl="Toplevel" ilk="argument" name="self" />
          <variable citdl="_cnfmerge()" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable ilk="argument" name="master" />
          <variable citdl="self._root()" line="2018" name="root" />
        </scope>
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="TracebackType" />
      <scope classrefs="Button" doc="&#xA;" ilk="class" line="3694" lineend="3702" name="Tributton">
        <scope ilk="function" line="3695" lineend="3702" name="__init__" signature="Tributton(master=None, cnf={}, **kw)">
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Tributton" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
      </scope>
      <scope classrefs="object" doc="tuple() -&gt; empty tuple&#xA;tuple(iterable) -&gt; tuple initialized from iterable&apos;s items  If the argument is a tuple, the return value is the same object." ilk="class" name="TupleType">
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__rmul__(n) &lt;==&gt; n*x" ilk="function" name="__rmul__" signature="x.__rmul__(n) &lt;==&gt; n*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="size of T in memory, in bytes" ilk="function" name="__sizeof__" signature="T.__sizeof__()" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="T.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__mul__(n) &lt;==&gt; x*n" ilk="function" name="__mul__" signature="x.__mul__(n) &lt;==&gt; x*n" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="T.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="T.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="object" doc="type(object) -&gt; the object&apos;s type&#xA;type(name, bases, dict) -&gt; a new type" ilk="class" name="TypeType">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope ilk="function" name="__init__" />
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="__subclasses__() -&gt; list of immediate subclasses" ilk="function" name="__subclasses__" returns="list" signature="__subclasses__() -&gt; list of immediate subclasses" />
        <scope doc="return a type&apos;s method resolution order" ilk="function" name="mro" returns="list" signature="mro() -&gt; list" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="check if an object is an instance" ilk="function" name="__instancecheck__" returns="bool" signature="__instancecheck__() -&gt; bool" />
        <scope doc="check if a class is a subclass" ilk="function" name="__subclasscheck__" returns="bool" signature="__subclasscheck__() -&gt; bool" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <variable citdl="str" name="UNDERLINE" />
      <variable citdl="str" name="UNITS" />
      <scope classrefs="object" doc="instancemethod(function, instance, class)&#xA;Create an instance method object." ilk="class" name="UnboundMethodType">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="descr.__get__(obj[, type]) -&gt; value" ilk="function" name="__get__" signature="descr.__get__(obj[, type]) -&gt; value" />
      </scope>
      <scope classrefs="basestring" doc="unicode(string [, encoding[, errors]]) -&gt; object&#xA;Create a new Unicode object from the given encoded string. encoding defaults to the current default string encoding. errors can be &apos;strict&apos;, &apos;replace&apos; or &apos;ignore&apos; and defaults to &apos;strict&apos;." ilk="class" name="UnicodeType">
        <scope doc="Return a copy of S converted to uppercase." ilk="function" name="upper" returns="unicode" signature="S.upper() -&gt; unicode" />
        <scope doc="Search for the separator sep in S, and return the part&#xA;before it, the separator itself, and the part after it." ilk="function" name="partition" signature="S.partition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope doc="Return True if S starts with the specified prefix, False&#xA;otherwise." ilk="function" name="startswith" returns="bool" signature="S.startswith(prefix[, start[, end]]) -&gt; bool" />
        <scope doc="Return a copy of the string S with leading whitespace&#xA;removed." ilk="function" name="lstrip" returns="unicode" signature="S.lstrip([chars]) -&gt; unicode" />
        <scope doc="Return a capitalized version of S, i.e." ilk="function" name="capitalize" returns="unicode" signature="S.capitalize() -&gt; unicode" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="Search for the separator sep in S, starting at the end of S,&#xA;and return the part before it, the separator itself, and the&#xA;part after it." ilk="function" name="rpartition" signature="S.rpartition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return a copy of S with all occurrences of substring old&#xA;replaced by new." ilk="function" name="replace" returns="unicode" signature="S.replace(old, new[, count]) -&gt; unicode" />
        <scope doc="Return True if all characters in S are digits and there is&#xA;at least one character in S, False otherwise." ilk="function" name="isdigit" returns="bool" signature="S.isdigit() -&gt; bool" />
        <scope doc="Return True if S ends with the specified suffix, False&#xA;otherwise." ilk="function" name="endswith" returns="bool" signature="S.endswith(suffix[, start[, end]]) -&gt; bool" />
        <scope doc="Return a list of the lines in S, breaking at line&#xA;boundaries." ilk="function" name="splitlines" returns="list" signature="S.splitlines([keepends]) -&gt; list of strings" />
        <scope doc="Return the highest index in S where substring sub is found,&#xA;such that sub is contained within s[start:end]." ilk="function" name="rfind" returns="int" signature="S.rfind(sub [,start [,end]]) -&gt; int" />
        <scope doc="Return a copy of the string S with leading and trailing&#xA;whitespace removed." ilk="function" name="strip" returns="unicode" signature="S.strip([chars]) -&gt; unicode" />
        <scope doc="x.__rmul__(n) &lt;==&gt; n*x" ilk="function" name="__rmul__" signature="x.__rmul__(n) &lt;==&gt; n*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="Return S left-justified in a Unicode string of length width." ilk="function" name="ljust" returns="int" signature="S.ljust(width[, fillchar]) -&gt; int" />
        <scope doc="Return True if there are only decimal characters in S, False&#xA;otherwise." ilk="function" name="isdecimal" returns="bool" signature="S.isdecimal() -&gt; bool" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="Like S.find() but raise ValueError when the substring is not&#xA;found." ilk="function" name="index" returns="int" signature="S.index(sub [,start [,end]]) -&gt; int" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return True if all characters in S are alphanumeric and&#xA;there is at least one character in S, False otherwise." ilk="function" name="isalnum" returns="bool" signature="S.isalnum() -&gt; bool" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="Like S.rfind() but raise ValueError when the substring is&#xA;not found." ilk="function" name="rindex" returns="int" signature="S.rindex(sub [,start [,end]]) -&gt; int" />
        <scope doc="Return a list of the words in S, using sep as the delimiter&#xA;string, starting at the end of the string and working to the&#xA;front." ilk="function" name="rsplit" returns="list" signature="S.rsplit([sep [,maxsplit]]) -&gt; list of strings" />
        <scope doc="Return a formatted version of S, using substitutions from&#xA;args and kwargs." ilk="function" name="format" returns="unicode" signature="S.format(*args, **kwargs) -&gt; unicode" />
        <scope doc="Return the lowest index in S where substring sub is found,&#xA;such that sub is contained within s[start:end]." ilk="function" name="find" returns="int" signature="S.find(sub [,start [,end]]) -&gt; int" />
        <scope doc="Decodes S using the codec registered for encoding." ilk="function" name="decode" returns="str" signature="S.decode([encoding[,errors]]) -&gt; string or unicode" />
        <scope doc="Return True if all characters in S are alphabetic and there&#xA;is at least one character in S, False otherwise." ilk="function" name="isalpha" returns="bool" signature="S.isalpha() -&gt; bool" />
        <scope doc="Return a list of the words in S, using sep as the delimiter&#xA;string." ilk="function" name="split" returns="list" signature="S.split([sep [,maxsplit]]) -&gt; list of strings" />
        <scope doc="Return a copy of the string S with trailing whitespace&#xA;removed." ilk="function" name="rstrip" returns="unicode" signature="S.rstrip([chars]) -&gt; unicode" />
        <scope doc="Encodes S using the codec registered for encoding." ilk="function" name="encode" returns="str" signature="S.encode([encoding[,errors]]) -&gt; string or unicode" />
        <scope ilk="function" name="_formatter_parser" />
        <scope doc="Return a copy of the string S, where all characters have&#xA;been mapped through the given translation table, which must&#xA;be a mapping of Unicode ordinals to Unicode ordinals,&#xA;Unicode strings or None." ilk="function" name="translate" returns="unicode" signature="S.translate(table) -&gt; unicode" />
        <scope doc="Return True if S is a titlecased string and there is at&#xA;least one character in S, i.e." ilk="function" name="istitle" returns="bool" signature="S.istitle() -&gt; bool" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__mul__(n) &lt;==&gt; x*n" ilk="function" name="__mul__" signature="x.__mul__(n) &lt;==&gt; x*n" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="Return S right-justified in a Unicode string of length&#xA;width." ilk="function" name="rjust" returns="unicode" signature="S.rjust(width[, fillchar]) -&gt; unicode" />
        <scope doc="Return a copy of S with uppercase characters converted to&#xA;lowercase and vice versa." ilk="function" name="swapcase" returns="unicode" signature="S.swapcase() -&gt; unicode" />
        <scope doc="Return a formatted version of S as described by format_spec." ilk="function" name="__format__" returns="unicode" signature="S.__format__(format_spec) -&gt; unicode" />
        <scope doc="Return True if all cased characters in S are lowercase and&#xA;there is at least one cased character in S, False otherwise." ilk="function" name="islower" returns="bool" signature="S.islower() -&gt; bool" />
        <scope doc="Pad a numeric string S with zeros on the left, to fill a&#xA;field of the specified width." ilk="function" name="zfill" returns="unicode" signature="S.zfill(width) -&gt; unicode" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope doc="Return the number of non-overlapping occurrences of&#xA;substring sub in Unicode string S[start:end]." ilk="function" name="count" returns="int" signature="S.count(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return a copy of the string S converted to lowercase." ilk="function" name="lower" returns="unicode" signature="S.lower() -&gt; unicode" />
        <scope doc="Return True if there are only numeric characters in S, False&#xA;otherwise." ilk="function" name="isnumeric" returns="bool" signature="S.isnumeric() -&gt; bool" />
        <scope doc="Return a string which is the concatenation of the strings in&#xA;the iterable." ilk="function" name="join" returns="unicode" signature="S.join(iterable) -&gt; unicode" />
        <scope doc="Return S centered in a Unicode string of length width." ilk="function" name="center" returns="unicode" signature="S.center(width[, fillchar]) -&gt; unicode" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="Return a titlecased version of S, i.e." ilk="function" name="title" returns="unicode" signature="S.title() -&gt; unicode" />
        <scope doc="Return a copy of S where all tab characters are expanded&#xA;using spaces." ilk="function" name="expandtabs" returns="unicode" signature="S.expandtabs([tabsize]) -&gt; unicode" />
        <scope doc="Return True if all characters in S are whitespace and there&#xA;is at least one character in S, False otherwise." ilk="function" name="isspace" returns="bool" signature="S.isspace() -&gt; bool" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope ilk="function" name="_formatter_field_name_split" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="Return True if all cased characters in S are uppercase and&#xA;there is at least one cased character in S, False otherwise." ilk="function" name="isupper" returns="bool" signature="S.isupper() -&gt; bool" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <variable citdl="str" name="VERTICAL" />
      <scope doc="Class to define value holders for e.g. buttons.&#xA;Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations that constrain the type of the value returned from get()." ilk="class" line="162" lineend="236" name="Variable">
        <scope doc="Delete the trace callback for a variable." ilk="function" line="217" lineend="224" name="trace_vdelete" signature="trace_vdelete(mode, cbname)">
          <variable ilk="argument" name="cbname" />
          <variable citdl="Variable" ilk="argument" name="self" />
          <variable ilk="argument" name="mode" />
        </scope>
        <scope doc="Set the variable to VALUE." ilk="function" line="198" lineend="200" name="set" returns="self._tk.globalsetvar()" signature="set(value)">
          <variable citdl="Variable" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Define a trace callback for the variable." ilk="function" line="216" name="trace" />
        <scope doc="Return value of variable." ilk="function" line="201" lineend="203" name="get" returns="self._tk.globalgetvar()" signature="get()">
          <variable citdl="Variable" ilk="argument" name="self" />
        </scope>
        <scope doc="Unset the variable in Tcl." ilk="function" line="192" lineend="194" name="__del__" signature="__del__()">
          <variable citdl="Variable" ilk="argument" name="self" />
        </scope>
        <scope doc="Comparison for equality (==)." ilk="function" line="229" lineend="236" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="Variable" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="Return the name of the variable in Tcl." ilk="function" line="195" lineend="197" name="__str__" returns="repr()" signature="__str__()">
          <variable citdl="Variable" ilk="argument" name="self" />
        </scope>
        <scope doc="Return all trace callback information." ilk="function" line="225" lineend="228" name="trace_vinfo" returns="map()" signature="trace_vinfo()">
          <variable citdl="Variable" ilk="argument" name="self" />
        </scope>
        <scope doc="Define a trace callback for the variable." ilk="function" line="204" lineend="215" name="trace_variable" returns="self._master._register()" signature="trace_variable(mode, callback)">
          <variable citdl="self._master._register()" line="213" name="cbname" />
          <variable ilk="argument" name="callback" />
          <variable citdl="Variable" ilk="argument" name="self" />
          <variable ilk="argument" name="mode" />
        </scope>
        <scope doc="Construct a variable" ilk="function" line="168" lineend="191" name="__init__" signature="Variable(master=None, value=None, name=None)">
          <variable citdl="Variable" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="protected" citdl="str" line="167" name="_default" />
        <variable attributes="protected __instancevar__" citdl="master.tk" line="182" name="_tk" />
        <variable attributes="protected __instancevar__" line="181" name="_master" />
        <variable attributes="protected __instancevar__" citdl="repr()" line="184" name="_name" />
      </scope>
      <variable citdl="str" name="W" />
      <variable citdl="str" name="WORD" />
      <variable citdl="int" line="51" name="WRITABLE" />
      <scope classrefs="BaseWidget Pack Place Grid Form" doc="Internal class.&#xA;Base class for a widget which can be positioned with the geometry managers Pack, Place or Grid." ilk="class" line="1988" lineend="1993" name="Widget" />
      <scope doc="Provides functions for the communication with the window manager.&#xA;" ilk="class" line="1459" lineend="1658" name="Wm">
        <scope doc="Instruct the window manager to ignore this widget if BOOLEAN&#xA;is given with 1." ilk="function" line="1605" lineend="1610" name="wm_overrideredirect" returns="self._getboolean()" signature="wm_overrideredirect(boolean=None)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="boolean" />
        </scope>
        <scope doc="Bind function FUNC to command NAME for this widget." ilk="function" line="1628" name="protocol" />
        <scope doc="Set the name of the icon for this widget." ilk="function" line="1579" name="iconname" />
        <scope doc="Set mask for the icon bitmap of this widget." ilk="function" line="1574" name="iconmask" />
        <scope doc="Set widget PATHNAME to be displayed instead of icon." ilk="function" line="1586" lineend="1589" name="wm_iconwindow" returns="self.tk.call()" signature="wm_iconwindow(pathName=None)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="pathName" />
        </scope>
        <scope doc="Return identifier for decorative frame of this widget if&#xA;present." ilk="function" line="1530" name="frame" />
        <scope doc="Set the group leader widgets for related widgets to&#xA;PATHNAME." ilk="function" line="1547" lineend="1550" name="wm_group" returns="self.tk.call()" signature="wm_group(pathName=None)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="pathName" />
        </scope>
        <scope doc="Instruct the window manager to set the aspect ratio&#xA;(width/height) of this widget to be between&#xA;MINNUMER/MINDENOM and MAXNUMER/MAXDENOM." ilk="function" line="1462" lineend="1471" name="wm_aspect" returns="self._getints()" signature="wm_aspect(minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)">
          <variable ilk="argument" name="minNumer" />
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="maxNumer" />
          <variable ilk="argument" name="maxDenom" />
          <variable ilk="argument" name="minDenom" />
        </scope>
        <scope doc="Set min WIDTH and HEIGHT for this widget." ilk="function" line="1604" name="minsize" />
        <scope doc="Set widget PATHNAME to be displayed instead of icon." ilk="function" line="1590" name="iconwindow" />
        <scope doc="Instruct the window manager that this widget is transient&#xA;with regard to widget MASTER." ilk="function" line="1649" lineend="1652" name="wm_transient" returns="self.tk.call()" signature="wm_transient(master=None)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
        <scope doc="Display widget as icon." ilk="function" line="1569" name="iconify" />
        <scope doc="Set the position of the icon of this widget to X and Y." ilk="function" line="1585" name="iconposition" />
        <scope doc="Instruct the window manager to set the aspect ratio&#xA;(width/height) of this widget to be between&#xA;MINNUMER/MINDENOM and MAXNUMER/MAXDENOM." ilk="function" line="1472" name="aspect" />
        <scope doc="Instruct the window manager that the position of this widget&#xA;shall be defined by the user if WHO is &quot;user&quot;, and by its&#xA;own policy if WHO is &quot;program&quot;." ilk="function" line="1617" name="positionfrom" />
        <scope doc="Instruct the window manager that the size of this widget&#xA;shall be defined by the user if WHO is &quot;user&quot;, and by its&#xA;own policy if WHO is &quot;program&quot;." ilk="function" line="1639" name="sizefrom" />
        <scope doc="Set the group leader widgets for related widgets to&#xA;PATHNAME." ilk="function" line="1551" name="group" />
        <scope doc="Withdraw this widget from the screen such that it is&#xA;unmapped and forgotten by the window manager." ilk="function" line="1654" lineend="1657" name="wm_withdraw" returns="self.tk.call()" signature="wm_withdraw()">
          <variable citdl="Wm" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the title of this widget." ilk="function" line="1648" name="title" />
        <scope doc="Instruct the window manager to ignore this widget if BOOLEAN&#xA;is given with 1." ilk="function" line="1611" name="overrideredirect" />
        <scope doc="Store list of window names (WLIST) into WM_COLORMAPWINDOWS&#xA;property of this widget." ilk="function" line="1509" name="colormapwindows" />
        <scope doc="Query or set the state of this widget as one of normal,&#xA;icon, iconic (see wm_iconwindow), withdrawn, or zoomed&#xA;(Windows only)." ilk="function" line="1644" name="state" />
        <scope doc="Set the position of the icon of this widget to X and Y." ilk="function" line="1580" lineend="1584" name="wm_iconposition" returns="self._getints()" signature="wm_iconposition(x=None, y=None)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="x" />
          <variable citdl="Wm" ilk="argument" name="self" />
        </scope>
        <scope doc="Set max WIDTH and HEIGHT for this widget." ilk="function" line="1597" name="maxsize" />
        <scope doc="Store list of window names (WLIST) into WM_COLORMAPWINDOWS&#xA;property of this widget." ilk="function" line="1501" lineend="1508" name="wm_colormapwindows" returns="map()" signature="wm_colormapwindows(*wlist)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable citdl="tuple" line="1507" name="args" />
          <variable attributes="varargs" citdl="tuple" ilk="argument" name="wlist" />
        </scope>
        <scope doc="Display widget as icon." ilk="function" line="1566" lineend="1568" name="wm_iconify" returns="self.tk.call()" signature="wm_iconify()">
          <variable citdl="Wm" ilk="argument" name="self" />
        </scope>
        <scope doc="Instruct the window manager that this widget is transient&#xA;with regard to widget MASTER." ilk="function" line="1653" name="transient" />
        <scope doc="Store VALUE in WM_COMMAND property." ilk="function" line="1510" lineend="1514" name="wm_command" returns="self.tk.call()" signature="wm_command(value=None)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Return identifier for decorative frame of this widget if&#xA;present." ilk="function" line="1527" lineend="1529" name="wm_frame" returns="self.tk.call()" signature="wm_frame()">
          <variable citdl="Wm" ilk="argument" name="self" />
        </scope>
        <scope doc="Set min WIDTH and HEIGHT for this widget." ilk="function" line="1598" lineend="1603" name="wm_minsize" returns="self._getints()" signature="wm_minsize(width=None, height=None)">
          <variable ilk="argument" name="width" />
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="height" />
        </scope>
        <scope doc="Set max WIDTH and HEIGHT for this widget." ilk="function" line="1591" lineend="1596" name="wm_maxsize" returns="self._getints()" signature="wm_maxsize(width=None, height=None)">
          <variable ilk="argument" name="width" />
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="height" />
        </scope>
        <scope doc="Store NAME in WM_CLIENT_MACHINE property of this widget." ilk="function" line="1496" lineend="1499" name="wm_client" returns="self.tk.call()" signature="wm_client(name=None)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Instruct the window manager whether this width can be&#xA;resized in WIDTH or HEIGHT." ilk="function" line="1633" name="resizable" />
        <scope doc="Instruct the window manager whether this width can be&#xA;resized in WIDTH or HEIGHT." ilk="function" line="1629" lineend="1632" name="wm_resizable" returns="self.tk.call()" signature="wm_resizable(width=None, height=None)">
          <variable ilk="argument" name="width" />
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="height" />
        </scope>
        <scope doc="Set focus model to MODEL." ilk="function" line="1526" name="focusmodel" />
        <scope doc="Set geometry to NEWGEOMETRY of the form =widthxheight+x+y." ilk="function" line="1531" lineend="1534" name="wm_geometry" returns="self.tk.call()" signature="wm_geometry(newGeometry=None)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="newGeometry" />
        </scope>
        <scope doc="Set mask for the icon bitmap of this widget." ilk="function" line="1570" lineend="1573" name="wm_iconmask" returns="self.tk.call()" signature="wm_iconmask(bitmap=None)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="bitmap" />
        </scope>
        <scope doc="Instruct the window manager that this widget shall only be&#xA;resized on grid boundaries." ilk="function" line="1546" name="grid" />
        <scope doc="Set bitmap for the iconified widget to BITMAP." ilk="function" line="1552" lineend="1564" name="wm_iconbitmap" returns="self.tk.call()" signature="wm_iconbitmap(bitmap=None, default=None)">
          <variable ilk="argument" name="default" />
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="bitmap" />
        </scope>
        <scope doc="Deiconify this widget." ilk="function" line="1516" lineend="1519" name="wm_deiconify" returns="self.tk.call()" signature="wm_deiconify()">
          <variable citdl="Wm" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the title of this widget." ilk="function" line="1645" lineend="1647" name="wm_title" returns="self.tk.call()" signature="wm_title(string=None)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
        </scope>
        <scope doc="Set bitmap for the iconified widget to BITMAP." ilk="function" line="1565" name="iconbitmap" />
        <scope doc="Set focus model to MODEL." ilk="function" line="1521" lineend="1525" name="wm_focusmodel" returns="self.tk.call()" signature="wm_focusmodel(model=None)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="model" />
        </scope>
        <scope doc="Bind function FUNC to command NAME for this widget." ilk="function" line="1618" lineend="1627" name="wm_protocol" returns="self.tk.call()" signature="wm_protocol(name=None, func=None)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable citdl="self._register()" line="1623" name="command" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="func" />
        </scope>
        <scope doc="Instruct the window manager that the position of this widget&#xA;shall be defined by the user if WHO is &quot;user&quot;, and by its&#xA;own policy if WHO is &quot;program&quot;." ilk="function" line="1612" lineend="1616" name="wm_positionfrom" returns="self.tk.call()" signature="wm_positionfrom(who=None)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="who" />
        </scope>
        <scope doc="Instruct the window manager that the size of this widget&#xA;shall be defined by the user if WHO is &quot;user&quot;, and by its&#xA;own policy if WHO is &quot;program&quot;." ilk="function" line="1634" lineend="1638" name="wm_sizefrom" returns="self.tk.call()" signature="wm_sizefrom(who=None)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="who" />
        </scope>
        <scope doc="Set geometry to NEWGEOMETRY of the form =widthxheight+x+y." ilk="function" line="1535" name="geometry" />
        <scope doc="Query or set the state of this widget as one of normal,&#xA;icon, iconic (see wm_iconwindow), withdrawn, or zoomed&#xA;(Windows only)." ilk="function" line="1640" lineend="1643" name="wm_state" returns="self.tk.call()" signature="wm_state(newstate=None)">
          <variable ilk="argument" name="newstate" />
          <variable citdl="Wm" ilk="argument" name="self" />
        </scope>
        <scope doc="Instruct the window manager that this widget shall only be&#xA;resized on grid boundaries." ilk="function" line="1536" lineend="1545" name="wm_grid" returns="self._getints()" signature="wm_grid(baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)">
          <variable ilk="argument" name="widthInc" />
          <variable ilk="argument" name="baseHeight" />
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable ilk="argument" name="baseWidth" />
          <variable ilk="argument" name="heightInc" />
        </scope>
        <scope doc="Deiconify this widget." ilk="function" line="1520" name="deiconify" />
        <scope doc="This subcommand returns or sets platform specific attributes" ilk="function" line="1474" lineend="1493" name="wm_attributes" returns="self.tk.call()" signature="wm_attributes(*args)">
          <variable citdl="Wm" ilk="argument" name="self" />
          <variable attributes="varargs" citdl="tuple" ilk="argument" name="args" />
        </scope>
        <scope doc="Store NAME in WM_CLIENT_MACHINE property of this widget." ilk="function" line="1500" name="client" />
        <scope doc="Store VALUE in WM_COMMAND property." ilk="function" line="1515" name="command" />
        <scope doc="Withdraw this widget from the screen such that it is&#xA;unmapped and forgotten by the window manager." ilk="function" line="1658" name="withdraw" />
        <scope doc="This subcommand returns or sets platform specific attributes" ilk="function" line="1494" name="attributes" />
        <scope doc="Set the name of the icon for this widget." ilk="function" line="1575" lineend="1578" name="wm_iconname" returns="self.tk.call()" signature="wm_iconname(newName=None)">
          <variable ilk="argument" name="newName" />
          <variable citdl="Wm" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="str" name="X" />
      <scope classrefs="object" doc="xrange([start,] stop[, step]) -&gt; xrange object&#xA;Like range(), but instead of returning a list, returns an object that generates the numbers in the range on demand.  For looping, this is slightly faster than range() and more memory efficient." ilk="class" name="XRangeType">
        <scope doc="Returns a reverse iterator." ilk="function" name="__reversed__" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope ilk="function" name="__reduce__" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
      </scope>
      <scope doc="Mix-in class for querying and changing the horizontal position&#xA;of a widget&apos;s window." ilk="class" line="1417" lineend="1435" name="XView">
        <scope doc="Adjusts the view in the window so that FRACTION of the total&#xA;width of the canvas is off-screen to the left." ilk="function" line="1427" lineend="1430" name="xview_moveto" signature="xview_moveto(fraction)">
          <variable citdl="XView" ilk="argument" name="self" />
          <variable ilk="argument" name="fraction" />
        </scope>
        <scope doc="Query and change the horizontal position of the view." ilk="function" line="1421" lineend="1425" name="xview" returns="self._getdoubles()" signature="xview(*args)">
          <variable citdl="self.tk.call()" line="1423" name="res" />
          <variable citdl="XView" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Shift the x-view according to NUMBER which is measured in&#xA;&quot;units&quot; or &quot;pages&quot; (WHAT)." ilk="function" line="1432" lineend="1435" name="xview_scroll" signature="xview_scroll(number, what)">
          <variable citdl="XView" ilk="argument" name="self" />
          <variable ilk="argument" name="number" />
          <variable ilk="argument" name="what" />
        </scope>
      </scope>
      <variable citdl="str" name="Y" />
      <variable citdl="int" name="YES" />
      <scope doc="Mix-in class for querying and changing the vertical position&#xA;of a widget&apos;s window." ilk="class" line="1438" lineend="1456" name="YView">
        <scope doc="Adjusts the view in the window so that FRACTION of the total&#xA;height of the canvas is off-screen to the top." ilk="function" line="1448" lineend="1451" name="yview_moveto" signature="yview_moveto(fraction)">
          <variable citdl="YView" ilk="argument" name="self" />
          <variable ilk="argument" name="fraction" />
        </scope>
        <scope doc="Shift the y-view according to NUMBER which is measured in&#xA;&quot;units&quot; or &quot;pages&quot; (WHAT)." ilk="function" line="1453" lineend="1456" name="yview_scroll" signature="yview_scroll(number, what)">
          <variable citdl="YView" ilk="argument" name="self" />
          <variable ilk="argument" name="number" />
          <variable ilk="argument" name="what" />
        </scope>
        <scope doc="Query and change the vertical position of the view." ilk="function" line="1442" lineend="1446" name="yview" returns="self._getdoubles()" signature="yview(*args)">
          <variable citdl="self.tk.call()" line="1444" name="res" />
          <variable citdl="YView" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
      </scope>
      <variable citdl="str" line="33" name="__version__" />
      <import module="_tkinter" />
      <scope doc="Convert true and false to integer values 1 and 0." ilk="function" line="331" lineend="333" name="getboolean" returns="_default_root.tk.getboolean()" signature="getboolean(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope classrefs="object" doc="float(x) -&gt; floating point number&#xA;Convert a string or number to a floating point number, if possible." ilk="class" line="329" name="getdouble">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="Returns self, the complex conjugate of any float." ilk="function" name="conjugate" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="Returns the Integral closest to x between 0 and x." ilk="function" name="__trunc__" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="Returns a pair of integers, whose ratio is exactly equal to&#xA;the original float and with a positive denominator." ilk="function" name="as_integer_ratio" signature="float.as_integer_ratio() -&gt; (int, int)" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Formats the float according to format_spec." ilk="function" name="__format__" returns="str" signature="float.__format__(format_spec) -&gt; string" />
        <scope doc="Return a hexadecimal representation of a floating-point&#xA;number." ilk="function" name="hex" returns="str" signature="float.hex() -&gt; string" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="Returns True if the float is an integer." ilk="function" name="is_integer" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <scope classrefs="object" doc="int(x[, base]) -&gt; integer&#xA;Convert a string or number to an integer, if possible.  A floating point argument will be truncated towards zero (this does not include a string representation of a floating point number!)  When converting a string, use the optional base.  It is an error to supply a base when converting a non-string.  If base is zero, the proper base is guessed based on the string content.  If the argument is outside the integer range a long object will be returned instead." ilk="class" line="327" name="getint">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__ror__(y) &lt;==&gt; y|x" ilk="function" name="__ror__" signature="x.__ror__(y) &lt;==&gt; y|x" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" ilk="function" name="__lshift__" signature="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="Returns self, the complex conjugate of any int." ilk="function" name="conjugate" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="x.__and__(y) &lt;==&gt; x&amp;y" ilk="function" name="__and__" signature="x.__and__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" ilk="function" name="__rrshift__" signature="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope doc="x.__rand__(y) &lt;==&gt; y&amp;x" ilk="function" name="__rand__" signature="x.__rand__(y) &lt;==&gt; y&amp;x" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="x.__or__(y) &lt;==&gt; x|y" ilk="function" name="__or__" signature="x.__or__(y) &lt;==&gt; x|y" />
        <scope doc="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" ilk="function" name="__rlshift__" signature="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="Number of bits necessary to represent self in binary." ilk="function" name="bit_length" returns="int" signature="int.bit_length() -&gt; int" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" ilk="function" name="__rshift__" signature="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__invert__() &lt;==&gt; ~x" ilk="function" name="__invert__" signature="x.__invert__() &lt;==&gt; ~x" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope ilk="function" name="__format__" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x[y:z] &lt;==&gt; x[y.__index__():z.__index__()]" ilk="function" name="__index__" />
        <scope doc="x.__hex__() &lt;==&gt; hex(x)" ilk="function" name="__hex__" signature="x.__hex__() &lt;==&gt; hex(x)" />
        <scope doc="x.__oct__() &lt;==&gt; oct(x)" ilk="function" name="__oct__" signature="x.__oct__() &lt;==&gt; oct(x)" />
        <scope doc="x.__rxor__(y) &lt;==&gt; y^x" ilk="function" name="__rxor__" signature="x.__rxor__(y) &lt;==&gt; y^x" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="Truncating an Integral returns itself." ilk="function" name="__trunc__" />
        <scope doc="x.__xor__(y) &lt;==&gt; x^y" ilk="function" name="__xor__" signature="x.__xor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <scope ilk="function" line="3305" lineend="3305" name="image_names" returns="_default_root.tk.call()" signature="image_names()" />
      <scope ilk="function" line="3306" lineend="3306" name="image_types" returns="_default_root.tk.call()" signature="image_types()" />
      <scope doc="Run the main loop of Tcl." ilk="function" line="323" lineend="325" name="mainloop" signature="mainloop(n=0)">
        <variable citdl="int" ilk="argument" name="n" />
      </scope>
      <import module="sys" />
      <import module="tkinter" />
      <variable citdl="int" line="45" name="wantobjects" />
      <variable attributes="protected __hidden__" line="139" name="_default_root" />
      <variable attributes="protected __hidden__" citdl="function" doc="Internal function." line="74" name="_cnfmerge" />
      <variable attributes="__hidden__" citdl="_tkinter" line="40" name="tkinter" />
      <variable attributes="protected __hidden__" citdl="int" line="138" name="_support_default_root" />
      <scope attributes="protected __hidden__" ilk="function" line="3707" lineend="3730" name="_test" signature="_test()">
        <variable citdl="Tk" line="3708" name="root" />
        <variable citdl="float()" line="3709" name="text" />
        <variable citdl="Label" line="3716" name="label" />
        <variable citdl="Button" line="3718" name="test" />
        <variable citdl="Button" line="3723" name="quit" />
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="161" name="_varnum" />
      <variable attributes="protected __hidden__" citdl="function" doc="Internal function." line="61" name="_flatten" />
      <scope attributes="protected __hidden__" doc="Internal class. It wraps the command in the widget&#xA;OptionMenu." ilk="class" line="3129" lineend="3138" name="_setit">
        <scope attributes="__ctor__" ilk="function" line="3131" lineend="3134" name="__init__" signature="_setit(var, value, callback=None)">
          <variable citdl="_setit" ilk="argument" name="self" />
          <variable ilk="argument" name="var" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="callback" />
        </scope>
        <variable attributes="private __instancevar__" line="3132" name="__value" />
        <variable attributes="private __instancevar__" line="3133" name="__var" />
        <variable attributes="private __instancevar__" line="3134" name="__callback" />
        <scope ilk="function" line="3135" lineend="3138" name="__call__" signature="__call__(*args)">
          <variable citdl="_setit" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Internal function. Calling it will throw the exception&#xA;SystemExit." ilk="function" line="157" lineend="159" name="_exit" signature="_exit(code=&apos;0&apos;)">
        <variable citdl="str" ilk="argument" name="code" />
      </scope>
      <scope attributes="protected __hidden__" doc="Internal function." ilk="function" line="153" lineend="155" name="_tkerror" signature="_tkerror(err)">
        <variable ilk="argument" name="err" />
      </scope>
    </scope>
    