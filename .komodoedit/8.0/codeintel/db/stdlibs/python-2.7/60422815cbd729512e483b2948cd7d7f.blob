<scope doc="This module defines the data structures used to represent a grammar.&#xA;These are a bit arcane because they are derived from the data structures used by Python&apos;s &apos;pgen&apos; parser generator.  There&apos;s also a table here mapping operators to their names in the token module; the Python tokenize module reports all operators as the fallback token code OP, but the parser needs the actual token code." ilk="blob" lang="Python" name="lib2to3.pgen2.grammar">
      <scope classrefs="object" doc="Pgen parsing tables tables conversion class.&#xA;Once initialized, this class supplies the grammar tables for the parsing engine implemented by parse.py.  The parsing engine accesses the instance variables directly.  The class here does not provide initialization of the tables; several subclasses exist to do this (see the conv and pgen modules).  The load() method reads the tables from a pickle file, which is much faster than the other ways offered by subclasses.  The pickle file is written by calling dump() (after loading the grammar tables using a subclass).  The report() method prints a readable" ilk="class" line="22" lineend="126" name="Grammar">
        <scope doc="Load the grammar tables from a pickle file." ilk="function" line="93" lineend="98" name="load" signature="load(filename)">
          <variable citdl="Grammar" ilk="argument" name="self" />
          <variable citdl="open()" line="95" name="f" />
          <variable citdl="pickle.load()" line="96" name="d" />
          <variable ilk="argument" name="filename" />
        </scope>
        <scope doc="Dump the grammar tables to a pickle file." ilk="function" line="87" lineend="91" name="dump" signature="dump(filename)">
          <variable citdl="Grammar" ilk="argument" name="self" />
          <variable citdl="open()" line="89" name="f" />
          <variable ilk="argument" name="filename" />
        </scope>
        <scope doc="Dump the grammar tables to standard output, for debugging." ilk="function" line="113" lineend="126" name="report" signature="report()">
          <variable citdl="Grammar" ilk="argument" name="self" />
        </scope>
        <scope doc="Copy the grammar." ilk="function" line="100" lineend="111" name="copy" returns="self.__class__()" signature="copy()">
          <variable citdl="self.__class__()" line="104" name="new" />
          <variable citdl="Grammar" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="76" lineend="85" name="__init__" signature="Grammar()">
          <variable citdl="Grammar" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="83" name="tokens" />
        <variable attributes="__instancevar__" citdl="dict" line="84" name="symbol2label" />
        <variable attributes="__instancevar__" citdl="dict" line="80" name="dfas" />
        <variable attributes="__instancevar__" citdl="list" line="81" name="labels" />
        <variable attributes="__instancevar__" citdl="list" line="79" name="states" />
        <variable attributes="__instancevar__" citdl="int" line="85" name="start" />
        <variable attributes="__instancevar__" citdl="dict" line="78" name="number2symbol" />
        <variable attributes="__instancevar__" citdl="dict" line="82" name="keywords" />
        <variable attributes="__instancevar__" citdl="dict" line="77" name="symbol2number" />
      </scope>
      <variable citdl="str" name="line" />
      <variable citdl="str" line="183" name="name" />
      <variable citdl="str" line="183" name="op" />
      <variable citdl="dict" line="180" name="opmap" />
      <variable citdl="str" line="131" name="opmap_raw" />
      <import module="pickle" />
      <import module="token" />
      <import module="tokenize" />
    </scope>
    