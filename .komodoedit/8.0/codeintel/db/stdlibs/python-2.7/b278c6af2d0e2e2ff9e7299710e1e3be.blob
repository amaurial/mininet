<scope doc="A command-line program that runs a set of tests; this is primarily&#xA;for making test modules conveniently executable." ilk="blob" lang="Python" name="unittest.main">
      <variable citdl="str" name="USAGE" />
      <scope classrefs="object" doc="type(object) -&gt; the object&apos;s type&#xA;type(name, bases, dict) -&gt; a new type" ilk="class" name="__class__">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope ilk="function" name="__init__" />
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="__subclasses__() -&gt; list of immediate subclasses" ilk="function" name="__subclasses__" returns="list" signature="__subclasses__() -&gt; list of immediate subclasses" />
        <scope doc="return a type&apos;s method resolution order" ilk="function" name="mro" returns="list" signature="mro() -&gt; list" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="check if an object is an instance" ilk="function" name="__instancecheck__" returns="bool" signature="__instancecheck__() -&gt; bool" />
        <scope doc="check if a class is a subclass" ilk="function" name="__subclasscheck__" returns="bool" signature="__subclasscheck__() -&gt; bool" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
      <variable citdl="dictproxy" name="__dict__" />
      <scope doc="default object formatter" ilk="function" name="__format__" />
      <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
      <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
      <scope ilk="function" name="__init__" />
      <scope doc="T.__new__(S, ...) -&gt; a new object with type S, a subtype of T" ilk="function" name="__new__" signature="T.__new__(S, ...) -&gt; a new object with type S, a subtype of T" />
      <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      <scope doc="helper for pickle" ilk="function" name="__reduce_ex__" />
      <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
      <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
      <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
      <scope doc="Abstract classes can override this to customize&#xA;issubclass()." ilk="function" name="__subclasshook__" />
      <variable citdl="getset_descriptor" name="__weakref__" />
      <variable citdl="NoneType" name="buffer" />
      <variable citdl="NoneType" name="catchbreak" />
      <scope ilk="function" name="createTests" />
      <variable citdl="NoneType" name="failfast" />
      <scope ilk="function" name="parseArgs" />
      <variable citdl="NoneType" name="progName" />
      <scope ilk="function" name="runTests" />
      <scope ilk="function" name="usageExit" />
      <variable attributes="__hidden__" citdl="str" line="16" name="USAGE_AS_MAIN" />
      <variable attributes="private __hidden__" citdl="True" line="10" name="__unittest" />
      <scope attributes="__hidden__" classrefs="object" doc="A command-line program that runs a set of tests; this is&#xA;primarily for making test modules conveniently executable." ilk="class" line="63" lineend="231" name="TestProgram">
        <variable citdl="str" line="67" name="USAGE" />
        <variable citdl="options.failfast" line="70" name="failfast" />
        <scope attributes="__ctor__" ilk="function" line="72" lineend="95" name="__init__" signature="TestProgram(module=&apos;__main__&apos;, defaultTest=None, argv=None, testRunner=None, testLoader=loader.defaultTestLoader, exit=True, verbosity=1, failfast=None, catchbreak=None, buffer=None)">
          <variable citdl="TestProgram" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="module" />
          <variable ilk="argument" name="defaultTest" />
          <variable citdl="sys.argv" ilk="argument" name="argv" />
          <variable ilk="argument" name="testRunner" />
          <variable citdl="loader.defaultTestLoader" ilk="argument" name="testLoader" />
          <variable citdl="True" ilk="argument" name="exit" />
          <variable citdl="int" ilk="argument" name="verbosity" />
          <variable ilk="argument" name="failfast" />
          <variable ilk="argument" name="catchbreak" />
          <variable ilk="argument" name="buffer" />
        </scope>
        <variable attributes="__instancevar__" citdl="getattr()" line="77" name="module" />
        <variable attributes="__instancevar__" citdl="True" line="85" name="exit" />
        <variable attributes="__instancevar__" citdl="True" line="87" name="catchbreak" />
        <variable attributes="__instancevar__" citdl="int" line="88" name="verbosity" />
        <variable attributes="__instancevar__" citdl="options.buffer" line="89" name="buffer" />
        <variable attributes="__instancevar__" line="90" name="defaultTest" />
        <variable attributes="__instancevar__" citdl="runner.TextTestRunner" line="91" name="testRunner" />
        <variable attributes="__instancevar__" citdl="loader.defaultTestLoader" line="92" name="testLoader" />
        <variable attributes="__instancevar__" citdl="os.path.basename()" line="93" name="progName" />
        <scope ilk="function" line="97" lineend="109" name="usageExit" signature="usageExit(msg=None)">
          <variable citdl="TestProgram" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="dict" line="100" name="usage" />
        </scope>
        <scope ilk="function" line="111" lineend="151" name="parseArgs" signature="parseArgs(argv)">
          <import line="116" module="getopt" />
          <variable citdl="TestProgram" ilk="argument" name="self" />
          <variable ilk="argument" name="argv" />
          <variable citdl="list" line="117" name="long_opts" />
          <variable line="119" name="args" />
          <variable line="119" name="options" />
        </scope>
        <variable attributes="__instancevar__" citdl="tuple" line="141" name="testNames" />
        <scope ilk="function" line="153" lineend="158" name="createTests" signature="createTests()">
          <variable citdl="TestProgram" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.testLoader.loadTestsFromNames()" line="155" name="test" />
        <scope attributes="protected" ilk="function" line="160" lineend="211" name="_do_discovery" signature="_do_discovery(argv, Loader=loader.TestLoader)">
          <import line="163" module="optparse" />
          <variable citdl="TestProgram" ilk="argument" name="self" />
          <variable ilk="argument" name="argv" />
          <variable citdl="loader.TestLoader" ilk="argument" name="Loader" />
          <variable citdl="optparse.OptionParser()" line="164" name="parser" />
          <variable line="187" name="args" />
          <variable line="187" name="options" />
          <variable citdl="options.start" line="206" name="start_dir" />
          <variable citdl="options.pattern" line="207" name="pattern" />
          <variable citdl="options.top" line="208" name="top_level_dir" />
          <variable citdl="Loader()" line="210" name="loader" />
        </scope>
        <scope ilk="function" line="213" lineend="231" name="runTests" signature="runTests()">
          <variable citdl="TestProgram" ilk="argument" name="self" />
          <variable citdl="testRunner()" line="220" name="testRunner" />
        </scope>
        <variable attributes="__instancevar__" citdl="testRunner.run()" line="229" name="result" />
      </scope>
      <variable attributes="__hidden__" citdl="str" line="45" name="USAGE_FROM_MODULE" />
      <variable attributes="__hidden__" citdl="str" line="13" name="CATCHBREAK" />
      <variable attributes="__hidden__" citdl="str" line="14" name="BUFFEROUTPUT" />
      <variable attributes="__hidden__" citdl="TestProgram" line="233" name="main" />
      <variable attributes="__hidden__" citdl="str" line="12" name="FAILFAST" />
    </scope>
    