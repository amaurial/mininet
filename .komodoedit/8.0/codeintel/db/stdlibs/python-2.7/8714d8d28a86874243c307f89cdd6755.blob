<scope doc="# Copyright (C) 2001-2006 Python Software Foundation&#xA;# Author: Ben Gertzfield, Barry Warsaw # Contact: email-sig@python.org" ilk="blob" lang="Python" name="email.charset">
      <variable citdl="dict" line="67" name="ALIASES" />
      <variable citdl="int" line="23" name="BASE64" />
      <variable citdl="dict" line="34" name="CHARSETS" />
      <variable citdl="dict" line="96" name="CODEC_MAP" />
      <scope doc="Map character sets to their email properties.&#xA;This class provides information about the requirements imposed on email for a specific character set.  It also provides convenience routines for converting between character sets, given the availability of the applicable codecs.  Given a character set, it will do its best to provide information on how to use that character set in an email in an RFC-compliant way.  Certain character sets must be encoded with quoted-printable or base64 when used in email headers or bodies.  Certain character sets must be converted outright, and are not allowed in email.  Instances of this" ilk="class" line="156" lineend="397" name="Charset">
        <scope doc="Convert a splittable string back into an encoded string." ilk="function" line="299" lineend="322" name="from_splittable" returns="ustr.encode()" signature="from_splittable(ustr, to_output=True)">
          <variable citdl="True" ilk="argument" name="to_output" />
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable citdl="CODEC_MAP.get()" line="313" name="codec" />
          <variable ilk="argument" name="ustr" />
        </scope>
        <scope ilk="function" line="246" lineend="247" name="__ne__" returns="bool" signature="__ne__(other)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="Return the length of the encoded header string." ilk="function" line="332" lineend="345" name="encoded_header_len" returns="email.quoprimime.header_quopri_len()" signature="encoded_header_len(s)">
          <variable citdl="get_output_charset()" line="334" name="cset" />
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable citdl="email.quoprimime.header_quopri_len()" line="342" name="lenqp" />
          <variable ilk="argument" name="s" />
          <variable citdl="email.base64mime.base64_len()" line="341" name="lenb64" />
        </scope>
        <scope ilk="function" line="238" lineend="239" name="__str__" returns="self.input_charset.lower()" signature="__str__()">
          <variable citdl="Charset" ilk="argument" name="self" />
        </scope>
        <scope doc="Convert a string from the input_codec to the output_codec." ilk="function" line="270" lineend="275" name="convert" signature="convert(s)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
        <scope doc="Convert a possibly multibyte string to a safely splittable&#xA;format." ilk="function" line="277" lineend="297" name="to_splittable" returns="unicode()" signature="to_splittable(s)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
        <scope doc="Return the content-transfer-encoding used for body encoding." ilk="function" line="249" lineend="268" name="get_body_encoding" returns="str" signature="get_body_encoding()">
          <variable citdl="Charset" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the output character set." ilk="function" line="324" lineend="330" name="get_output_charset" returns="ALIASES.get()" signature="get_output_charset()">
          <variable citdl="Charset" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="241" name="__repr__" />
        <scope doc="Header-encode a string, optionally converting it to&#xA;output_charset." ilk="function" line="347" lineend="376" name="header_encode" returns="convert()" signature="header_encode(s, convert=False)">
          <variable citdl="False" ilk="argument" name="convert" />
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable citdl="get_output_charset()" line="360" name="cset" />
          <variable citdl="convert()" ilk="argument" name="s" />
          <variable citdl="email.quoprimime.header_quopri_len()" line="370" name="lenqp" />
          <variable citdl="email.base64mime.base64_len()" line="369" name="lenb64" />
        </scope>
        <scope doc="Body-encode a string and convert it to output_charset." ilk="function" line="378" lineend="397" name="body_encode" returns="email.base64mime.body_encode()" signature="body_encode(s, convert=True)">
          <variable citdl="convert()" ilk="argument" name="s" />
          <variable citdl="True" ilk="argument" name="convert" />
          <variable citdl="Charset" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="243" lineend="244" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="200" lineend="236" name="__init__" signature="Charset(input_charset=DEFAULT_CHARSET)">
          <variable citdl="unicode()" ilk="argument" name="input_charset" />
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable line="223" name="henc" />
          <variable line="223" name="benc" />
          <variable citdl="ALIASES.get()" line="223" name="conv" />
        </scope>
        <variable attributes="__instancevar__" citdl="CODEC_MAP.get()" line="233" name="input_codec" />
        <variable attributes="__instancevar__" line="229" name="body_encoding" />
        <variable attributes="__instancevar__" citdl="ALIASES.get()" line="219" name="input_charset" />
        <variable attributes="__instancevar__" line="228" name="header_encoding" />
        <variable attributes="__instancevar__" citdl="ALIASES.get()" line="230" name="output_charset" />
        <variable attributes="__instancevar__" citdl="CODEC_MAP.get()" line="235" name="output_codec" />
      </scope>
      <variable citdl="str" line="29" name="DEFAULT_CHARSET" />
      <variable citdl="int" line="27" name="MISC_LEN" />
      <variable citdl="int" line="22" name="QP" />
      <variable citdl="int" line="24" name="SHORTEST" />
      <variable citdl="list" line="5" name="__all__" />
      <scope doc="Add a character set alias." ilk="function" line="136" lineend="142" name="add_alias" signature="add_alias(alias, canonical)">
        <variable ilk="argument" name="alias" />
        <variable ilk="argument" name="canonical" />
      </scope>
      <scope doc="Add character set properties to the global registry." ilk="function" line="108" lineend="133" name="add_charset" signature="add_charset(charset, header_enc=None, body_enc=None, output_charset=None)">
        <variable ilk="argument" name="output_charset" />
        <variable ilk="argument" name="charset" />
        <variable ilk="argument" name="header_enc" />
        <variable ilk="argument" name="body_enc" />
      </scope>
      <scope doc="Add a codec that map characters in the given charset to/from&#xA;Unicode." ilk="function" line="145" lineend="152" name="add_codec" signature="add_codec(charset, codecname)">
        <variable ilk="argument" name="codecname" />
        <variable ilk="argument" name="charset" />
      </scope>
      <import module="codecs" />
      <import module="email" />
      <scope doc="Set the Content-Transfer-Encoding header to 7bit or 8bit." ilk="function" name="encode_7or8bit" signature="encode_7or8bit(msg)" />
      <import module="errors" />
    </scope>
    