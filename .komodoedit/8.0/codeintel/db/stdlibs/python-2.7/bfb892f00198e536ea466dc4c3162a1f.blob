<scope doc="Parser engine for the grammar tables generated by pgen.&#xA;The grammar table must be loaded first.  See Parser/parser.c in the Python distribution for additional info on how this parsing engine works." ilk="blob" lang="Python" name="lib2to3.pgen2.parse">
      <scope classrefs="Exception" doc="Exception to signal the parser is stuck.&#xA;" ilk="class" line="16" lineend="25" name="ParseError">
        <scope ilk="function" line="19" lineend="25" name="__init__" signature="ParseError(msg, type, value, context)">
          <variable ilk="argument" name="msg" />
          <variable citdl="ParseError" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="context" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="__instancevar__" line="22" name="msg" />
        <variable attributes="__instancevar__" line="23" name="type" />
        <variable attributes="__instancevar__" line="25" name="context" />
        <variable attributes="__instancevar__" line="24" name="value" />
      </scope>
      <scope classrefs="object" doc="Parser engine.&#xA;The proper usage sequence is:  p = Parser(grammar, [converter])  # create instance p.setup([start])                  # prepare for parsing &lt;for each input token&gt;: if p.addtoken(...):           # parse a token; may raise ParseError break root = p.rootnode                 # root of abstract syntax tree  A Parser instance may be reused by calling setup() repeatedly." ilk="class" line="27" lineend="201" name="Parser">
        <scope doc="Shift a token." ilk="function" line="175" lineend="182" name="shift" signature="shift(type, value, newstate, context)">
          <variable ilk="argument" name="newstate" />
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="context" />
          <variable citdl="convert()" line="178" name="newnode" />
          <variable ilk="argument" name="type" />
        </scope>
        <scope doc="Prepare for parsing." ilk="function" line="89" lineend="111" name="setup" signature="setup(start=None)">
          <variable citdl="self.grammar.start" ilk="argument" name="start" />
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable citdl="tuple" line="108" name="stackentry" />
          <variable citdl="tuple" line="107" name="newnode" />
        </scope>
        <scope doc="Pop a nonterminal." ilk="function" line="191" lineend="201" name="pop" signature="pop()">
          <variable line="193" name="popstate" />
          <variable citdl="convert()" line="194" name="newnode" />
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable line="193" name="popdfa" />
          <variable line="193" name="popnode" />
        </scope>
        <scope doc="Add a token; return True iff this is the end of the program." ilk="function" line="113" lineend="159" name="addtoken" returns="bool" signature="addtoken(type, value, context)">
          <variable line="121" name="arcs" />
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable citdl="self.classify()" line="116" name="ilabel" />
          <variable ilk="argument" name="value" />
          <variable citdl="newstate" line="131" name="state" />
          <variable line="143" name="itsdfa" />
          <variable ilk="argument" name="context" />
          <variable ilk="argument" name="type" />
        </scope>
        <scope doc="Constructor." ilk="function" line="57" lineend="87" name="__init__" signature="Parser(grammar, convert=None)">
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable ilk="argument" name="grammar" />
          <variable ilk="argument" name="convert" />
        </scope>
        <scope doc="Push a nonterminal." ilk="function" line="184" lineend="189" name="push" signature="push(type, newdfa, newstate, context)">
          <variable ilk="argument" name="newstate" />
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable ilk="argument" name="newdfa" />
          <variable ilk="argument" name="context" />
          <variable citdl="tuple" line="187" name="newnode" />
          <variable ilk="argument" name="type" />
        </scope>
        <scope doc="Turn a token into a label." ilk="function" line="161" lineend="173" name="classify" returns="self.grammar.keywords.get()" signature="classify(type, value, context)">
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="context" />
          <variable ilk="argument" name="value" />
          <variable citdl="self.grammar.keywords.get()" line="167" name="ilabel" />
        </scope>
        <variable attributes="__instancevar__" citdl="convert()" line="110" name="rootnode" />
        <variable attributes="__instancevar__" line="87" name="convert" />
        <variable attributes="__instancevar__" line="86" name="grammar" />
        <variable attributes="__instancevar__" citdl="set()" line="111" name="used_names" />
        <variable attributes="__instancevar__" citdl="list" line="109" name="stack" />
      </scope>
      <import module="token" />
    </scope>
    