<scope doc="# dialog.py -- Tkinter interface to the tk_dialog script.&#xA;" ilk="blob" lang="Python" name="Dialog">
      <variable citdl="str" name="ACTIVE" />
      <variable citdl="str" name="ALL" />
      <variable citdl="str" name="ANCHOR" />
      <variable citdl="str" name="ARC" />
      <scope ilk="function" name="At" signature="At(x, y=None)" />
      <scope doc="# Indices: # XXX I don&apos;t like these -- take them away" ilk="function" name="AtEnd" signature="AtEnd()" />
      <scope ilk="function" name="AtInsert" signature="AtInsert(*args)" />
      <scope ilk="function" name="AtSelFirst" signature="AtSelFirst()" />
      <scope ilk="function" name="AtSelLast" signature="AtSelLast()" />
      <variable citdl="str" name="BASELINE" />
      <variable citdl="str" name="BEVEL" />
      <variable citdl="str" name="BOTH" />
      <variable citdl="str" name="BOTTOM" />
      <variable citdl="str" name="BROWSE" />
      <variable citdl="str" name="BUTT" />
      <scope classrefs="Misc" doc="Internal class.&#xA;" ilk="class" name="BaseWidget">
        <scope ilk="function" name="_do" />
        <scope doc="Internal function. Sets up information about children." ilk="function" name="_setup" />
        <scope doc="Destroy this and all descendants widgets." ilk="function" name="destroy" />
        <scope doc="Construct a widget with the parent widget MASTER, a name&#xA;WIDGETNAME and appropriate options." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Image" doc="Widget which can display a bitmap.&#xA;" ilk="class" name="BitmapImage">
        <scope doc="Create a bitmap with NAME." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="int" doc="bool(x) -&gt; bool&#xA;Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed." ilk="class" name="BooleanType">
        <scope doc="x.__rand__(y) &lt;==&gt; y&amp;x" ilk="function" name="__rand__" signature="x.__rand__(y) &lt;==&gt; y&amp;x" />
        <scope doc="x.__ror__(y) &lt;==&gt; y|x" ilk="function" name="__ror__" signature="x.__ror__(y) &lt;==&gt; y|x" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__xor__(y) &lt;==&gt; x^y" ilk="function" name="__xor__" signature="x.__xor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__and__(y) &lt;==&gt; x&amp;y" ilk="function" name="__and__" signature="x.__and__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__rxor__(y) &lt;==&gt; y^x" ilk="function" name="__rxor__" signature="x.__rxor__(y) &lt;==&gt; y^x" />
        <scope doc="x.__or__(y) &lt;==&gt; x|y" ilk="function" name="__or__" signature="x.__or__(y) &lt;==&gt; x|y" />
      </scope>
      <scope classrefs="Variable" doc="Value holder for boolean variables.&#xA;" ilk="class" name="BooleanVar">
        <scope doc="Return the value of the variable as a bool." ilk="function" name="get" />
        <scope doc="Construct a boolean variable." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="object" doc="buffer(object [, offset[, size]])&#xA;Create a new buffer object which references the given object. The buffer will reference a slice of the target object from the start of the object (or at the specified offset). The slice will extend to the end of the target object (or with the specified size)." ilk="class" name="BufferType">
        <scope doc="x.__delitem__(y) &lt;==&gt; del x[y]" ilk="function" name="__delitem__" signature="x.__delitem__(y) &lt;==&gt; del x[y]" />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__delslice__" signature="x.__delslice__(i, j) &lt;==&gt; del x[i:j]" />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__rmul__(n) &lt;==&gt; n*x" ilk="function" name="__rmul__" signature="x.__rmul__(n) &lt;==&gt; n*x" />
        <scope doc="x.__setitem__(i, y) &lt;==&gt; x[i]=y" ilk="function" name="__setitem__" signature="x.__setitem__(i, y) &lt;==&gt; x[i]=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="Use  of negative indices is not supported." ilk="function" name="__setslice__" signature="x.__setslice__(i, j, y) &lt;==&gt; x[i:j]=y" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__mul__(n) &lt;==&gt; x*n" ilk="function" name="__mul__" signature="x.__mul__(n) &lt;==&gt; x*n" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="BuiltinFunctionType">
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="BuiltinMethodType">
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="Widget" doc="Button widget.&#xA;" ilk="class" name="Button">
        <scope ilk="function" name="tkButtonLeave" />
        <scope ilk="function" name="tkButtonUp" />
        <scope ilk="function" name="tkButtonEnter" />
        <scope ilk="function" name="tkButtonDown" />
        <scope doc="Flash the button." ilk="function" name="flash" />
        <scope ilk="function" name="tkButtonInvoke" />
        <scope doc="Invoke the command associated with the button." ilk="function" name="invoke" />
        <scope doc="Construct a button widget with the parent MASTER." ilk="function" name="__init__" />
      </scope>
      <variable citdl="str" name="CASCADE" />
      <variable citdl="str" name="CENTER" />
      <variable citdl="str" name="CHAR" />
      <variable citdl="str" name="CHECKBUTTON" />
      <variable citdl="str" name="CHORD" />
      <variable citdl="str" name="COMMAND" />
      <variable citdl="str" name="CURRENT" />
      <scope doc="Internal class. Stores function to call when some user&#xA;defined Tcl function is called e.g. after an event occurred." ilk="class" name="CallWrapper">
        <scope doc="Apply first function SUBST to arguments, than FUNC." ilk="function" name="__call__" />
        <scope doc="Store FUNC, SUBST and WIDGET as members." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Widget XView YView" doc="Canvas widget to display graphical elements like lines or text.&#xA;" ilk="class" name="Canvas">
        <scope doc="Return tags associated with the first item specified in&#xA;ARGS." ilk="function" name="gettags" />
        <scope doc="Add tag NEWTAG to all items." ilk="function" name="addtag_all" />
        <scope doc="Raise an item TAGORID given in ARGS (optional above another&#xA;item)." ilk="function" name="tkraise" />
        <scope doc="Configure resources of an item TAGORID." ilk="function" name="itemconfigure" />
        <scope doc="Create polygon with coordinates x1,y1,...,xn,yn." ilk="function" name="create_polygon" />
        <scope doc="Move an item TAGORID given in ARGS." ilk="function" name="move" />
        <scope doc="Adjust the view of the canvas to GAIN times the difference&#xA;between X and Y and the coordinates given in scan_mark." ilk="function" name="scan_dragto" />
        <scope doc="Create text with coordinates x1,y1." ilk="function" name="create_text" />
        <scope doc="Add tag NEWTAG to all items which overlap the rectangle&#xA;defined by X1,Y1,X2,Y2." ilk="function" name="addtag_overlapping" />
        <scope doc="Return the canvas y coordinate of pixel position SCREENY&#xA;rounded to nearest multiple of GRIDSPACING units." ilk="function" name="canvasy" />
        <scope doc="Return the canvas x coordinate of pixel position SCREENX&#xA;rounded to nearest multiple of GRIDSPACING units." ilk="function" name="canvasx" />
        <scope doc="Create window with coordinates x1,y1,x2,y2." ilk="function" name="create_window" />
        <scope doc="Delete tag or id given as last arguments in ARGS from items&#xA;identified by first argument in ARGS." ilk="function" name="dtag" />
        <scope doc="Remember the current X, Y coordinates." ilk="function" name="scan_mark" />
        <scope doc="Set the fixed end of a selection in item TAGORID to INDEX." ilk="function" name="select_from" />
        <scope doc="Internal function." ilk="function" name="addtag" />
        <scope doc="Construct a canvas widget with the parent MASTER." ilk="function" name="__init__" />
        <scope doc="Configure resources of an item TAGORID." ilk="function" name="itemconfig" />
        <scope doc="Raise an item TAGORID given in ARGS (optional above another&#xA;item)." ilk="function" name="tag_raise" />
        <scope doc="Unbind for all items with TAGORID for event SEQUENCE  the&#xA;function identified with FUNCID." ilk="function" name="tag_unbind" />
        <scope doc="Scale item TAGORID with XORIGIN, YORIGIN, XSCALE, YSCALE." ilk="function" name="scale" />
        <scope doc="Set cursor at position POS in the item identified by&#xA;TAGORID." ilk="function" name="icursor" />
        <scope doc="Create oval with coordinates x1,y1,x2,y2." ilk="function" name="create_oval" />
        <scope doc="Return all items below TAGORID." ilk="function" name="find_below" />
        <scope doc="Bind to all items with TAGORID at event SEQUENCE a call to&#xA;function FUNC." ilk="function" name="tag_bind" />
        <scope doc="Create image item with coordinates x1,y1." ilk="function" name="create_image" />
        <scope doc="Internal function." ilk="function" name="find" />
        <scope doc="Return all items which overlap the rectangle defined by&#xA;X1,Y1,X2,Y2." ilk="function" name="find_overlapping" />
        <scope doc="Adjust the end of the selection near the cursor of an item&#xA;TAGORID to index." ilk="function" name="select_adjust" />
        <scope doc="Return all items with TAGORID." ilk="function" name="find_withtag" />
        <scope doc="Return the type of the item TAGORID." ilk="function" name="type" />
        <scope doc="Internal function." ilk="function" name="_create" />
        <scope doc="Add tag NEWTAG to all items below TAGORID." ilk="function" name="addtag_below" />
        <scope doc="Add tag NEWTAG to item which is closest to pixel at X, Y." ilk="function" name="addtag_closest" />
        <scope doc="Return position of cursor as integer in item specified in&#xA;ARGS." ilk="function" name="index" />
        <scope doc="Add tag NEWTAG to all items in the rectangle defined by&#xA;X1,Y1,X2,Y2." ilk="function" name="addtag_enclosed" />
        <scope doc="Print the contents of the canvas to a postscript file." ilk="function" name="postscript" />
        <scope doc="Add tag NEWTAG to all items with TAGORID." ilk="function" name="addtag_withtag" />
        <scope doc="Create arc shaped region with coordinates x1,y1,x2,y2." ilk="function" name="create_arc" />
        <scope doc="Return items above TAGORID." ilk="function" name="find_above" />
        <scope doc="Raise an item TAGORID given in ARGS (optional above another&#xA;item)." ilk="function" name="lift" />
        <scope doc="Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle&#xA;which encloses all items with tags specified as arguments." ilk="function" name="bbox" />
        <scope doc="Set focus to the first item specified in ARGS." ilk="function" name="focus" />
        <scope doc="Create bitmap with coordinates x1,y1." ilk="function" name="create_bitmap" />
        <scope doc="Return all items in rectangle defined by X1,Y1,X2,Y2." ilk="function" name="find_enclosed" />
        <scope doc="Delete characters of text items identified by tag or id in&#xA;ARGS (possibly several times) from FIRST to LAST character&#xA;(including)." ilk="function" name="dchars" />
        <scope doc="Insert TEXT in item TAGORID at position POS." ilk="function" name="insert" />
        <scope doc="Lower an item TAGORID given in ARGS (optional below another&#xA;item)." ilk="function" name="lower" />
        <scope doc="Add tag NEWTAG to all items above TAGORID." ilk="function" name="addtag_above" />
        <scope doc="Create rectangle with coordinates x1,y1,x2,y2." ilk="function" name="create_rectangle" />
        <scope doc="Return item which is closest to pixel at X, Y." ilk="function" name="find_closest" />
        <scope doc="Return all items." ilk="function" name="find_all" />
        <scope doc="Lower an item TAGORID given in ARGS (optional below another&#xA;item)." ilk="function" name="tag_lower" />
        <scope doc="Return the resource value for an OPTION for item TAGORID." ilk="function" name="itemcget" />
        <scope doc="Create line with coordinates x1,y1,...,xn,yn." ilk="function" name="create_line" />
        <scope doc="Return a list of coordinates for the item given in ARGS." ilk="function" name="coords" />
        <scope doc="Set the variable end of a selection in item TAGORID to&#xA;INDEX." ilk="function" name="select_to" />
        <scope doc="Return the item which has the selection." ilk="function" name="select_item" />
        <scope doc="Clear the selection if it is in this widget." ilk="function" name="select_clear" />
        <scope doc="Delete items identified by all tag or ids contained in ARGS." ilk="function" name="delete" />
      </scope>
      <scope classrefs="Widget" doc="Checkbutton widget which is either in on- or off-state.&#xA;" ilk="class" name="Checkbutton">
        <scope doc="Put the button in off-state." ilk="function" name="deselect" />
        <scope doc="Toggle the button and invoke a command if given as resource." ilk="function" name="invoke" />
        <scope doc="Flash the button." ilk="function" name="flash" />
        <scope doc="Toggle the button." ilk="function" name="toggle" />
        <scope doc="Put the button in on-state." ilk="function" name="select" />
        <scope doc="Construct a checkbutton widget with the parent MASTER." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="object" doc="classobj(name, bases, dict)&#xA;Create a class object.  The name must be a string; the second argument a tuple of classes, and the third a dictionary." ilk="class" name="ClassType">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
      </scope>
      <scope classrefs="object" doc="code(argcount, nlocals, stacksize, flags, codestring, constants, names,&#xA;varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])  Create a code object.  Not for the faint of heart." ilk="class" name="CodeType">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="object" doc="complex(real[, imag]) -&gt; complex number&#xA;Create a complex number from a real part and an optional imaginary part. This is equivalent to (real + imag*1j) where imag defaults to 0." ilk="class" name="ComplexType">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="Returns the complex conjugate of its argument." ilk="function" name="conjugate" returns="complex" signature="complex.conjugate() -&gt; complex" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope doc="Converts to a string according to format_spec." ilk="function" name="__format__" returns="str" signature="complex.__format__() -&gt; str" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <variable citdl="str" line="7" name="DIALOG_ICON" />
      <variable citdl="str" name="DISABLED" />
      <variable citdl="str" name="DOTBOX" />
      <scope classrefs="Widget" doc="&#xA;" ilk="class" line="12" lineend="25" name="Dialog">
        <scope ilk="function" line="25" lineend="25" name="destroy" signature="destroy()">
          <variable citdl="Dialog" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="13" lineend="24" name="__init__" signature="Dialog(master=None, cnf={}, **kw)">
          <variable citdl="_cnfmerge()" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.tk.getint()" line="17" name="num" />
        <variable attributes="__instancevar__" citdl="str" line="15" name="widgetName" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="DictProxyType">
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="D.iteritems() -&gt; an iterator over the (key, value) items of D" ilk="function" name="iteritems" signature="D.iteritems() -&gt; an iterator over the (key, value) items of D" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="D.has_key(k) -&gt; True if D has a key k, else False" ilk="function" name="has_key" returns="bool" signature="D.has_key(k) -&gt; True if D has a key k, else False" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="D.itervalues() -&gt; an iterator over the values of D" ilk="function" name="itervalues" signature="D.itervalues() -&gt; an iterator over the values of D" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if D.has_key(k), else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if D.has_key(k), else d.  d defaults to None." />
        <scope doc="D.keys() -&gt; list of D&apos;s keys" ilk="function" name="keys" returns="list" signature="D.keys() -&gt; list of D&apos;s keys" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="D.iterkeys() -&gt; an iterator over the keys of D" ilk="function" name="iterkeys" signature="D.iterkeys() -&gt; an iterator over the keys of D" />
        <scope doc="D.items() -&gt; list of D&apos;s (key, value) pairs, as 2-tuples" ilk="function" name="items" returns="list" signature="D.items() -&gt; list of D&apos;s (key, value) pairs, as 2-tuples" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="D.values() -&gt; list of D&apos;s values" ilk="function" name="values" returns="list" signature="D.values() -&gt; list of D&apos;s values" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="object" doc="dict() -&gt; new empty dictionary&#xA;dict(mapping) -&gt; new dictionary initialized from a mapping object&apos;s (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)" ilk="class" name="DictType">
        <scope doc="2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="If key is not found, d is returned if given, otherwise&#xA;KeyError is raised" ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="D.has_key(k) -&gt; True if D has a key k, else False" ilk="function" name="has_key" returns="bool" signature="D.has_key(k) -&gt; True if D has a key k, else False" />
        <scope doc="D.viewkeys() -&gt; a set-like object providing a view on D&apos;s keys" ilk="function" name="viewkeys" signature="D.viewkeys() -&gt; a set-like object providing a view on D&apos;s keys" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="D.__sizeof__() -&gt; size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__() -&gt; size of D in memory, in bytes" />
        <scope ilk="function" name="__init__" />
        <scope doc="D.viewitems() -&gt; a set-like object providing a view on D&apos;s items" ilk="function" name="viewitems" signature="D.viewitems() -&gt; a set-like object providing a view on D&apos;s items" />
        <scope doc="D.__contains__(k) -&gt; True if D has a key k, else False" ilk="function" name="__contains__" returns="bool" signature="D.__contains__(k) -&gt; True if D has a key k, else False" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="D.itervalues() -&gt; an iterator over the values of D" ilk="function" name="itervalues" signature="D.itervalues() -&gt; an iterator over the values of D" />
        <scope doc="D.iteritems() -&gt; an iterator over the (key, value) items of D" ilk="function" name="iteritems" signature="D.iteritems() -&gt; an iterator over the (key, value) items of D" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="D.keys() -&gt; list of D&apos;s keys" ilk="function" name="keys" returns="list" signature="D.keys() -&gt; list of D&apos;s keys" />
        <scope doc="If E has a .keys() method, does:     for k in E: D[k] = E[k]&#xA;If E lacks .keys() method, does:     for (k, v) in E: D[k] =&#xA;v In either case, this is followed by: for k in F: D[k] =&#xA;F[k]" ilk="function" name="update" signature="D.update(E, **F) -&gt; None.  Update D from dict/iterable E and F." />
        <scope doc="x.__setitem__(i, y) &lt;==&gt; x[i]=y" ilk="function" name="__setitem__" signature="x.__setitem__(i, y) &lt;==&gt; x[i]=y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="D.iterkeys() -&gt; an iterator over the keys of D" ilk="function" name="iterkeys" signature="D.iterkeys() -&gt; an iterator over the keys of D" />
        <scope doc="x.__delitem__(y) &lt;==&gt; del x[y]" ilk="function" name="__delitem__" signature="x.__delitem__(y) &lt;==&gt; del x[y]" />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
        <scope doc="D.viewvalues() -&gt; an object providing a view on D&apos;s values" ilk="function" name="viewvalues" signature="D.viewvalues() -&gt; an object providing a view on D&apos;s values" />
        <scope doc="D.items() -&gt; list of D&apos;s (key, value) pairs, as 2-tuples" ilk="function" name="items" returns="list" signature="D.items() -&gt; list of D&apos;s (key, value) pairs, as 2-tuples" />
        <scope doc="D.clear() -&gt; None.  Remove all items from D." ilk="function" name="clear" signature="D.clear() -&gt; None.  Remove all items from D." />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="D.values() -&gt; list of D&apos;s values" ilk="function" name="values" returns="list" signature="D.values() -&gt; list of D&apos;s values" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="object" doc="dict() -&gt; new empty dictionary&#xA;dict(mapping) -&gt; new dictionary initialized from a mapping object&apos;s (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)" ilk="class" name="DictionaryType">
        <scope doc="2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="If key is not found, d is returned if given, otherwise&#xA;KeyError is raised" ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="D.has_key(k) -&gt; True if D has a key k, else False" ilk="function" name="has_key" returns="bool" signature="D.has_key(k) -&gt; True if D has a key k, else False" />
        <scope doc="D.viewkeys() -&gt; a set-like object providing a view on D&apos;s keys" ilk="function" name="viewkeys" signature="D.viewkeys() -&gt; a set-like object providing a view on D&apos;s keys" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="D.__sizeof__() -&gt; size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__() -&gt; size of D in memory, in bytes" />
        <scope ilk="function" name="__init__" />
        <scope doc="D.viewitems() -&gt; a set-like object providing a view on D&apos;s items" ilk="function" name="viewitems" signature="D.viewitems() -&gt; a set-like object providing a view on D&apos;s items" />
        <scope doc="D.__contains__(k) -&gt; True if D has a key k, else False" ilk="function" name="__contains__" returns="bool" signature="D.__contains__(k) -&gt; True if D has a key k, else False" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="D.itervalues() -&gt; an iterator over the values of D" ilk="function" name="itervalues" signature="D.itervalues() -&gt; an iterator over the values of D" />
        <scope doc="D.iteritems() -&gt; an iterator over the (key, value) items of D" ilk="function" name="iteritems" signature="D.iteritems() -&gt; an iterator over the (key, value) items of D" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="D.keys() -&gt; list of D&apos;s keys" ilk="function" name="keys" returns="list" signature="D.keys() -&gt; list of D&apos;s keys" />
        <scope doc="If E has a .keys() method, does:     for k in E: D[k] = E[k]&#xA;If E lacks .keys() method, does:     for (k, v) in E: D[k] =&#xA;v In either case, this is followed by: for k in F: D[k] =&#xA;F[k]" ilk="function" name="update" signature="D.update(E, **F) -&gt; None.  Update D from dict/iterable E and F." />
        <scope doc="x.__setitem__(i, y) &lt;==&gt; x[i]=y" ilk="function" name="__setitem__" signature="x.__setitem__(i, y) &lt;==&gt; x[i]=y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="D.iterkeys() -&gt; an iterator over the keys of D" ilk="function" name="iterkeys" signature="D.iterkeys() -&gt; an iterator over the keys of D" />
        <scope doc="x.__delitem__(y) &lt;==&gt; del x[y]" ilk="function" name="__delitem__" signature="x.__delitem__(y) &lt;==&gt; del x[y]" />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
        <scope doc="D.viewvalues() -&gt; an object providing a view on D&apos;s values" ilk="function" name="viewvalues" signature="D.viewvalues() -&gt; an object providing a view on D&apos;s values" />
        <scope doc="D.items() -&gt; list of D&apos;s (key, value) pairs, as 2-tuples" ilk="function" name="items" returns="list" signature="D.items() -&gt; list of D&apos;s (key, value) pairs, as 2-tuples" />
        <scope doc="D.clear() -&gt; None.  Remove all items from D." ilk="function" name="clear" signature="D.clear() -&gt; None.  Remove all items from D." />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="D.values() -&gt; list of D&apos;s values" ilk="function" name="values" returns="list" signature="D.values() -&gt; list of D&apos;s values" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="Variable" doc="Value holder for float variables.&#xA;" ilk="class" name="DoubleVar">
        <scope doc="Return the value of the variable as a float." ilk="function" name="get" />
        <scope doc="Construct a float variable." ilk="function" name="__init__" />
      </scope>
      <variable citdl="str" name="E" />
      <variable citdl="str" name="END" />
      <variable citdl="str" name="EW" />
      <variable citdl="int" name="EXCEPTION" />
      <variable citdl="str" name="EXTENDED" />
      <scope classrefs="object" doc="&#xA;" ilk="class" name="EllipsisType">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <scope classrefs="Widget XView" doc="Entry widget which allows to display simple text.&#xA;" ilk="class" name="Entry">
        <scope doc="Remember the current X, Y coordinates." ilk="function" name="scan_mark" />
        <scope doc="Set the fixed end of a selection to INDEX." ilk="function" name="selection_from" />
        <scope doc="Adjust the view of the canvas to 10 times the difference&#xA;between X and Y and the coordinates given in scan_mark." ilk="function" name="scan_dragto" />
        <scope doc="Clear the selection if it is in this widget." ilk="function" name="selection_clear" />
        <scope doc="Set the fixed end of a selection to INDEX." ilk="function" name="select_from" />
        <scope doc="Construct an entry widget with the parent MASTER." ilk="function" name="__init__" />
        <scope doc="Return position of cursor." ilk="function" name="index" />
        <scope doc="Insert cursor at INDEX." ilk="function" name="icursor" />
        <scope doc="Set the selection from START to END (not included)." ilk="function" name="select_range" />
        <scope doc="Set the selection from START to END (not included)." ilk="function" name="selection_range" />
        <scope doc="Adjust the end of the selection near the cursor to INDEX." ilk="function" name="select_adjust" />
        <scope doc="Adjust the end of the selection near the cursor to INDEX." ilk="function" name="selection_adjust" />
        <scope doc="Set the variable end of a selection to INDEX." ilk="function" name="selection_to" />
        <scope doc="Return the text." ilk="function" name="get" />
        <scope doc="Return True if there are characters selected in the entry,&#xA;False otherwise." ilk="function" name="selection_present" />
        <scope doc="Return True if there are characters selected in the entry,&#xA;False otherwise." ilk="function" name="select_present" />
        <scope doc="Insert STRING at INDEX." ilk="function" name="insert" />
        <scope doc="Clear the selection if it is in this widget." ilk="function" name="select_clear" />
        <scope doc="Set the variable end of a selection to INDEX." ilk="function" name="select_to" />
        <scope doc="Delete text from FIRST to LAST (not included)." ilk="function" name="delete" />
      </scope>
      <scope doc="Container for the properties of an event.&#xA;Instances of this type are generated if one of the following events occurs:  KeyPress, KeyRelease - for keyboard events ButtonPress, ButtonRelease, Motion, Enter, Leave, MouseWheel - for mouse events Visibility, Unmap, Map, Expose, FocusIn, FocusOut, Circulate, Colormap, Gravity, Reparent, Property, Destroy, Activate, Deactivate - for window events.  If a callback function for one of these events is registered using bind, bind_all, bind_class, or tag_bind, the callback is" ilk="class" name="Event" />
      <variable citdl="int" name="FALSE" />
      <variable citdl="str" name="FIRST" />
      <variable citdl="str" name="FLAT" />
      <scope classrefs="object" doc="file(name[, mode[, buffering]]) -&gt; file object&#xA;Open a file.  The mode can be &apos;r&apos;, &apos;w&apos; or &apos;a&apos; for reading (default), writing or appending.  The file will be created if it doesn&apos;t exist when opened for writing or appending; it will be truncated when opened for writing.  Add a &apos;b&apos; to the mode for binary files. Add a &apos;+&apos; to the mode to allow simultaneous reading and writing. If the buffering argument is given, 0 means unbuffered, 1 means line buffered, and larger numbers specify the buffer size.  The preferred way to open a file is with the builtin open() function. Add a &apos;U&apos; to mode to open the file for input with universal newline support.  Any line ending in the input file will be seen as a &apos;\n&apos;" ilk="class" name="FileType">
        <scope doc="For backward compatibility." ilk="function" name="xreadlines" signature="xreadlines() -&gt; returns self." />
        <scope doc="Call readline() repeatedly and return a list of the lines so&#xA;read." ilk="function" name="readlines" returns="list" signature="readlines([size]) -&gt; list of strings, each a line from the file." />
        <scope doc="flush() -&gt; None.  Flush the internal I/O buffer." ilk="function" name="flush" signature="flush() -&gt; None.  Flush the internal I/O buffer." />
        <scope doc="Sets data attribute .closed to True." ilk="function" name="close" signature="close() -&gt; None or (perhaps) an integer.  Close the file." />
        <scope doc="Argument offset is a byte count." ilk="function" name="seek" signature="seek(offset[, whence]) -&gt; None.  Move to new file position." />
        <scope ilk="function" name="__init__" />
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="readinto() -&gt; Undocumented.  Don&apos;t use this; it may go away." ilk="function" name="readinto" signature="readinto() -&gt; Undocumented.  Don&apos;t use this; it may go away." />
        <scope doc="__enter__() -&gt; self." ilk="function" name="__enter__" signature="__enter__() -&gt; self." />
        <scope doc="x.next() -&gt; the next value, or raise StopIteration" ilk="function" name="next" signature="x.next() -&gt; the next value, or raise StopIteration" />
        <scope doc="Note that due to buffering, flush() or close() may be needed&#xA;before the file on disk reflects the data written." ilk="function" name="write" signature="write(str) -&gt; None.  Write string str to file." />
        <scope doc="tell() -&gt; current file position, an integer (may be a long integer)." ilk="function" name="tell" signature="tell() -&gt; current file position, an integer (may be a long integer)." />
        <scope doc="__exit__(*excinfo) -&gt; None.  Closes the file." ilk="function" name="__exit__" signature="__exit__(*excinfo) -&gt; None.  Closes the file." />
        <scope doc="isatty() -&gt; true or false.  True if the file is connected to a tty device." ilk="function" name="isatty" returns="bool" signature="isatty() -&gt; true or false.  True if the file is connected to a tty device." />
        <scope doc="Size defaults to the current file position, as returned by&#xA;tell()." ilk="function" name="truncate" signature="truncate([size]) -&gt; None.  Truncate the file to at most size bytes." />
        <scope doc="If the size argument is negative or omitted, read until EOF&#xA;is reached." ilk="function" name="read" signature="read([size]) -&gt; read at most size bytes, returned as a string." />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="Retain newline." ilk="function" name="readline" signature="readline([size]) -&gt; next line from the file, as a string." />
        <scope doc="This is needed for lower-level file interfaces, such&#xA;os.read()." ilk="function" name="fileno" returns="int" signature="fileno() -&gt; integer &quot;file descriptor&quot;." />
        <scope doc="Note that newlines are not added." ilk="function" name="writelines" signature="writelines(sequence_of_strings) -&gt; None.  Write the strings to the file." />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <import module="FixTk" />
      <scope classrefs="object" doc="float(x) -&gt; floating point number&#xA;Convert a string or number to a floating point number, if possible." ilk="class" name="FloatType">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="Returns self, the complex conjugate of any float." ilk="function" name="conjugate" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="Returns the Integral closest to x between 0 and x." ilk="function" name="__trunc__" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="Returns a pair of integers, whose ratio is exactly equal to&#xA;the original float and with a positive denominator." ilk="function" name="as_integer_ratio" signature="float.as_integer_ratio() -&gt; (int, int)" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Formats the float according to format_spec." ilk="function" name="__format__" returns="str" signature="float.__format__(format_spec) -&gt; string" />
        <scope doc="Return a hexadecimal representation of a floating-point&#xA;number." ilk="function" name="hex" returns="str" signature="float.hex() -&gt; string" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="Returns True if the float is an integer." ilk="function" name="is_integer" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <scope classrefs="Widget" doc="Frame widget which may contain other widgets and can have a 3D border.&#xA;" ilk="class" name="Frame">
        <scope doc="Construct a frame widget with the parent MASTER." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="FrameType">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="F.__sizeof__() -&gt; size of F in memory, in bytes" ilk="function" name="__sizeof__" signature="F.__sizeof__() -&gt; size of F in memory, in bytes" />
      </scope>
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])&#xA;Create a function object from a code object and a dictionary. The optional name string overrides the name from the code object. The optional argdefs tuple specifies the default argument values. The optional closure tuple supplies the bindings for free variables." ilk="class" name="FunctionType">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="descr.__get__(obj[, type]) -&gt; value" ilk="function" name="__get__" signature="descr.__get__(obj[, type]) -&gt; value" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <variable citdl="str" name="GROOVE" />
      <scope classrefs="object" doc="&#xA;" ilk="class" name="GeneratorType">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="return next yielded value or raise StopIteration." ilk="function" name="send" signature="send(arg) -&gt; send &apos;arg&apos; into generator," />
        <scope doc="x.next() -&gt; the next value, or raise StopIteration" ilk="function" name="next" signature="x.next() -&gt; the next value, or raise StopIteration" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="close(arg) -&gt; raise GeneratorExit inside generator." ilk="function" name="close" signature="close(arg) -&gt; raise GeneratorExit inside generator." />
        <scope doc="return next yielded value or raise StopIteration." ilk="function" name="throw" signature="throw(typ[,val[,tb]]) -&gt; raise exception in generator," />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="GetSetDescriptorType">
        <scope doc="descr.__set__(obj, value)" ilk="function" name="__set__" signature="descr.__set__(obj, value)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="descr.__get__(obj[, type]) -&gt; value" ilk="function" name="__get__" signature="descr.__get__(obj[, type]) -&gt; value" />
        <scope doc="descr.__delete__(obj)" ilk="function" name="__delete__" signature="descr.__delete__(obj)" />
      </scope>
      <scope doc="Geometry manager Grid.&#xA;Base class to use the methods grid_* in every widget." ilk="class" name="Grid">
        <scope doc="Unmap this widget." ilk="function" name="forget" />
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" name="grid_propagate" />
        <scope doc="Configure column INDEX of a grid." ilk="function" name="grid_columnconfigure" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" name="grid_slaves" />
        <scope doc="Return a tuple of integer coordinates for the bounding box&#xA;of this widget controlled by the geometry manager grid." ilk="function" name="grid_bbox" />
        <scope doc="Return a tuple of the number of column and rows in the grid." ilk="function" name="size" />
        <scope doc="Return a tuple of column and row which identify the cell at&#xA;which the pixel at position X and Y inside the master widget&#xA;is located." ilk="function" name="location" />
        <scope doc="Position a widget in the parent widget in a grid." ilk="function" name="config" />
        <scope doc="Position a widget in the parent widget in a grid." ilk="function" name="configure" />
        <scope doc="Return information about the options for positioning this&#xA;widget in a grid." ilk="function" name="grid_info" />
        <scope doc="Configure column INDEX of a grid." ilk="function" name="columnconfigure" />
        <scope doc="Unmap this widget but remember the grid options." ilk="function" name="grid_remove" />
        <scope doc="Position a widget in the parent widget in a grid." ilk="function" name="grid_configure" />
        <scope doc="Position a widget in the parent widget in a grid." ilk="function" name="grid" />
        <scope doc="Return a tuple of integer coordinates for the bounding box&#xA;of this widget controlled by the geometry manager grid." ilk="function" name="bbox" />
        <scope doc="Configure row INDEX of a grid." ilk="function" name="grid_rowconfigure" />
        <scope doc="Return information about the options for positioning this&#xA;widget in a grid." ilk="function" name="info" />
        <scope doc="Return a tuple of the number of column and rows in the grid." ilk="function" name="grid_size" />
        <scope doc="Unmap this widget." ilk="function" name="grid_forget" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" name="slaves" />
        <scope doc="Return a tuple of column and row which identify the cell at&#xA;which the pixel at position X and Y inside the master widget&#xA;is located." ilk="function" name="grid_location" />
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" name="propagate" />
        <scope doc="Configure row INDEX of a grid." ilk="function" name="rowconfigure" />
      </scope>
      <variable citdl="str" name="HIDDEN" />
      <variable citdl="str" name="HORIZONTAL" />
      <variable citdl="str" name="INSERT" />
      <variable citdl="str" name="INSIDE" />
      <scope doc="Base class for images.&#xA;" ilk="class" name="Image">
        <scope ilk="function" name="__getitem__" />
        <scope ilk="function" name="__del__" />
        <scope doc="Return the type of the imgage, e.g. &quot;photo&quot; or &quot;bitmap&quot;." ilk="function" name="type" />
        <scope ilk="function" name="__str__" />
        <scope doc="Return the height of the image." ilk="function" name="height" />
        <scope doc="Return the width of the image." ilk="function" name="width" />
        <scope ilk="function" name="__setitem__" />
        <scope doc="Configure the image." ilk="function" name="config" />
        <scope ilk="function" name="__init__" />
        <scope doc="Configure the image." ilk="function" name="configure" />
      </scope>
      <scope classrefs="object" doc="instance(class[, dict])&#xA;Create an instance without calling its __init__() method. The class must be a classic class. If present, dict must be a dictionary or None." ilk="class" name="InstanceType">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__ror__(y) &lt;==&gt; y|x" ilk="function" name="__ror__" signature="x.__ror__(y) &lt;==&gt; y|x" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" ilk="function" name="__lshift__" signature="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope doc="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" ilk="function" name="__rshift__" signature="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="x.__and__(y) &lt;==&gt; x&amp;y" ilk="function" name="__and__" signature="x.__and__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" ilk="function" name="__rrshift__" signature="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="x.next() -&gt; the next value, or raise StopIteration" ilk="function" name="next" signature="x.next() -&gt; the next value, or raise StopIteration" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope doc="x.__rand__(y) &lt;==&gt; y&amp;x" ilk="function" name="__rand__" signature="x.__rand__(y) &lt;==&gt; y&amp;x" />
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__imod__(y) &lt;==&gt; x%y" ilk="function" name="__imod__" signature="x.__imod__(y) &lt;==&gt; x%y" />
        <scope doc="x.__iand__(y) &lt;==&gt; x&amp;y" ilk="function" name="__iand__" signature="x.__iand__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="x.__ipow__(y) &lt;==&gt; x**y" ilk="function" name="__ipow__" signature="x.__ipow__(y) &lt;==&gt; x**y" />
        <scope doc="x.__or__(y) &lt;==&gt; x|y" ilk="function" name="__or__" signature="x.__or__(y) &lt;==&gt; x|y" />
        <scope doc="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" ilk="function" name="__rlshift__" signature="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__itruediv__(y) &lt;==&gt; x/y" ilk="function" name="__itruediv__" signature="x.__itruediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="x.__ilshift__(y) &lt;==&gt; x&lt;&lt;y" ilk="function" name="__ilshift__" signature="x.__ilshift__(y) &lt;==&gt; x&lt;&lt;y" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__ixor__(y) &lt;==&gt; x^y" ilk="function" name="__ixor__" signature="x.__ixor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__irshift__(y) &lt;==&gt; x&gt;&gt;y" ilk="function" name="__irshift__" signature="x.__irshift__(y) &lt;==&gt; x&gt;&gt;y" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__invert__() &lt;==&gt; ~x" ilk="function" name="__invert__" signature="x.__invert__() &lt;==&gt; ~x" />
        <scope doc="x.__ifloordiv__(y) &lt;==&gt; x//y" ilk="function" name="__ifloordiv__" signature="x.__ifloordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope doc="x.__idiv__(y) &lt;==&gt; x/y" ilk="function" name="__idiv__" signature="x.__idiv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x[y:z] &lt;==&gt; x[y.__index__():z.__index__()]" ilk="function" name="__index__" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__delslice__" signature="x.__delslice__(i, j) &lt;==&gt; del x[i:j]" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__hex__() &lt;==&gt; hex(x)" ilk="function" name="__hex__" signature="x.__hex__() &lt;==&gt; hex(x)" />
        <scope doc="x.__oct__() &lt;==&gt; oct(x)" ilk="function" name="__oct__" signature="x.__oct__() &lt;==&gt; oct(x)" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__rxor__(y) &lt;==&gt; y^x" ilk="function" name="__rxor__" signature="x.__rxor__(y) &lt;==&gt; y^x" />
        <scope doc="x.__isub__(y) &lt;==&gt; x-y" ilk="function" name="__isub__" signature="x.__isub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__delitem__(y) &lt;==&gt; del x[y]" ilk="function" name="__delitem__" signature="x.__delitem__(y) &lt;==&gt; del x[y]" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__imul__(y) &lt;==&gt; x*y" ilk="function" name="__imul__" signature="x.__imul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="Use  of negative indices is not supported." ilk="function" name="__setslice__" signature="x.__setslice__(i, j, y) &lt;==&gt; x[i:j]=y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="x.__setitem__(i, y) &lt;==&gt; x[i]=y" ilk="function" name="__setitem__" signature="x.__setitem__(i, y) &lt;==&gt; x[i]=y" />
        <scope doc="x.__iadd__(y) &lt;==&gt; x+y" ilk="function" name="__iadd__" signature="x.__iadd__(y) &lt;==&gt; x+y" />
        <scope doc="x.__xor__(y) &lt;==&gt; x^y" ilk="function" name="__xor__" signature="x.__xor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__ior__(y) &lt;==&gt; x|y" ilk="function" name="__ior__" signature="x.__ior__(y) &lt;==&gt; x|y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <scope classrefs="object" doc="int(x[, base]) -&gt; integer&#xA;Convert a string or number to an integer, if possible.  A floating point argument will be truncated towards zero (this does not include a string representation of a floating point number!)  When converting a string, use the optional base.  It is an error to supply a base when converting a non-string.  If base is zero, the proper base is guessed based on the string content.  If the argument is outside the integer range a long object will be returned instead." ilk="class" name="IntType">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__ror__(y) &lt;==&gt; y|x" ilk="function" name="__ror__" signature="x.__ror__(y) &lt;==&gt; y|x" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" ilk="function" name="__lshift__" signature="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="Returns self, the complex conjugate of any int." ilk="function" name="conjugate" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="x.__and__(y) &lt;==&gt; x&amp;y" ilk="function" name="__and__" signature="x.__and__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" ilk="function" name="__rrshift__" signature="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope doc="x.__rand__(y) &lt;==&gt; y&amp;x" ilk="function" name="__rand__" signature="x.__rand__(y) &lt;==&gt; y&amp;x" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="x.__or__(y) &lt;==&gt; x|y" ilk="function" name="__or__" signature="x.__or__(y) &lt;==&gt; x|y" />
        <scope doc="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" ilk="function" name="__rlshift__" signature="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="Number of bits necessary to represent self in binary." ilk="function" name="bit_length" returns="int" signature="int.bit_length() -&gt; int" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" ilk="function" name="__rshift__" signature="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__invert__() &lt;==&gt; ~x" ilk="function" name="__invert__" signature="x.__invert__() &lt;==&gt; ~x" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope ilk="function" name="__format__" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x[y:z] &lt;==&gt; x[y.__index__():z.__index__()]" ilk="function" name="__index__" />
        <scope doc="x.__hex__() &lt;==&gt; hex(x)" ilk="function" name="__hex__" signature="x.__hex__() &lt;==&gt; hex(x)" />
        <scope doc="x.__oct__() &lt;==&gt; oct(x)" ilk="function" name="__oct__" signature="x.__oct__() &lt;==&gt; oct(x)" />
        <scope doc="x.__rxor__(y) &lt;==&gt; y^x" ilk="function" name="__rxor__" signature="x.__rxor__(y) &lt;==&gt; y^x" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="Truncating an Integral returns itself." ilk="function" name="__trunc__" />
        <scope doc="x.__xor__(y) &lt;==&gt; x^y" ilk="function" name="__xor__" signature="x.__xor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <scope classrefs="Variable" doc="Value holder for integer variables.&#xA;" ilk="class" name="IntVar">
        <scope doc="Set the variable to value, converting booleans to integers." ilk="function" name="set" />
        <scope doc="Return the value of the variable as an integer." ilk="function" name="get" />
        <scope doc="Construct an integer variable." ilk="function" name="__init__" />
      </scope>
      <variable citdl="str" name="LAST" />
      <variable citdl="str" name="LEFT" />
      <scope classrefs="Widget" doc="Label widget which can display text and bitmaps.&#xA;" ilk="class" name="Label">
        <scope doc="Construct a label widget with the parent MASTER." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Widget" doc="labelframe widget.&#xA;" ilk="class" name="LabelFrame">
        <scope doc="Construct a labelframe widget with the parent MASTER." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])&#xA;Create a function object from a code object and a dictionary. The optional name string overrides the name from the code object. The optional argdefs tuple specifies the default argument values. The optional closure tuple supplies the bindings for free variables." ilk="class" name="LambdaType">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="descr.__get__(obj[, type]) -&gt; value" ilk="function" name="__get__" signature="descr.__get__(obj[, type]) -&gt; value" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <scope classrefs="object" doc="list() -&gt; new empty list&#xA;list(iterable) -&gt; new list initialized from iterable&apos;s items" ilk="class" name="ListType">
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="Raises IndexError if list is empty or index is out of range." ilk="function" name="pop" signature="L.pop([index]) -&gt; item -- remove and return item at index (default last)." />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="L.remove(value)" />
        <scope doc="x.__rmul__(n) &lt;==&gt; n*x" ilk="function" name="__rmul__" signature="x.__rmul__(n) &lt;==&gt; n*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="size of L in memory, in bytes" ilk="function" name="__sizeof__" signature="L.__sizeof__()" />
        <scope ilk="function" name="__init__" />
        <scope doc="L.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="L.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="L.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__delslice__" signature="x.__delslice__(i, j) &lt;==&gt; del x[i:j]" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="append object to end" ilk="function" name="append" signature="L.append(object)" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__mul__(n) &lt;==&gt; x*n" ilk="function" name="__mul__" signature="x.__mul__(n) &lt;==&gt; x*n" />
        <scope doc="stable sort *IN PLACE*;" ilk="function" name="sort" signature="L.sort(cmp=None, key=None, reverse=False)&#xA;cmp(x, y) -&gt; -1, 0, 1" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="insert object before index" ilk="function" name="insert" signature="L.insert(index, object)" />
        <scope doc="x.__setitem__(i, y) &lt;==&gt; x[i]=y" ilk="function" name="__setitem__" signature="x.__setitem__(i, y) &lt;==&gt; x[i]=y" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="L.reverse()" />
        <scope doc="extend list by appending elements from the iterable" ilk="function" name="extend" signature="L.extend(iterable)" />
        <scope doc="x.__delitem__(y) &lt;==&gt; del x[y]" ilk="function" name="__delitem__" signature="x.__delitem__(y) &lt;==&gt; del x[y]" />
        <scope doc="return a reverse iterator over the list" ilk="function" name="__reversed__" signature="L.__reversed__()" />
        <scope doc="x.__imul__(y) &lt;==&gt; x*=y" ilk="function" name="__imul__" signature="x.__imul__(y) &lt;==&gt; x*=y" />
        <scope doc="Use  of negative indices is not supported." ilk="function" name="__setslice__" signature="x.__setslice__(i, j, y) &lt;==&gt; x[i:j]=y" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__iadd__(y) &lt;==&gt; x+=y" ilk="function" name="__iadd__" signature="x.__iadd__(y) &lt;==&gt; x+=y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="Widget XView YView" doc="Listbox widget which can display a list of strings.&#xA;" ilk="class" name="Listbox">
        <scope doc="Remember the current X, Y coordinates." ilk="function" name="scan_mark" />
        <scope doc="Return 1 if INDEX is part of the selection." ilk="function" name="selection_includes" />
        <scope doc="Activate item identified by INDEX." ilk="function" name="activate" />
        <scope doc="Configure resources of an ITEM." ilk="function" name="itemconfigure" />
        <scope doc="Get index of item which is nearest to y coordinate Y." ilk="function" name="nearest" />
        <scope doc="Adjust the view of the listbox to 10 times the difference&#xA;between X and Y and the coordinates given in scan_mark." ilk="function" name="scan_dragto" />
        <scope doc="Set the fixed end oft the selection to INDEX." ilk="function" name="select_anchor" />
        <scope doc="Scroll such that INDEX is visible." ilk="function" name="see" />
        <scope doc="Clear the selection from FIRST to LAST (not included)." ilk="function" name="selection_clear" />
        <scope doc="Construct a listbox widget with the parent MASTER." ilk="function" name="__init__" />
        <scope doc="Return the number of elements in the listbox." ilk="function" name="size" />
        <scope doc="Return index of item identified with INDEX." ilk="function" name="index" />
        <scope doc="Set the selection from FIRST to LAST (not included) without&#xA;changing the currently selected elements." ilk="function" name="selection_set" />
        <scope doc="Return the resource value for an ITEM and an OPTION." ilk="function" name="itemcget" />
        <scope doc="Set the selection from FIRST to LAST (not included) without&#xA;changing the currently selected elements." ilk="function" name="select_set" />
        <scope doc="Configure resources of an ITEM." ilk="function" name="itemconfig" />
        <scope doc="Get list of items from FIRST to LAST (not included)." ilk="function" name="get" />
        <scope doc="Set the fixed end oft the selection to INDEX." ilk="function" name="selection_anchor" />
        <scope doc="Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle&#xA;which encloses the item identified by index in ARGS." ilk="function" name="bbox" />
        <scope doc="Insert ELEMENTS at INDEX." ilk="function" name="insert" />
        <scope doc="Clear the selection from FIRST to LAST (not included)." ilk="function" name="select_clear" />
        <scope doc="Return 1 if INDEX is part of the selection." ilk="function" name="select_includes" />
        <scope doc="Return list of indices of currently selected item." ilk="function" name="curselection" />
        <scope doc="Delete items from FIRST to LAST (not included)." ilk="function" name="delete" />
      </scope>
      <scope classrefs="object" doc="long(x[, base]) -&gt; integer&#xA;Convert a string or number to a long integer, if possible.  A floating point argument will be truncated towards zero (this does not include a string representation of a floating point number!)  When converting a string, use the optional base.  It is an error to supply a base when converting a non-string." ilk="class" name="LongType">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__ror__(y) &lt;==&gt; y|x" ilk="function" name="__ror__" signature="x.__ror__(y) &lt;==&gt; y|x" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" ilk="function" name="__lshift__" signature="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="Returns self, the complex conjugate of any long." ilk="function" name="conjugate" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="x.__and__(y) &lt;==&gt; x&amp;y" ilk="function" name="__and__" signature="x.__and__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" ilk="function" name="__rrshift__" signature="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="Returns size in memory, in bytes" ilk="function" name="__sizeof__" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope doc="x.__rand__(y) &lt;==&gt; y&amp;x" ilk="function" name="__rand__" signature="x.__rand__(y) &lt;==&gt; y&amp;x" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="x.__or__(y) &lt;==&gt; x|y" ilk="function" name="__or__" signature="x.__or__(y) &lt;==&gt; x|y" />
        <scope doc="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" ilk="function" name="__rlshift__" signature="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="Number of bits necessary to represent self in binary." ilk="function" name="bit_length" returns="int" signature="long.bit_length() -&gt; int or long" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" ilk="function" name="__rshift__" signature="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__invert__() &lt;==&gt; ~x" ilk="function" name="__invert__" signature="x.__invert__() &lt;==&gt; ~x" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope ilk="function" name="__format__" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x[y:z] &lt;==&gt; x[y.__index__():z.__index__()]" ilk="function" name="__index__" />
        <scope doc="x.__hex__() &lt;==&gt; hex(x)" ilk="function" name="__hex__" signature="x.__hex__() &lt;==&gt; hex(x)" />
        <scope doc="x.__oct__() &lt;==&gt; oct(x)" ilk="function" name="__oct__" signature="x.__oct__() &lt;==&gt; oct(x)" />
        <scope doc="x.__rxor__(y) &lt;==&gt; y^x" ilk="function" name="__rxor__" signature="x.__rxor__(y) &lt;==&gt; y^x" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="Truncating an Integral returns itself." ilk="function" name="__trunc__" />
        <scope doc="x.__xor__(y) &lt;==&gt; x^y" ilk="function" name="__xor__" signature="x.__xor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <variable citdl="str" name="MITER" />
      <variable citdl="str" name="MOVETO" />
      <variable citdl="str" name="MULTIPLE" />
      <scope classrefs="object" doc="&#xA;" ilk="class" name="MemberDescriptorType">
        <scope doc="descr.__set__(obj, value)" ilk="function" name="__set__" signature="descr.__set__(obj, value)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="descr.__get__(obj[, type]) -&gt; value" ilk="function" name="__get__" signature="descr.__get__(obj[, type]) -&gt; value" />
        <scope doc="descr.__delete__(obj)" ilk="function" name="__delete__" signature="descr.__delete__(obj)" />
      </scope>
      <scope classrefs="Widget" doc="Menu widget which allows to display menu bars, pull-down menus and pop-up menus.&#xA;" ilk="class" name="Menu">
        <scope doc="Add hierarchical menu item." ilk="function" name="add_cascade" />
        <scope doc="Activate entry at INDEX." ilk="function" name="activate" />
        <scope ilk="function" name="tk_nextMenu" />
        <scope ilk="function" name="tk_mbPost" />
        <scope doc="Add checkbutton menu item at INDEX." ilk="function" name="insert_checkbutton" />
        <scope ilk="function" name="tk_getMenuButtons" />
        <scope doc="Post the menu at position X,Y with entry ENTRY." ilk="function" name="tk_popup" />
        <scope doc="Unmap a menu." ilk="function" name="unpost" />
        <scope ilk="function" name="tk_mbButtonDown" />
        <scope doc="Add command menu item at INDEX." ilk="function" name="insert_command" />
        <scope doc="Construct menu widget with the parent MASTER." ilk="function" name="__init__" />
        <scope ilk="function" name="tk_traverseToMenu" />
        <scope doc="Return the index of a menu item identified by INDEX." ilk="function" name="index" />
        <scope doc="Addd radio menu item." ilk="function" name="add_radiobutton" />
        <scope doc="Configure a menu item at INDEX." ilk="function" name="entryconfig" />
        <scope doc="Add hierarchical menu item at INDEX." ilk="function" name="insert_cascade" />
        <scope ilk="function" name="tk_nextMenuEntry" />
        <scope doc="Internal function." ilk="function" name="add" />
        <scope doc="Add command menu item." ilk="function" name="add_command" />
        <scope doc="Addd radio menu item at INDEX." ilk="function" name="insert_radiobutton" />
        <scope doc="Return the type of the menu item at INDEX." ilk="function" name="type" />
        <scope ilk="function" name="tk_traverseWithinMenu" />
        <scope doc="Invoke a menu item identified by INDEX and execute the&#xA;associated command." ilk="function" name="invoke" />
        <scope doc="Return the y-position of the topmost pixel of the menu item&#xA;at INDEX." ilk="function" name="yposition" />
        <scope doc="Add separator at INDEX." ilk="function" name="insert_separator" />
        <scope doc="Display a menu at position X,Y." ilk="function" name="post" />
        <scope ilk="function" name="tk_bindForTraversal" />
        <scope doc="Configure a menu item at INDEX." ilk="function" name="entryconfigure" />
        <scope doc="Return the resource value of an menu item for OPTION at&#xA;INDEX." ilk="function" name="entrycget" />
        <scope doc="Internal function." ilk="function" name="insert" />
        <scope ilk="function" name="tk_firstMenu" />
        <scope ilk="function" name="tk_mbUnpost" />
        <scope doc="Add separator." ilk="function" name="add_separator" />
        <scope ilk="function" name="tk_invokeMenu" />
        <scope doc="Add checkbutton menu item." ilk="function" name="add_checkbutton" />
        <scope doc="Delete menu items between INDEX1 and INDEX2 (included)." ilk="function" name="delete" />
      </scope>
      <scope classrefs="Widget" doc="Menubutton widget, obsolete since Tk8.0.&#xA;" ilk="class" name="Menubutton">
        <scope ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Widget" doc="Message widget to display multiline text. Obsolete since Label does it too.&#xA;" ilk="class" name="Message">
        <scope ilk="function" name="__init__" />
      </scope>
      <scope classrefs="object" doc="instancemethod(function, instance, class)&#xA;Create an instance method object." ilk="class" name="MethodType">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="descr.__get__(obj[, type]) -&gt; value" ilk="function" name="__get__" signature="descr.__get__(obj[, type]) -&gt; value" />
      </scope>
      <scope doc="Internal class.&#xA;Base class which defines methods common for interior widgets." ilk="class" name="Misc">
        <scope doc="Unbind for this widget for event SEQUENCE  the function&#xA;identified with FUNCID." ilk="function" name="unbind" />
        <scope doc="Return the number of bits per pixel of the root window of&#xA;the screen of this widget." ilk="function" name="winfo_screendepth" />
        <scope doc="Return x coordinate of upper left corner of this widget on&#xA;the root window." ilk="function" name="winfo_rootx" />
        <scope doc="Return the window path name of this widget." ilk="function" name="__str__" />
        <scope doc="Return the number of pixels of the width of the screen of&#xA;this widget in mm." ilk="function" name="winfo_screenmmwidth" />
        <scope doc="Direct input focus to this widget." ilk="function" name="focus" />
        <scope doc="Configure column INDEX of a grid." ilk="function" name="grid_columnconfigure" />
        <scope doc="Raise this widget in the stacking order." ilk="function" name="tkraise" />
        <scope doc="Internal function." ilk="function" name="_bind" />
        <scope doc="Internal function." ilk="function" name="_displayof" />
        <scope doc="Cancel scheduling of function identified with ID." ilk="function" name="after_cancel" />
        <scope doc="Return the y coordinate of the pointer on the root window." ilk="function" name="winfo_pointery" />
        <scope doc="Return the x coordinate of the pointer on the root window." ilk="function" name="winfo_pointerx" />
        <scope doc="Return a boolean value for Tcl boolean values true and false&#xA;given as parameter." ilk="function" name="getboolean" />
        <scope doc="Return the widget which has currently the focus in the&#xA;application." ilk="function" name="focus_get" />
        <scope doc="The widget under mouse will get automatically focus." ilk="function" name="tk_focusFollowsMouse" />
        <scope doc="Return true if the widget and all its higher ancestors are&#xA;mapped." ilk="function" name="winfo_viewable" />
        <scope doc="Return true if this widget exists." ilk="function" name="winfo_exists" />
        <scope doc="Return y coordinate of upper left corner of this widget on&#xA;the root window." ilk="function" name="winfo_rooty" />
        <scope doc="Rounded integer value of winfo_fpixels." ilk="function" name="winfo_pixels" />
        <scope doc="Call FUNC once if the Tcl main loop has no event to process." ilk="function" name="after_idle" />
        <scope doc="Call the mainloop of Tk." ilk="function" name="mainloop" />
        <scope doc="Return a tuple of x and y coordinates of the pointer on the&#xA;root window." ilk="function" name="winfo_pointerxy" />
        <scope doc="Return the resource value for a KEY given as string." ilk="function" name="__getitem__" />
        <scope doc="Return the widget which would have the focus if top level&#xA;for this widget gets the focus from the window manager." ilk="function" name="focus_lastfor" />
        <scope doc="Return the number of pixels of the height of the screen of&#xA;this widget in mm." ilk="function" name="winfo_screenmmheight" />
        <scope doc="Return a list of all visuals available for the screen of&#xA;this widget." ilk="function" name="winfo_visualsavailable" />
        <scope doc="Return the name of this widget." ilk="function" name="winfo_name" />
        <scope doc="Return the number of pixels of the height of the screen of&#xA;this widget in pixel." ilk="function" name="winfo_screenheight" />
        <scope doc="Return the resource value for a KEY given as string." ilk="function" name="cget" />
        <scope doc="Generate an event SEQUENCE." ilk="function" name="event_generate" />
        <scope doc="Return the X identifier for the visual for this widget." ilk="function" name="winfo_visualid" />
        <scope doc="Return a list of all existing image names." ilk="function" name="image_names" />
        <scope doc="Internal function." ilk="function" name="_grid_configure" />
        <scope doc="Return the widget which is at the root coordinates ROOTX,&#xA;ROOTY." ilk="function" name="winfo_containing" />
        <scope doc="Return the name of the parent of this widget." ilk="function" name="winfo_parent" />
        <scope doc="Return the number of pixels for the given distance NUMBER&#xA;(e.g." ilk="function" name="winfo_fpixels" />
        <scope doc="Bind a virtual event VIRTUAL (of the form &lt;&lt;Name&gt;&gt;) to an&#xA;event SEQUENCE such that the virtual event is triggered&#xA;whenever SEQUENCE occurs." ilk="function" name="event_add" />
        <scope doc="Return None, &quot;local&quot; or &quot;global&quot; if this widget has no, a&#xA;local or a global grab." ilk="function" name="grab_status" />
        <scope doc="Wait until the variable is modified." ilk="function" name="waitvar" />
        <scope doc="Set global grab for this widget." ilk="function" name="grab_set_global" />
        <scope doc="Return the number of the cells in the colormap of the screen&#xA;of this widget." ilk="function" name="winfo_screencells" />
        <scope doc="Return window class name of this widget." ilk="function" name="winfo_class" />
        <scope doc="Unbind a virtual event VIRTUAL from SEQUENCE." ilk="function" name="event_delete" />
        <scope doc="Return the number of pixels of the width of the screen of&#xA;this widget in pixel." ilk="function" name="winfo_screenwidth" />
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" name="pack_propagate" />
        <scope doc="Return a list of all available image types (e.g." ilk="function" name="image_types" />
        <scope doc="Useless. Not implemented in Tk." ilk="function" name="colormodel" />
        <scope doc="Internal function." ilk="function" name="_Misc__winfo_parseitem" />
        <scope doc="Set Tcl internal variable, whether the look and feel should&#xA;adhere to Motif." ilk="function" name="tk_strictMotif" />
        <scope doc="Configure column INDEX of a grid." ilk="function" name="columnconfigure" />
        <scope doc="Direct input focus to this widget." ilk="function" name="focus_set" />
        <scope doc="Return owner of X selection." ilk="function" name="selection_own_get" />
        <scope doc="Return height of this widget." ilk="function" name="winfo_height" />
        <scope doc="Return identifier ID for this widget." ilk="function" name="winfo_id" />
        <scope ilk="function" name="__setitem__" />
        <scope doc="Direct input focus to this widget even if the application&#xA;does not have the focus." ilk="function" name="focus_force" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" name="place_slaves" />
        <scope doc="Return one of the strings directcolor, grayscale,&#xA;pseudocolor, staticcolor, staticgray, or truecolor for the&#xA;colormodel of this widget." ilk="function" name="winfo_visual" />
        <scope doc="Return the value for an option NAME for this widget with&#xA;CLASSNAME." ilk="function" name="option_get" />
        <scope doc="Return the x coordinate of the upper left corner of this&#xA;widget in the parent." ilk="function" name="winfo_x" />
        <scope doc="Return a tuple of the number of column and rows in the grid." ilk="function" name="grid_size" />
        <scope doc="Internal function." ilk="function" name="_options" />
        <scope doc="Return the screen name of this widget." ilk="function" name="winfo_screen" />
        <scope doc="Set grab for this widget." ilk="function" name="grab_set" />
        <scope doc="Return the next widget in the focus order which follows&#xA;widget which has currently the focus." ilk="function" name="tk_focusNext" />
        <scope doc="Return a tuple of the number of column and rows in the grid." ilk="function" name="size" />
        <scope doc="Ring a display&apos;s bell." ilk="function" name="bell" />
        <scope doc="Enter event loop until all idle callbacks have been called." ilk="function" name="update_idletasks" />
        <scope doc="Return a list of all virtual events or the information about&#xA;the SEQUENCE bound to the virtual event VIRTUAL." ilk="function" name="event_info" />
        <scope doc="Return the contents of the current X selection." ilk="function" name="selection_get" />
        <scope doc="Send Tcl command CMD to different interpreter INTERP to be&#xA;executed." ilk="function" name="send" />
        <scope doc="Return a tuple of integer coordinates for the bounding box&#xA;of this widget controlled by the geometry manager grid." ilk="function" name="grid_bbox" />
        <scope doc="Return the Tkinter instance of a widget identified by its&#xA;Tcl name NAME." ilk="function" name="nametowidget" />
        <scope doc="Return number of cells in the colormap for this widget." ilk="function" name="winfo_cells" />
        <scope doc="Return a tuple of integer coordinates for the bounding box&#xA;of this widget controlled by the geometry manager grid." ilk="function" name="bbox" />
        <scope doc="Do not use. Needed in Tk 3.6 and earlier." ilk="function" name="tk_menuBar" />
        <scope doc="Quit the Tcl interpreter. All widgets will be destroyed." ilk="function" name="quit" />
        <scope doc="Internal function." ilk="function" name="_configure" />
        <scope doc="Return name of atom with identifier ID." ilk="function" name="winfo_atomname" />
        <scope doc="Specify a function COMMAND to call if the X selection owned&#xA;by this widget is queried by another application." ilk="function" name="selection_handle" />
        <scope doc="Internal function." ilk="function" name="_substitute" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" name="pack_slaves" />
        <scope doc="Return a list of all widgets which are children of this&#xA;widget." ilk="function" name="winfo_children" />
        <scope doc="Return the x offset of the virtual root relative to the root&#xA;window of the screen of this widget." ilk="function" name="winfo_vrootx" />
        <scope doc="Return the toplevel widget of this widget." ilk="function" name="winfo_toplevel" />
        <scope doc="Return the number of bits per pixel." ilk="function" name="winfo_depth" />
        <scope doc="Internal function." ilk="function" name="_Misc__winfo_getint" />
        <scope doc="Return the y offset of the virtual root relative to the root&#xA;window of the screen of this widget." ilk="function" name="winfo_vrooty" />
        <scope doc="Return the y coordinate of the upper left corner of this&#xA;widget in the parent." ilk="function" name="winfo_y" />
        <scope doc="Internal function." ilk="function" name="_report_exception" />
        <scope doc="Return requested width of this widget." ilk="function" name="winfo_reqwidth" />
        <scope doc="Return true if this widget is mapped." ilk="function" name="winfo_ismapped" />
        <scope doc="Lower this widget in the stacking order." ilk="function" name="lower" />
        <scope doc="Return previous widget in the focus order." ilk="function" name="tk_focusPrev" />
        <scope doc="Raise this widget in the stacking order." ilk="function" name="lift" />
        <scope doc="Internal function." ilk="function" name="deletecommand" />
        <scope doc="Return value of Tcl variable NAME." ilk="function" name="getvar" />
        <scope doc="Bind to all widgets at an event SEQUENCE a call to function&#xA;FUNC." ilk="function" name="bind_all" />
        <scope doc="Return the width of the virtual root window associated with&#xA;this widget in pixel." ilk="function" name="winfo_vrootwidth" />
        <scope doc="Wait until the variable is modified." ilk="function" name="wait_variable" />
        <scope doc="Release grab for this widget if currently set." ilk="function" name="grab_release" />
        <scope doc="Set a new color scheme for all widget elements." ilk="function" name="tk_setPalette" />
        <scope doc="Bind to widgets with bindtag CLASSNAME at event SEQUENCE a&#xA;call of function FUNC." ilk="function" name="bind_class" />
        <scope doc="Return the Tkinter instance of a widget identified by its&#xA;Tcl name NAME." ilk="function" name="_nametowidget" />
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" name="grid_propagate" />
        <scope doc="Return a newly created Tcl function." ilk="function" name="register" />
        <scope doc="Internal function." ilk="function" name="_getboolean" />
        <scope doc="Return the widget which has currently the focus on the&#xA;display where this widget is located." ilk="function" name="focus_displayof" />
        <scope doc="Set a VALUE (second parameter) for an option PATTERN (first&#xA;parameter)." ilk="function" name="option_add" />
        <scope doc="Clear the data in the Tk clipboard." ilk="function" name="clipboard_clear" />
        <scope ilk="function" name="__contains__" />
        <scope doc="Return requested height of this widget." ilk="function" name="winfo_reqheight" />
        <scope doc="Retrieve data from the clipboard on window&apos;s display." ilk="function" name="clipboard_get" />
        <scope doc="Set or get the list of bindtags for this widget." ilk="function" name="bindtags" />
        <scope doc="Change the color scheme to light brown as used in Tk 3.6 and&#xA;before." ilk="function" name="tk_bisque" />
        <scope doc="Clear the current X selection." ilk="function" name="selection_clear" />
        <scope doc="Return widget which has currently the grab in this&#xA;application or None." ilk="function" name="grab_current" />
        <scope doc="Configure resources of a widget." ilk="function" name="configure" />
        <scope doc="Append STRING to the Tk clipboard." ilk="function" name="clipboard_append" />
        <scope doc="Internal function." ilk="function" name="_root" />
        <scope doc="Wait until a WIDGET is destroyed." ilk="function" name="wait_window" />
        <scope doc="Return geometry string for this widget in the form&#xA;&quot;widthxheight+X+Y&quot;." ilk="function" name="winfo_geometry" />
        <scope doc="Internal function." ilk="function" name="destroy" />
        <scope doc="Become owner of X selection." ilk="function" name="selection_own" />
        <scope doc="Return integer which represents atom NAME." ilk="function" name="winfo_atom" />
        <scope doc="Configure resources of a widget." ilk="function" name="config" />
        <scope doc="Set Tcl variable NAME to VALUE." ilk="function" name="setvar" />
        <scope doc="Return tuple of decimal values for red, green, blue for&#xA;COLOR in this widget." ilk="function" name="winfo_rgb" />
        <scope doc="Return a list of all resource names of this widget." ilk="function" name="keys" />
        <scope doc="Internal function." ilk="function" name="_getdoubles" />
        <scope doc="Call function once after given time." ilk="function" name="after" />
        <scope doc="Enter event loop until all pending events have been&#xA;processed by Tcl." ilk="function" name="update" />
        <scope doc="Return information of the X-Server of the screen of this&#xA;widget in the form &quot;XmajorRminor vendor vendorVersion&quot;." ilk="function" name="winfo_server" />
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" name="propagate" />
        <scope doc="Wait until the visibility of a WIDGET changes (e.g." ilk="function" name="wait_visibility" />
        <scope doc="Return the height of the virtual root window associated with&#xA;this widget in pixels." ilk="function" name="winfo_vrootheight" />
        <scope doc="Read file FILENAME into the option database." ilk="function" name="option_readfile" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" name="grid_slaves" />
        <scope doc="Configure row INDEX of a grid." ilk="function" name="grid_rowconfigure" />
        <scope doc="Return the window mananger name for this widget." ilk="function" name="winfo_manager" />
        <scope doc="Return the width of this widget." ilk="function" name="winfo_width" />
        <scope doc="Return a newly created Tcl function." ilk="function" name="_register" />
        <scope doc="Bind to this widget at event SEQUENCE a call to function&#xA;FUNC." ilk="function" name="bind" />
        <scope doc="Unbind for all widgets for event SEQUENCE all functions." ilk="function" name="unbind_all" />
        <scope doc="Internal function." ilk="function" name="_getints" />
        <scope doc="Return the pathname of the widget given by ID." ilk="function" name="winfo_pathname" />
        <scope doc="Unbind for a all widgets with bindtag CLASSNAME for event&#xA;SEQUENCE all functions." ilk="function" name="unbind_class" />
        <scope doc="Return true if at the last color request the colormap was&#xA;full." ilk="function" name="winfo_colormapfull" />
        <scope doc="Return the name of all Tcl interpreters for this display." ilk="function" name="winfo_interps" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" name="slaves" />
        <scope doc="Return a tuple of column and row which identify the cell at&#xA;which the pixel at position X and Y inside the master widget&#xA;is located." ilk="function" name="grid_location" />
        <scope doc="Return one of the strings directcolor, grayscale,&#xA;pseudocolor, staticcolor, staticgray, or truecolor for the&#xA;default colormodel of this screen." ilk="function" name="winfo_screenvisual" />
        <scope doc="Configure row INDEX of a grid." ilk="function" name="rowconfigure" />
        <scope doc="Clear the option database." ilk="function" name="option_clear" />
      </scope>
      <scope classrefs="object" doc="module(name[, doc])&#xA;Create a module object. The name must be a string; the optional doc argument can have any type." ilk="class" name="ModuleType">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope ilk="function" name="__init__" />
      </scope>
      <variable citdl="str" name="N" />
      <variable citdl="str" name="NE" />
      <variable citdl="int" name="NO" />
      <variable citdl="str" name="NONE" />
      <variable citdl="str" name="NORMAL" />
      <variable citdl="str" name="NS" />
      <variable citdl="str" name="NSEW" />
      <variable citdl="str" name="NUMERIC" />
      <variable citdl="str" name="NW" />
      <scope doc="Inhibit setting of default root window." ilk="function" name="NoDefaultRoot" signature="NoDefaultRoot()" />
      <scope classrefs="object" doc="&#xA;" ilk="class" name="NoneType">
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="NotImplementedType">
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
      </scope>
      <variable citdl="int" name="OFF" />
      <variable citdl="int" name="ON" />
      <variable citdl="str" name="OUTSIDE" />
      <scope doc="The most base type&#xA;" ilk="class" name="ObjectType">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="helper for pickle" ilk="function" name="__reduce_ex__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="default object formatter" ilk="function" name="__format__" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Menubutton" doc="OptionMenu which allows the user to select a value from a menu.&#xA;" ilk="class" name="OptionMenu">
        <scope doc="Destroy this widget and the associated menu." ilk="function" name="destroy" />
        <scope ilk="function" name="__getitem__" />
        <scope doc="Construct an optionmenu widget with the parent MASTER, with&#xA;the resource textvariable set to VARIABLE, the initially&#xA;selected value VALUE, the other menu values VALUES and an&#xA;additional keyword argument command." ilk="function" name="__init__" />
      </scope>
      <variable citdl="str" name="PAGES" />
      <variable citdl="str" name="PIESLICE" />
      <variable citdl="str" name="PROJECTING" />
      <scope doc="Geometry manager Pack.&#xA;Base class to use the methods pack_* in every widget." ilk="class" name="Pack">
        <scope doc="Return information about the packing options for this&#xA;widget." ilk="function" name="info" />
        <scope doc="Unmap this widget and do not use it for the packing order." ilk="function" name="forget" />
        <scope doc="Pack a widget in the parent widget." ilk="function" name="configure" />
        <scope doc="Pack a widget in the parent widget." ilk="function" name="pack_configure" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" name="pack_slaves" />
        <scope doc="Unmap this widget and do not use it for the packing order." ilk="function" name="pack_forget" />
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" name="pack_propagate" />
        <scope doc="Set or get the status for propagation of geometry&#xA;information." ilk="function" name="propagate" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" name="slaves" />
        <scope doc="Return information about the packing options for this&#xA;widget." ilk="function" name="pack_info" />
        <scope doc="Pack a widget in the parent widget." ilk="function" name="config" />
        <scope doc="Pack a widget in the parent widget." ilk="function" name="pack" />
      </scope>
      <scope classrefs="Widget" doc="panedwindow widget.&#xA;" ilk="class" name="PanedWindow">
        <scope doc="Remove the proxy from the display." ilk="function" name="proxy_forget" />
        <scope doc="Returns an ordered list of the child panes." ilk="function" name="panes" />
        <scope doc="Remove the pane containing child from the panedwindow" ilk="function" name="forget" />
        <scope doc="Place the sash given by index at the given coordinates" ilk="function" name="sash_place" />
        <scope doc="Remove the pane containing child from the panedwindow" ilk="function" name="remove" />
        <scope doc="Internal function." ilk="function" name="sash" />
        <scope doc="Add a child widget to the panedwindow in a new pane." ilk="function" name="add" />
        <scope doc="Query or modify the management options for window." ilk="function" name="paneconfigure" />
        <scope doc="Identify the panedwindow component at point x, y" ilk="function" name="identify" />
        <scope doc="Internal function." ilk="function" name="proxy" />
        <scope doc="Place the proxy at the given x and y coordinates." ilk="function" name="proxy_place" />
        <scope doc="Records x and y for the sash given by index;" ilk="function" name="sash_mark" />
        <scope doc="Return the x and y pair of the most recent proxy location" ilk="function" name="proxy_coord" />
        <scope doc="Query or modify the management options for window." ilk="function" name="paneconfig" />
        <scope doc="Query a management option for window." ilk="function" name="panecget" />
        <scope doc="Construct a panedwindow widget with the parent MASTER." ilk="function" name="__init__" />
        <scope doc="Return the current x and y pair for the sash given by index." ilk="function" name="sash_coord" />
      </scope>
      <scope classrefs="Image" doc="Widget which can display colored images in GIF, PPM/PGM format.&#xA;" ilk="class" name="PhotoImage">
        <scope doc="# XXX config" ilk="function" name="__getitem__" />
        <scope doc="Return the color (red, green, blue) of the pixel at X,Y." ilk="function" name="get" />
        <scope doc="Return a new PhotoImage with the same image as this widget&#xA;but zoom it with X and Y." ilk="function" name="zoom" />
        <scope doc="Write image to file FILENAME in FORMAT starting from&#xA;position FROM_COORDS." ilk="function" name="write" />
        <scope doc="Return a new PhotoImage based on the same image as this&#xA;widget but use only every Xth or Yth pixel." ilk="function" name="subsample" />
        <scope doc="Display a transparent image." ilk="function" name="blank" />
        <scope doc="Put row formatted colors to image starting from position TO,&#xA;e.g." ilk="function" name="put" />
        <scope doc="Return a new PhotoImage with the same image as this widget." ilk="function" name="copy" />
        <scope doc="Return the value of OPTION." ilk="function" name="cget" />
        <scope doc="Create an image with NAME." ilk="function" name="__init__" />
      </scope>
      <scope doc="Geometry manager Place.&#xA;Base class to use the methods place_* in every widget." ilk="class" name="Place">
        <scope doc="Return information about the placing options for this&#xA;widget." ilk="function" name="info" />
        <scope doc="Place a widget in the parent widget." ilk="function" name="configure" />
        <scope doc="Unmap this widget." ilk="function" name="place_forget" />
        <scope doc="Place a widget in the parent widget." ilk="function" name="place_configure" />
        <scope doc="Return information about the placing options for this&#xA;widget." ilk="function" name="place_info" />
        <scope doc="Place a widget in the parent widget." ilk="function" name="place" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" name="slaves" />
        <scope doc="Return a list of all slaves of this widget in its packing&#xA;order." ilk="function" name="place_slaves" />
        <scope doc="Place a widget in the parent widget." ilk="function" name="config" />
        <scope doc="Unmap this widget." ilk="function" name="forget" />
      </scope>
      <variable citdl="str" name="RADIOBUTTON" />
      <variable citdl="str" name="RAISED" />
      <variable citdl="int" name="READABLE" />
      <variable citdl="str" name="RIDGE" />
      <variable citdl="str" name="RIGHT" />
      <variable citdl="str" name="ROUND" />
      <scope classrefs="Widget" doc="Radiobutton widget which shows only one of several buttons in on-state.&#xA;" ilk="class" name="Radiobutton">
        <scope doc="Put the button in off-state." ilk="function" name="deselect" />
        <scope doc="Toggle the button and invoke a command if given as resource." ilk="function" name="invoke" />
        <scope doc="Flash the button." ilk="function" name="flash" />
        <scope doc="Put the button in on-state." ilk="function" name="select" />
        <scope doc="Construct a radiobutton widget with the parent MASTER." ilk="function" name="__init__" />
      </scope>
      <variable citdl="str" name="S" />
      <variable citdl="str" name="SCROLL" />
      <variable citdl="str" name="SE" />
      <variable citdl="str" name="SEL" />
      <variable citdl="str" name="SEL_FIRST" />
      <variable citdl="str" name="SEL_LAST" />
      <variable citdl="str" name="SEPARATOR" />
      <variable citdl="str" name="SINGLE" />
      <variable citdl="str" name="SOLID" />
      <variable citdl="str" name="SUNKEN" />
      <variable citdl="str" name="SW" />
      <scope classrefs="Widget" doc="Scale widget which can display a numerical scale.&#xA;" ilk="class" name="Scale">
        <scope doc="Set the value to VALUE." ilk="function" name="set" />
        <scope doc="Get the current value as integer or float." ilk="function" name="get" />
        <scope doc="Return a tuple (X,Y) of the point along the centerline of&#xA;the trough that corresponds to VALUE or the current value if&#xA;None is given." ilk="function" name="coords" />
        <scope doc="Return where the point X,Y lies." ilk="function" name="identify" />
        <scope doc="Construct a scale widget with the parent MASTER." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Widget" doc="Scrollbar widget which displays a slider at a certain position.&#xA;" ilk="class" name="Scrollbar">
        <scope doc="Display the element at INDEX with activebackground and&#xA;activerelief." ilk="function" name="activate" />
        <scope doc="Return the current fractional values (upper and lower end)&#xA;of the slider position." ilk="function" name="get" />
        <scope doc="Set the fractional values of the slider position (upper and&#xA;lower ends as value between 0 and 1)." ilk="function" name="set" />
        <scope doc="Return the element under position X,Y as one of&#xA;&quot;arrow1&quot;,&quot;slider&quot;,&quot;arrow2&quot; or &quot;&quot;." ilk="function" name="identify" />
        <scope doc="Return the fractional value which corresponds to a slider&#xA;position of X,Y." ilk="function" name="fraction" />
        <scope doc="Return the fractional change of the scrollbar setting if it&#xA;would be moved by DELTAX or DELTAY pixels." ilk="function" name="delta" />
        <scope doc="Construct a scrollbar widget with the parent MASTER." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="object" doc="slice([start,] stop[, step])&#xA;Create a slice object.  This is used for extended slicing (e.g. a[0:10:2])." ilk="class" name="SliceType">
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="Assuming a sequence of length len, calculate the start and&#xA;stop indices, and the stride length of the extended slice&#xA;described by S." ilk="function" name="indices" signature="S.indices(len) -&gt; (start, stop, stride)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
      </scope>
      <scope classrefs="Widget XView" doc="spinbox widget.&#xA;" ilk="class" name="Spinbox">
        <scope doc="Records x and the current view in the spinbox window;" ilk="function" name="scan_mark" />
        <scope doc="Returns the numerical index corresponding to index" ilk="function" name="index" />
        <scope doc="Internal function." ilk="function" name="selection" />
        <scope doc="Alter the position of the insertion cursor." ilk="function" name="icursor" />
        <scope doc="Causes the specified element to be invoked" ilk="function" name="invoke" />
        <scope doc="Returns the spinbox&apos;s string" ilk="function" name="get" />
        <scope doc="Internal function." ilk="function" name="scan" />
        <scope doc="Compute the difference between the given x argument and the&#xA;x argument to the last scan mark command" ilk="function" name="scan_dragto" />
        <scope doc="Returns the name of the widget at position x, y" ilk="function" name="identify" />
        <scope doc="Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle&#xA;which encloses the character given by index." ilk="function" name="bbox" />
        <scope doc="Sets or gets the currently selected element." ilk="function" name="selection_element" />
        <scope doc="Insert string s at index" ilk="function" name="insert" />
        <scope doc="Locate the end of the selection nearest to the character&#xA;given by index," ilk="function" name="selection_adjust" />
        <scope doc="Clear the selection" ilk="function" name="selection_clear" />
        <scope doc="Construct a spinbox widget with the parent MASTER." ilk="function" name="__init__" />
        <scope doc="Delete one or more elements of the spinbox." ilk="function" name="delete" />
      </scope>
      <scope classrefs="basestring" doc="str(object) -&gt; string&#xA;Return a nice string representation of the object. If the argument is a string, the return value is the same object." ilk="class" name="StringType">
        <scope doc="Return a copy of the string S converted to uppercase." ilk="function" name="upper" returns="str" signature="S.upper() -&gt; string" />
        <scope doc="Return a formatted version of S as described by format_spec." ilk="function" name="__format__" returns="str" signature="S.__format__(format_spec) -&gt; string" />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope doc="Return True if S starts with the specified prefix, False&#xA;otherwise." ilk="function" name="startswith" returns="bool" signature="S.startswith(prefix[, start[, end]]) -&gt; bool" />
        <scope doc="Return a copy of the string S with leading whitespace&#xA;removed." ilk="function" name="lstrip" returns="str" signature="S.lstrip([chars]) -&gt; string or unicode" />
        <scope doc="Return a copy of the string S with only its first character&#xA;capitalized." ilk="function" name="capitalize" returns="str" signature="S.capitalize() -&gt; string" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="Search for the separator sep in S, starting at the end of S,&#xA;and return the part before it, the separator itself, and the&#xA;part after it." ilk="function" name="rpartition" signature="S.rpartition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return a copy of string S with all occurrences of substring&#xA;old replaced by new." ilk="function" name="replace" returns="str" signature="S.replace(old, new[, count]) -&gt; string" />
        <scope doc="Return True if all characters in S are digits and there is&#xA;at least one character in S, False otherwise." ilk="function" name="isdigit" returns="bool" signature="S.isdigit() -&gt; bool" />
        <scope doc="Return True if S ends with the specified suffix, False&#xA;otherwise." ilk="function" name="endswith" returns="bool" signature="S.endswith(suffix[, start[, end]]) -&gt; bool" />
        <scope doc="Return a list of the lines in S, breaking at line&#xA;boundaries." ilk="function" name="splitlines" returns="list" signature="S.splitlines([keepends]) -&gt; list of strings" />
        <scope doc="Return a copy of S where all tab characters are expanded&#xA;using spaces." ilk="function" name="expandtabs" returns="str" signature="S.expandtabs([tabsize]) -&gt; string" />
        <scope doc="Return a copy of the string S with leading and trailing&#xA;whitespace removed." ilk="function" name="strip" returns="str" signature="S.strip([chars]) -&gt; string or unicode" />
        <scope doc="x.__rmul__(n) &lt;==&gt; n*x" ilk="function" name="__rmul__" signature="x.__rmul__(n) &lt;==&gt; n*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="Return S left-justified in a string of length width." ilk="function" name="ljust" returns="str" signature="S.ljust(width[, fillchar]) -&gt; string" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="Like S.find() but raise ValueError when the substring is not&#xA;found." ilk="function" name="index" returns="int" signature="S.index(sub [,start [,end]]) -&gt; int" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return True if all characters in S are alphanumeric and&#xA;there is at least one character in S, False otherwise." ilk="function" name="isalnum" returns="bool" signature="S.isalnum() -&gt; bool" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="Like S.rfind() but raise ValueError when the substring is&#xA;not found." ilk="function" name="rindex" returns="int" signature="S.rindex(sub [,start [,end]]) -&gt; int" />
        <scope doc="Return a list of the words in the string S, using sep as the&#xA;delimiter string, starting at the end of the string and&#xA;working to the front." ilk="function" name="rsplit" returns="list" signature="S.rsplit([sep [,maxsplit]]) -&gt; list of strings" />
        <scope doc="Return a formatted version of S, using substitutions from&#xA;args and kwargs." ilk="function" name="format" returns="str" signature="S.format(*args, **kwargs) -&gt; string" />
        <scope doc="Return the lowest index in S where substring sub is found,&#xA;such that sub is contained within s[start:end]." ilk="function" name="find" returns="int" signature="S.find(sub [,start [,end]]) -&gt; int" />
        <scope doc="Decodes S using the codec registered for encoding." ilk="function" name="decode" returns="object" signature="S.decode([encoding[,errors]]) -&gt; object" />
        <scope doc="Return True if all characters in S are alphabetic and there&#xA;is at least one character in S, False otherwise." ilk="function" name="isalpha" returns="bool" signature="S.isalpha() -&gt; bool" />
        <scope doc="Return a list of the words in the string S, using sep as the&#xA;delimiter string." ilk="function" name="split" returns="list" signature="S.split([sep [,maxsplit]]) -&gt; list of strings" />
        <scope doc="Return a copy of the string S with trailing whitespace&#xA;removed." ilk="function" name="rstrip" returns="str" signature="S.rstrip([chars]) -&gt; string or unicode" />
        <scope doc="Encodes S using the codec registered for encoding." ilk="function" name="encode" returns="object" signature="S.encode([encoding[,errors]]) -&gt; object" />
        <scope ilk="function" name="_formatter_parser" />
        <scope doc="Return a copy of the string S, where all characters&#xA;occurring in the optional argument deletechars are removed,&#xA;and the remaining characters have been mapped through the&#xA;given translation table, which must be a string of length&#xA;256." ilk="function" name="translate" returns="str" signature="S.translate(table [,deletechars]) -&gt; string" />
        <scope doc="Return True if all characters in S are whitespace and there&#xA;is at least one character in S, False otherwise." ilk="function" name="isspace" returns="bool" signature="S.isspace() -&gt; bool" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__mul__(n) &lt;==&gt; x*n" ilk="function" name="__mul__" signature="x.__mul__(n) &lt;==&gt; x*n" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="Return S right-justified in a string of length width." ilk="function" name="rjust" returns="str" signature="S.rjust(width[, fillchar]) -&gt; string" />
        <scope doc="Return a copy of the string S with uppercase characters&#xA;converted to lowercase and vice versa." ilk="function" name="swapcase" returns="str" signature="S.swapcase() -&gt; string" />
        <scope doc="Return True if all cased characters in S are lowercase and&#xA;there is at least one cased character in S, False otherwise." ilk="function" name="islower" returns="bool" signature="S.islower() -&gt; bool" />
        <scope doc="Pad a numeric string S with zeros on the left, to fill a&#xA;field of the specified width." ilk="function" name="zfill" returns="str" signature="S.zfill(width) -&gt; string" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope doc="Return the number of non-overlapping occurrences of&#xA;substring sub in string S[start:end]." ilk="function" name="count" returns="int" signature="S.count(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return a copy of the string S converted to lowercase." ilk="function" name="lower" returns="str" signature="S.lower() -&gt; string" />
        <scope doc="Return a string which is the concatenation of the strings in&#xA;the iterable." ilk="function" name="join" returns="str" signature="S.join(iterable) -&gt; string" />
        <scope doc="Return S centered in a string of length width." ilk="function" name="center" returns="str" signature="S.center(width[, fillchar]) -&gt; string" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="Search for the separator sep in S, and return the part&#xA;before it, the separator itself, and the part after it." ilk="function" name="partition" signature="S.partition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return the highest index in S where substring sub is found,&#xA;such that sub is contained within s[start:end]." ilk="function" name="rfind" returns="int" signature="S.rfind(sub [,start [,end]]) -&gt; int" />
        <scope doc="Return True if S is a titlecased string and there is at&#xA;least one character in S, i.e." ilk="function" name="istitle" returns="bool" signature="S.istitle() -&gt; bool" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope ilk="function" name="_formatter_field_name_split" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="Return a titlecased version of S, i.e." ilk="function" name="title" returns="str" signature="S.title() -&gt; string" />
        <scope doc="Return True if all cased characters in S are uppercase and&#xA;there is at least one cased character in S, False otherwise." ilk="function" name="isupper" returns="bool" signature="S.isupper() -&gt; bool" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <variable citdl="tuple" name="StringTypes" />
      <scope classrefs="Variable" doc="Value holder for strings variables.&#xA;" ilk="class" name="StringVar">
        <scope doc="Return value of variable as string." ilk="function" name="get" />
        <scope doc="Construct a string variable." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Button" doc="&#xA;" ilk="class" name="Studbutton">
        <scope ilk="function" name="__init__" />
      </scope>
      <variable citdl="str" name="TOP" />
      <variable citdl="int" name="TRUE" />
      <scope ilk="function" name="Tcl" signature="Tcl(screenName=None, baseName=None, className=&apos;Tk&apos;, useTk=0)" />
      <scope classrefs="Exception" doc="&#xA;" ilk="class" name="TclError" />
      <variable citdl="float" name="TclVersion" />
      <scope classrefs="Widget XView YView" doc="Text widget which can display text in various forms.&#xA;" ilk="class" name="Text">
        <scope doc="Undoes the last edit action" ilk="function" name="edit_undo" />
        <scope doc="Remember the current X, Y coordinates." ilk="function" name="scan_mark" />
        <scope doc="Add tag TAGNAME to all characters between INDEX1 and index2&#xA;in ARGS." ilk="function" name="tag_add" />
        <scope doc="Return the contents of the widget between index1 and index2." ilk="function" name="dump" />
        <scope doc="Create an embedded image at INDEX." ilk="function" name="image_create" />
        <scope doc="Adjust the view of the text to 10 times the difference&#xA;between X and Y and the coordinates given in scan_mark." ilk="function" name="scan_dragto" />
        <scope doc="Return whether between index INDEX1 and index INDEX2 the&#xA;relation OP is satisfied." ilk="function" name="compare" />
        <scope ilk="function" name="tk_textResetAnchor" />
        <scope doc="Scroll such that the character at INDEX is visible." ilk="function" name="see" />
        <scope doc="Return a list of ranges of text which have tag TAGNAME." ilk="function" name="tag_ranges" />
        <scope doc="Return a list of all tag names." ilk="function" name="tag_names" />
        <scope doc="Return the value of OPTION of an embedded image at INDEX." ilk="function" name="image_cget" />
        <scope doc="Return the value of OPTION for tag TAGNAME." ilk="function" name="tag_cget" />
        <scope doc="Change the gravity of a mark MARKNAME to DIRECTION (LEFT or&#xA;RIGHT)." ilk="function" name="mark_gravity" />
        <scope doc="Configure an embedded image at INDEX." ilk="function" name="image_configure" />
        <scope doc="Clears the undo and redo stacks" ilk="function" name="edit_reset" />
        <scope doc="Change the priority of tag TAGNAME such that it is higher&#xA;than the priority of ABOVETHIS." ilk="function" name="tag_raise" />
        <scope doc="Return the index in the form line.char for INDEX." ilk="function" name="index" />
        <scope doc="Inserts a separator (boundary) on the undo stack." ilk="function" name="edit_separator" />
        <scope doc="Redo the last undone edit" ilk="function" name="edit_redo" />
        <scope doc="Bind to all characters with TAGNAME at event SEQUENCE a call&#xA;to function FUNC." ilk="function" name="tag_bind" />
        <scope ilk="function" name="tk_textBackspace" />
        <scope doc="Construct a text widget with the parent MASTER." ilk="function" name="__init__" />
        <scope ilk="function" name="tk_textIndexCloser" />
        <scope doc="Return a list of start and end index for the first sequence&#xA;of characters between INDEX1 and INDEX2 which all have tag&#xA;TAGNAME." ilk="function" name="tag_prevrange" />
        <scope doc="Return tuple (x,y,width,height,baseline) giving the bounding&#xA;box and baseline position of the visible part of the line&#xA;containing the character at INDEX." ilk="function" name="dlineinfo" />
        <scope doc="Return the name of the next mark after INDEX." ilk="function" name="mark_next" />
        <scope doc="Return the text from INDEX1 to INDEX2 (not included)." ilk="function" name="get" />
        <scope doc="Return the name of the previous mark before INDEX." ilk="function" name="mark_previous" />
        <scope doc="Configure a tag TAGNAME." ilk="function" name="tag_configure" />
        <scope doc="Remove tag TAGNAME from all characters between INDEX1 and&#xA;INDEX2." ilk="function" name="tag_remove" />
        <scope doc="Return all mark names." ilk="function" name="mark_names" />
        <scope doc="Return a tuple of (x,y,width,height) which gives the&#xA;bounding box of the visible part of the character at the&#xA;index in ARGS." ilk="function" name="bbox" />
        <scope doc="Configure an embedded window at INDEX." ilk="function" name="window_config" />
        <scope doc="Return a list of start and end index for the first sequence&#xA;of characters between INDEX1 and INDEX2 which all have tag&#xA;TAGNAME." ilk="function" name="tag_nextrange" />
        <scope doc="Configure an embedded window at INDEX." ilk="function" name="window_configure" />
        <scope doc="Create a window at INDEX." ilk="function" name="window_create" />
        <scope doc="Unbind for all characters with TAGNAME for event SEQUENCE&#xA;the function identified with FUNCID." ilk="function" name="tag_unbind" />
        <scope doc="Insert CHARS before the characters at INDEX." ilk="function" name="insert" />
        <scope doc="Search PATTERN beginning from INDEX until STOPINDEX." ilk="function" name="search" />
        <scope ilk="function" name="tk_textSelectTo" />
        <scope doc="Set mark MARKNAME before the character at INDEX." ilk="function" name="mark_set" />
        <scope doc="Internal method" ilk="function" name="edit" />
        <scope doc="Delete all tags in TAGNAMES." ilk="function" name="tag_delete" />
        <scope doc="Return all names of embedded images in this widget." ilk="function" name="image_names" />
        <scope doc="Change the priority of tag TAGNAME such that it is lower&#xA;than the priority of BELOWTHIS." ilk="function" name="tag_lower" />
        <scope doc="Configure a tag TAGNAME." ilk="function" name="tag_config" />
        <scope doc="Return the value of OPTION of an embedded window at INDEX." ilk="function" name="window_cget" />
        <scope doc="Get or Set the modified flag" ilk="function" name="edit_modified" />
        <scope doc="Turn on the internal consistency checks of the B-Tree inside&#xA;the text widget according to BOOLEAN." ilk="function" name="debug" />
        <scope doc="Delete all marks in MARKNAMES." ilk="function" name="mark_unset" />
        <scope doc="Obsolete function, use see." ilk="function" name="yview_pickplace" />
        <scope doc="Return all names of embedded windows in this widget." ilk="function" name="window_names" />
        <scope doc="Delete the characters between INDEX1 and INDEX2 (not&#xA;included)." ilk="function" name="delete" />
      </scope>
      <scope classrefs="Misc Wm" doc="Toplevel widget of Tk which represents mostly the main window&#xA;of an application. It has an associated Tcl interpreter." ilk="class" name="Tk">
        <scope doc="Internal function." ilk="function" name="readprofile" />
        <scope ilk="function" name="_loadtk" />
        <scope ilk="function" name="loadtk" />
        <scope doc="Internal function. It reports exception on sys.stderr." ilk="function" name="report_callback_exception" />
        <scope doc="Delegate attribute access to the interpreter object" ilk="function" name="__getattr__" />
        <scope doc="Destroy this and all descendants widgets." ilk="function" name="destroy" />
        <scope doc="Return a new Toplevel widget on screen SCREENNAME." ilk="function" name="__init__" />
      </scope>
      <variable citdl="float" name="TkVersion" />
      <scope classrefs="BaseWidget Wm" doc="Toplevel widget, e.g. for dialogs.&#xA;" ilk="class" name="Toplevel">
        <scope doc="Construct a toplevel widget with the parent MASTER." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="object" doc="&#xA;" ilk="class" name="TracebackType" />
      <scope classrefs="Button" doc="&#xA;" ilk="class" name="Tributton">
        <scope ilk="function" name="__init__" />
      </scope>
      <scope classrefs="object" doc="tuple() -&gt; empty tuple&#xA;tuple(iterable) -&gt; tuple initialized from iterable&apos;s items  If the argument is a tuple, the return value is the same object." ilk="class" name="TupleType">
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__rmul__(n) &lt;==&gt; n*x" ilk="function" name="__rmul__" signature="x.__rmul__(n) &lt;==&gt; n*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="size of T in memory, in bytes" ilk="function" name="__sizeof__" signature="T.__sizeof__()" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="T.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__mul__(n) &lt;==&gt; x*n" ilk="function" name="__mul__" signature="x.__mul__(n) &lt;==&gt; x*n" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="T.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="T.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <scope classrefs="object" doc="type(object) -&gt; the object&apos;s type&#xA;type(name, bases, dict) -&gt; a new type" ilk="class" name="TypeType">
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope ilk="function" name="__init__" />
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="__subclasses__() -&gt; list of immediate subclasses" ilk="function" name="__subclasses__" returns="list" signature="__subclasses__() -&gt; list of immediate subclasses" />
        <scope doc="return a type&apos;s method resolution order" ilk="function" name="mro" returns="list" signature="mro() -&gt; list" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="check if an object is an instance" ilk="function" name="__instancecheck__" returns="bool" signature="__instancecheck__() -&gt; bool" />
        <scope doc="check if a class is a subclass" ilk="function" name="__subclasscheck__" returns="bool" signature="__subclasscheck__() -&gt; bool" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <variable citdl="str" name="UNDERLINE" />
      <variable citdl="str" name="UNITS" />
      <scope classrefs="object" doc="instancemethod(function, instance, class)&#xA;Create an instance method object." ilk="class" name="UnboundMethodType">
        <scope doc="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" ilk="function" name="__setattr__" signature="x.__setattr__(&apos;name&apos;, value) &lt;==&gt; x.name = value" />
        <scope doc="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" ilk="function" name="__delattr__" signature="x.__delattr__(&apos;name&apos;) &lt;==&gt; del x.name" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__call__(...) &lt;==&gt; x(...)" ilk="function" name="__call__" signature="x.__call__(...) &lt;==&gt; x(...)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="descr.__get__(obj[, type]) -&gt; value" ilk="function" name="__get__" signature="descr.__get__(obj[, type]) -&gt; value" />
      </scope>
      <scope classrefs="basestring" doc="unicode(string [, encoding[, errors]]) -&gt; object&#xA;Create a new Unicode object from the given encoded string. encoding defaults to the current default string encoding. errors can be &apos;strict&apos;, &apos;replace&apos; or &apos;ignore&apos; and defaults to &apos;strict&apos;." ilk="class" name="UnicodeType">
        <scope doc="Return a copy of S converted to uppercase." ilk="function" name="upper" returns="unicode" signature="S.upper() -&gt; unicode" />
        <scope doc="Search for the separator sep in S, and return the part&#xA;before it, the separator itself, and the part after it." ilk="function" name="partition" signature="S.partition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Use of negative indices is not supported." ilk="function" name="__getslice__" signature="x.__getslice__(i, j) &lt;==&gt; x[i:j]" />
        <scope doc="Return True if S starts with the specified prefix, False&#xA;otherwise." ilk="function" name="startswith" returns="bool" signature="S.startswith(prefix[, start[, end]]) -&gt; bool" />
        <scope doc="Return a copy of the string S with leading whitespace&#xA;removed." ilk="function" name="lstrip" returns="unicode" signature="S.lstrip([chars]) -&gt; unicode" />
        <scope doc="Return a capitalized version of S, i.e." ilk="function" name="capitalize" returns="unicode" signature="S.capitalize() -&gt; unicode" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="Search for the separator sep in S, starting at the end of S,&#xA;and return the part before it, the separator itself, and the&#xA;part after it." ilk="function" name="rpartition" signature="S.rpartition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return a copy of S with all occurrences of substring old&#xA;replaced by new." ilk="function" name="replace" returns="unicode" signature="S.replace(old, new[, count]) -&gt; unicode" />
        <scope doc="Return True if all characters in S are digits and there is&#xA;at least one character in S, False otherwise." ilk="function" name="isdigit" returns="bool" signature="S.isdigit() -&gt; bool" />
        <scope doc="Return True if S ends with the specified suffix, False&#xA;otherwise." ilk="function" name="endswith" returns="bool" signature="S.endswith(suffix[, start[, end]]) -&gt; bool" />
        <scope doc="Return a list of the lines in S, breaking at line&#xA;boundaries." ilk="function" name="splitlines" returns="list" signature="S.splitlines([keepends]) -&gt; list of strings" />
        <scope doc="Return the highest index in S where substring sub is found,&#xA;such that sub is contained within s[start:end]." ilk="function" name="rfind" returns="int" signature="S.rfind(sub [,start [,end]]) -&gt; int" />
        <scope doc="Return a copy of the string S with leading and trailing&#xA;whitespace removed." ilk="function" name="strip" returns="unicode" signature="S.strip([chars]) -&gt; unicode" />
        <scope doc="x.__rmul__(n) &lt;==&gt; n*x" ilk="function" name="__rmul__" signature="x.__rmul__(n) &lt;==&gt; n*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="Return S left-justified in a Unicode string of length width." ilk="function" name="ljust" returns="int" signature="S.ljust(width[, fillchar]) -&gt; int" />
        <scope doc="Return True if there are only decimal characters in S, False&#xA;otherwise." ilk="function" name="isdecimal" returns="bool" signature="S.isdecimal() -&gt; bool" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="Like S.find() but raise ValueError when the substring is not&#xA;found." ilk="function" name="index" returns="int" signature="S.index(sub [,start [,end]]) -&gt; int" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return True if all characters in S are alphanumeric and&#xA;there is at least one character in S, False otherwise." ilk="function" name="isalnum" returns="bool" signature="S.isalnum() -&gt; bool" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x" ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x" />
        <scope doc="Like S.rfind() but raise ValueError when the substring is&#xA;not found." ilk="function" name="rindex" returns="int" signature="S.rindex(sub [,start [,end]]) -&gt; int" />
        <scope doc="Return a list of the words in S, using sep as the delimiter&#xA;string, starting at the end of the string and working to the&#xA;front." ilk="function" name="rsplit" returns="list" signature="S.rsplit([sep [,maxsplit]]) -&gt; list of strings" />
        <scope doc="Return a formatted version of S, using substitutions from&#xA;args and kwargs." ilk="function" name="format" returns="unicode" signature="S.format(*args, **kwargs) -&gt; unicode" />
        <scope doc="Return the lowest index in S where substring sub is found,&#xA;such that sub is contained within s[start:end]." ilk="function" name="find" returns="int" signature="S.find(sub [,start [,end]]) -&gt; int" />
        <scope doc="Decodes S using the codec registered for encoding." ilk="function" name="decode" returns="str" signature="S.decode([encoding[,errors]]) -&gt; string or unicode" />
        <scope doc="Return True if all characters in S are alphabetic and there&#xA;is at least one character in S, False otherwise." ilk="function" name="isalpha" returns="bool" signature="S.isalpha() -&gt; bool" />
        <scope doc="Return a list of the words in S, using sep as the delimiter&#xA;string." ilk="function" name="split" returns="list" signature="S.split([sep [,maxsplit]]) -&gt; list of strings" />
        <scope doc="Return a copy of the string S with trailing whitespace&#xA;removed." ilk="function" name="rstrip" returns="unicode" signature="S.rstrip([chars]) -&gt; unicode" />
        <scope doc="Encodes S using the codec registered for encoding." ilk="function" name="encode" returns="str" signature="S.encode([encoding[,errors]]) -&gt; string or unicode" />
        <scope ilk="function" name="_formatter_parser" />
        <scope doc="Return a copy of the string S, where all characters have&#xA;been mapped through the given translation table, which must&#xA;be a mapping of Unicode ordinals to Unicode ordinals,&#xA;Unicode strings or None." ilk="function" name="translate" returns="unicode" signature="S.translate(table) -&gt; unicode" />
        <scope doc="Return True if S is a titlecased string and there is at&#xA;least one character in S, i.e." ilk="function" name="istitle" returns="bool" signature="S.istitle() -&gt; bool" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
        <scope doc="x.__mul__(n) &lt;==&gt; x*n" ilk="function" name="__mul__" signature="x.__mul__(n) &lt;==&gt; x*n" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="Return S right-justified in a Unicode string of length&#xA;width." ilk="function" name="rjust" returns="unicode" signature="S.rjust(width[, fillchar]) -&gt; unicode" />
        <scope doc="Return a copy of S with uppercase characters converted to&#xA;lowercase and vice versa." ilk="function" name="swapcase" returns="unicode" signature="S.swapcase() -&gt; unicode" />
        <scope doc="Return a formatted version of S as described by format_spec." ilk="function" name="__format__" returns="unicode" signature="S.__format__(format_spec) -&gt; unicode" />
        <scope doc="Return True if all cased characters in S are lowercase and&#xA;there is at least one cased character in S, False otherwise." ilk="function" name="islower" returns="bool" signature="S.islower() -&gt; bool" />
        <scope doc="Pad a numeric string S with zeros on the left, to fill a&#xA;field of the specified width." ilk="function" name="zfill" returns="unicode" signature="S.zfill(width) -&gt; unicode" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope doc="Return the number of non-overlapping occurrences of&#xA;substring sub in Unicode string S[start:end]." ilk="function" name="count" returns="int" signature="S.count(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return a copy of the string S converted to lowercase." ilk="function" name="lower" returns="unicode" signature="S.lower() -&gt; unicode" />
        <scope doc="Return True if there are only numeric characters in S, False&#xA;otherwise." ilk="function" name="isnumeric" returns="bool" signature="S.isnumeric() -&gt; bool" />
        <scope doc="Return a string which is the concatenation of the strings in&#xA;the iterable." ilk="function" name="join" returns="unicode" signature="S.join(iterable) -&gt; unicode" />
        <scope doc="Return S centered in a Unicode string of length width." ilk="function" name="center" returns="unicode" signature="S.center(width[, fillchar]) -&gt; unicode" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="Return a titlecased version of S, i.e." ilk="function" name="title" returns="unicode" signature="S.title() -&gt; unicode" />
        <scope doc="Return a copy of S where all tab characters are expanded&#xA;using spaces." ilk="function" name="expandtabs" returns="unicode" signature="S.expandtabs([tabsize]) -&gt; unicode" />
        <scope doc="Return True if all characters in S are whitespace and there&#xA;is at least one character in S, False otherwise." ilk="function" name="isspace" returns="bool" signature="S.isspace() -&gt; bool" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope ilk="function" name="_formatter_field_name_split" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="Return True if all cased characters in S are uppercase and&#xA;there is at least one cased character in S, False otherwise." ilk="function" name="isupper" returns="bool" signature="S.isupper() -&gt; bool" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
      </scope>
      <variable citdl="str" name="VERTICAL" />
      <scope doc="Class to define value holders for e.g. buttons.&#xA;Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations that constrain the type of the value returned from get()." ilk="class" name="Variable">
        <scope doc="Delete the trace callback for a variable." ilk="function" name="trace_vdelete" />
        <scope doc="Set the variable to VALUE." ilk="function" name="set" />
        <scope doc="Define a trace callback for the variable." ilk="function" name="trace" />
        <scope doc="Return value of variable." ilk="function" name="get" />
        <scope doc="Unset the variable in Tcl." ilk="function" name="__del__" />
        <scope doc="Comparison for equality (==)." ilk="function" name="__eq__" />
        <scope doc="Return the name of the variable in Tcl." ilk="function" name="__str__" />
        <scope doc="Return all trace callback information." ilk="function" name="trace_vinfo" />
        <scope doc="Define a trace callback for the variable." ilk="function" name="trace_variable" />
        <scope doc="Construct a variable" ilk="function" name="__init__" />
      </scope>
      <variable citdl="str" name="W" />
      <variable citdl="str" name="WORD" />
      <variable citdl="int" name="WRITABLE" />
      <scope classrefs="BaseWidget Pack Place Grid" doc="Internal class.&#xA;Base class for a widget which can be positioned with the geometry managers Pack, Place or Grid." ilk="class" name="Widget" />
      <scope doc="Provides functions for the communication with the window manager.&#xA;" ilk="class" name="Wm">
        <scope doc="Instruct the window manager to ignore this widget if BOOLEAN&#xA;is given with 1." ilk="function" name="wm_overrideredirect" />
        <scope doc="Bind function FUNC to command NAME for this widget." ilk="function" name="protocol" />
        <scope doc="Set the name of the icon for this widget." ilk="function" name="iconname" />
        <scope doc="Set mask for the icon bitmap of this widget." ilk="function" name="iconmask" />
        <scope doc="Set widget PATHNAME to be displayed instead of icon." ilk="function" name="wm_iconwindow" />
        <scope doc="Return identifier for decorative frame of this widget if&#xA;present." ilk="function" name="frame" />
        <scope doc="Set the group leader widgets for related widgets to&#xA;PATHNAME." ilk="function" name="wm_group" />
        <scope doc="Instruct the window manager to set the aspect ratio&#xA;(width/height) of this widget to be between&#xA;MINNUMER/MINDENOM and MAXNUMER/MAXDENOM." ilk="function" name="wm_aspect" />
        <scope doc="Set min WIDTH and HEIGHT for this widget." ilk="function" name="minsize" />
        <scope doc="Set widget PATHNAME to be displayed instead of icon." ilk="function" name="iconwindow" />
        <scope doc="Instruct the window manager that this widget is transient&#xA;with regard to widget MASTER." ilk="function" name="wm_transient" />
        <scope doc="Display widget as icon." ilk="function" name="iconify" />
        <scope doc="Set the position of the icon of this widget to X and Y." ilk="function" name="iconposition" />
        <scope doc="Instruct the window manager to set the aspect ratio&#xA;(width/height) of this widget to be between&#xA;MINNUMER/MINDENOM and MAXNUMER/MAXDENOM." ilk="function" name="aspect" />
        <scope doc="Instruct the window manager that the position of this widget&#xA;shall be defined by the user if WHO is &quot;user&quot;, and by its&#xA;own policy if WHO is &quot;program&quot;." ilk="function" name="positionfrom" />
        <scope doc="Instruct the window manager that the size of this widget&#xA;shall be defined by the user if WHO is &quot;user&quot;, and by its&#xA;own policy if WHO is &quot;program&quot;." ilk="function" name="sizefrom" />
        <scope doc="Set the group leader widgets for related widgets to&#xA;PATHNAME." ilk="function" name="group" />
        <scope doc="Withdraw this widget from the screen such that it is&#xA;unmapped and forgotten by the window manager." ilk="function" name="wm_withdraw" />
        <scope doc="Set the title of this widget." ilk="function" name="title" />
        <scope doc="Instruct the window manager to ignore this widget if BOOLEAN&#xA;is given with 1." ilk="function" name="overrideredirect" />
        <scope doc="Store list of window names (WLIST) into WM_COLORMAPWINDOWS&#xA;property of this widget." ilk="function" name="colormapwindows" />
        <scope doc="Query or set the state of this widget as one of normal,&#xA;icon, iconic (see wm_iconwindow), withdrawn, or zoomed&#xA;(Windows only)." ilk="function" name="state" />
        <scope doc="Set the position of the icon of this widget to X and Y." ilk="function" name="wm_iconposition" />
        <scope doc="Set max WIDTH and HEIGHT for this widget." ilk="function" name="maxsize" />
        <scope doc="Store list of window names (WLIST) into WM_COLORMAPWINDOWS&#xA;property of this widget." ilk="function" name="wm_colormapwindows" />
        <scope doc="Display widget as icon." ilk="function" name="wm_iconify" />
        <scope doc="Instruct the window manager that this widget is transient&#xA;with regard to widget MASTER." ilk="function" name="transient" />
        <scope doc="Store VALUE in WM_COMMAND property." ilk="function" name="wm_command" />
        <scope doc="Return identifier for decorative frame of this widget if&#xA;present." ilk="function" name="wm_frame" />
        <scope doc="Set min WIDTH and HEIGHT for this widget." ilk="function" name="wm_minsize" />
        <scope doc="Set max WIDTH and HEIGHT for this widget." ilk="function" name="wm_maxsize" />
        <scope doc="Store NAME in WM_CLIENT_MACHINE property of this widget." ilk="function" name="wm_client" />
        <scope doc="Instruct the window manager whether this width can be&#xA;resized in WIDTH or HEIGHT." ilk="function" name="resizable" />
        <scope doc="Instruct the window manager whether this width can be&#xA;resized in WIDTH or HEIGHT." ilk="function" name="wm_resizable" />
        <scope doc="Set focus model to MODEL." ilk="function" name="focusmodel" />
        <scope doc="Set geometry to NEWGEOMETRY of the form =widthxheight+x+y." ilk="function" name="wm_geometry" />
        <scope doc="Set mask for the icon bitmap of this widget." ilk="function" name="wm_iconmask" />
        <scope doc="Instruct the window manager that this widget shall only be&#xA;resized on grid boundaries." ilk="function" name="grid" />
        <scope doc="Set bitmap for the iconified widget to BITMAP." ilk="function" name="wm_iconbitmap" />
        <scope doc="Deiconify this widget." ilk="function" name="wm_deiconify" />
        <scope doc="Set the title of this widget." ilk="function" name="wm_title" />
        <scope doc="Set bitmap for the iconified widget to BITMAP." ilk="function" name="iconbitmap" />
        <scope doc="Set focus model to MODEL." ilk="function" name="wm_focusmodel" />
        <scope doc="Bind function FUNC to command NAME for this widget." ilk="function" name="wm_protocol" />
        <scope doc="Instruct the window manager that the position of this widget&#xA;shall be defined by the user if WHO is &quot;user&quot;, and by its&#xA;own policy if WHO is &quot;program&quot;." ilk="function" name="wm_positionfrom" />
        <scope doc="Instruct the window manager that the size of this widget&#xA;shall be defined by the user if WHO is &quot;user&quot;, and by its&#xA;own policy if WHO is &quot;program&quot;." ilk="function" name="wm_sizefrom" />
        <scope doc="Set geometry to NEWGEOMETRY of the form =widthxheight+x+y." ilk="function" name="geometry" />
        <scope doc="Query or set the state of this widget as one of normal,&#xA;icon, iconic (see wm_iconwindow), withdrawn, or zoomed&#xA;(Windows only)." ilk="function" name="wm_state" />
        <scope doc="Instruct the window manager that this widget shall only be&#xA;resized on grid boundaries." ilk="function" name="wm_grid" />
        <scope doc="Deiconify this widget." ilk="function" name="deiconify" />
        <scope doc="This subcommand returns or sets platform specific attributes" ilk="function" name="wm_attributes" />
        <scope doc="Store NAME in WM_CLIENT_MACHINE property of this widget." ilk="function" name="client" />
        <scope doc="Store VALUE in WM_COMMAND property." ilk="function" name="command" />
        <scope doc="Withdraw this widget from the screen such that it is&#xA;unmapped and forgotten by the window manager." ilk="function" name="withdraw" />
        <scope doc="This subcommand returns or sets platform specific attributes" ilk="function" name="attributes" />
        <scope doc="Set the name of the icon for this widget." ilk="function" name="wm_iconname" />
      </scope>
      <variable citdl="str" name="X" />
      <scope classrefs="object" doc="xrange([start,] stop[, step]) -&gt; xrange object&#xA;Like range(), but instead of returning a list, returns an object that generates the numbers in the range on demand.  For looping, this is slightly faster than range() and more memory efficient." ilk="class" name="XRangeType">
        <scope doc="Returns a reverse iterator." ilk="function" name="__reversed__" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope ilk="function" name="__reduce__" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__iter__() &lt;==&gt; iter(x)" ilk="function" name="__iter__" signature="x.__iter__() &lt;==&gt; iter(x)" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__len__() &lt;==&gt; len(x)" ilk="function" name="__len__" signature="x.__len__() &lt;==&gt; len(x)" />
      </scope>
      <scope doc="Mix-in class for querying and changing the horizontal position&#xA;of a widget&apos;s window." ilk="class" name="XView">
        <scope doc="Adjusts the view in the window so that FRACTION of the total&#xA;width of the canvas is off-screen to the left." ilk="function" name="xview_moveto" />
        <scope doc="Query and change the horizontal position of the view." ilk="function" name="xview" />
        <scope doc="Shift the x-view according to NUMBER which is measured in&#xA;&quot;units&quot; or &quot;pages&quot; (WHAT)." ilk="function" name="xview_scroll" />
      </scope>
      <variable citdl="str" name="Y" />
      <variable citdl="int" name="YES" />
      <scope doc="Mix-in class for querying and changing the vertical position&#xA;of a widget&apos;s window." ilk="class" name="YView">
        <scope doc="Adjusts the view in the window so that FRACTION of the total&#xA;height of the canvas is off-screen to the top." ilk="function" name="yview_moveto" />
        <scope doc="Shift the y-view according to NUMBER which is measured in&#xA;&quot;units&quot; or &quot;pages&quot; (WHAT)." ilk="function" name="yview_scroll" />
        <scope doc="Query and change the vertical position of the view." ilk="function" name="yview" />
      </scope>
      <scope doc="Convert true and false to integer values 1 and 0." ilk="function" name="getboolean" signature="getboolean(s)" />
      <scope classrefs="object" doc="float(x) -&gt; floating point number&#xA;Convert a string or number to a floating point number, if possible." ilk="class" name="getdouble">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="Returns self, the complex conjugate of any float." ilk="function" name="conjugate" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="Returns the Integral closest to x between 0 and x." ilk="function" name="__trunc__" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__lt__(y) &lt;==&gt; x&lt;y" ilk="function" name="__lt__" signature="x.__lt__(y) &lt;==&gt; x&lt;y" />
        <scope doc="Returns a pair of integers, whose ratio is exactly equal to&#xA;the original float and with a positive denominator." ilk="function" name="as_integer_ratio" signature="float.as_integer_ratio() -&gt; (int, int)" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Formats the float according to format_spec." ilk="function" name="__format__" returns="str" signature="float.__format__(format_spec) -&gt; string" />
        <scope doc="Return a hexadecimal representation of a floating-point&#xA;number." ilk="function" name="hex" returns="str" signature="float.hex() -&gt; string" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__ne__(y) &lt;==&gt; x!=y" ilk="function" name="__ne__" signature="x.__ne__(y) &lt;==&gt; x!=y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x.__gt__(y) &lt;==&gt; x&gt;y" ilk="function" name="__gt__" signature="x.__gt__(y) &lt;==&gt; x&gt;y" />
        <scope doc="x.__eq__(y) &lt;==&gt; x==y" ilk="function" name="__eq__" signature="x.__eq__(y) &lt;==&gt; x==y" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="Returns True if the float is an integer." ilk="function" name="is_integer" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__le__(y) &lt;==&gt; x&lt;=y" ilk="function" name="__le__" signature="x.__le__(y) &lt;==&gt; x&lt;=y" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__ge__(y) &lt;==&gt; x&gt;=y" ilk="function" name="__ge__" signature="x.__ge__(y) &lt;==&gt; x&gt;=y" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <scope classrefs="object" doc="int(x[, base]) -&gt; integer&#xA;Convert a string or number to an integer, if possible.  A floating point argument will be truncated towards zero (this does not include a string representation of a floating point number!)  When converting a string, use the optional base.  It is an error to supply a base when converting a non-string.  If base is zero, the proper base is guessed based on the string content.  If the argument is outside the integer range a long object will be returned instead." ilk="class" name="getint">
        <scope doc="x.__int__() &lt;==&gt; int(x)" ilk="function" name="__int__" signature="x.__int__() &lt;==&gt; int(x)" />
        <scope doc="x.__ror__(y) &lt;==&gt; y|x" ilk="function" name="__ror__" signature="x.__ror__(y) &lt;==&gt; y|x" />
        <scope doc="x.__rtruediv__(y) &lt;==&gt; y/x" ilk="function" name="__rtruediv__" signature="x.__rtruediv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" ilk="function" name="__lshift__" signature="x.__lshift__(y) &lt;==&gt; x&lt;&lt;y" />
        <scope doc="x.__str__() &lt;==&gt; str(x)" ilk="function" name="__str__" signature="x.__str__() &lt;==&gt; str(x)" />
        <scope doc="Returns self, the complex conjugate of any int." ilk="function" name="conjugate" />
        <scope doc="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" ilk="function" name="__getattribute__" signature="x.__getattribute__(&apos;name&apos;) &lt;==&gt; x.name" />
        <scope doc="x.__radd__(y) &lt;==&gt; y+x" ilk="function" name="__radd__" signature="x.__radd__(y) &lt;==&gt; y+x" />
        <scope doc="x.__and__(y) &lt;==&gt; x&amp;y" ilk="function" name="__and__" signature="x.__and__(y) &lt;==&gt; x&amp;y" />
        <scope doc="x.__truediv__(y) &lt;==&gt; x/y" ilk="function" name="__truediv__" signature="x.__truediv__(y) &lt;==&gt; x/y" />
        <scope doc="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" ilk="function" name="__rrshift__" signature="x.__rrshift__(y) &lt;==&gt; y&gt;&gt;x" />
        <scope doc="x.__rsub__(y) &lt;==&gt; y-x" ilk="function" name="__rsub__" signature="x.__rsub__(y) &lt;==&gt; y-x" />
        <scope doc="x.__rdiv__(y) &lt;==&gt; y/x" ilk="function" name="__rdiv__" signature="x.__rdiv__(y) &lt;==&gt; y/x" />
        <scope doc="x.__rmul__(y) &lt;==&gt; y*x" ilk="function" name="__rmul__" signature="x.__rmul__(y) &lt;==&gt; y*x" />
        <scope doc="x.__rmod__(y) &lt;==&gt; y%x" ilk="function" name="__rmod__" signature="x.__rmod__(y) &lt;==&gt; y%x" />
        <scope doc="x.__abs__() &lt;==&gt; abs(x)" ilk="function" name="__abs__" signature="x.__abs__() &lt;==&gt; abs(x)" />
        <scope doc="x.__float__() &lt;==&gt; float(x)" ilk="function" name="__float__" signature="x.__float__() &lt;==&gt; float(x)" />
        <scope doc="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__rpow__" signature="y.__rpow__(x[, z]) &lt;==&gt; pow(x, y[, z])" />
        <scope doc="x.__rand__(y) &lt;==&gt; y&amp;x" ilk="function" name="__rand__" signature="x.__rand__(y) &lt;==&gt; y&amp;x" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="x.__or__(y) &lt;==&gt; x|y" ilk="function" name="__or__" signature="x.__or__(y) &lt;==&gt; x|y" />
        <scope doc="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" ilk="function" name="__rlshift__" signature="x.__rlshift__(y) &lt;==&gt; y&lt;&lt;x" />
        <scope doc="x.__cmp__(y) &lt;==&gt; cmp(x,y)" ilk="function" name="__cmp__" signature="x.__cmp__(y) &lt;==&gt; cmp(x,y)" />
        <scope doc="x.__pos__() &lt;==&gt; +x" ilk="function" name="__pos__" signature="x.__pos__() &lt;==&gt; +x" />
        <scope doc="x.__rfloordiv__(y) &lt;==&gt; y//x" ilk="function" name="__rfloordiv__" signature="x.__rfloordiv__(y) &lt;==&gt; y//x" />
        <scope doc="Number of bits necessary to represent self in binary." ilk="function" name="bit_length" returns="int" signature="int.bit_length() -&gt; int" />
        <scope doc="x.__repr__() &lt;==&gt; repr(x)" ilk="function" name="__repr__" signature="x.__repr__() &lt;==&gt; repr(x)" />
        <scope doc="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" ilk="function" name="__rshift__" signature="x.__rshift__(y) &lt;==&gt; x&gt;&gt;y" />
        <scope doc="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" ilk="function" name="__rdivmod__" signature="x.__rdivmod__(y) &lt;==&gt; divmod(y, x)" />
        <scope doc="x.__invert__() &lt;==&gt; ~x" ilk="function" name="__invert__" signature="x.__invert__() &lt;==&gt; ~x" />
        <scope doc="x.__coerce__(y) &lt;==&gt; coerce(x, y)" ilk="function" name="__coerce__" signature="x.__coerce__(y) &lt;==&gt; coerce(x, y)" />
        <scope ilk="function" name="__format__" />
        <scope doc="x.__divmod__(y) &lt;==&gt; divmod(x, y)" ilk="function" name="__divmod__" signature="x.__divmod__(y) &lt;==&gt; divmod(x, y)" />
        <scope doc="x.__add__(y) &lt;==&gt; x+y" ilk="function" name="__add__" signature="x.__add__(y) &lt;==&gt; x+y" />
        <scope doc="x[y:z] &lt;==&gt; x[y.__index__():z.__index__()]" ilk="function" name="__index__" />
        <scope doc="x.__hex__() &lt;==&gt; hex(x)" ilk="function" name="__hex__" signature="x.__hex__() &lt;==&gt; hex(x)" />
        <scope doc="x.__oct__() &lt;==&gt; oct(x)" ilk="function" name="__oct__" signature="x.__oct__() &lt;==&gt; oct(x)" />
        <scope doc="x.__rxor__(y) &lt;==&gt; y^x" ilk="function" name="__rxor__" signature="x.__rxor__(y) &lt;==&gt; y^x" />
        <scope doc="x.__nonzero__() &lt;==&gt; x != 0" ilk="function" name="__nonzero__" signature="x.__nonzero__() &lt;==&gt; x != 0" />
        <scope doc="x.__mod__(y) &lt;==&gt; x%y" ilk="function" name="__mod__" signature="x.__mod__(y) &lt;==&gt; x%y" />
        <scope doc="Truncating an Integral returns itself." ilk="function" name="__trunc__" />
        <scope doc="x.__xor__(y) &lt;==&gt; x^y" ilk="function" name="__xor__" signature="x.__xor__(y) &lt;==&gt; x^y" />
        <scope doc="x.__div__(y) &lt;==&gt; x/y" ilk="function" name="__div__" signature="x.__div__(y) &lt;==&gt; x/y" />
        <scope doc="x.__mul__(y) &lt;==&gt; x*y" ilk="function" name="__mul__" signature="x.__mul__(y) &lt;==&gt; x*y" />
        <scope doc="x.__neg__() &lt;==&gt; -x" ilk="function" name="__neg__" signature="x.__neg__() &lt;==&gt; -x" />
        <scope doc="x.__floordiv__(y) &lt;==&gt; x//y" ilk="function" name="__floordiv__" signature="x.__floordiv__(y) &lt;==&gt; x//y" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="x.__sub__(y) &lt;==&gt; x-y" ilk="function" name="__sub__" signature="x.__sub__(y) &lt;==&gt; x-y" />
        <scope doc="x.__long__() &lt;==&gt; long(x)" ilk="function" name="__long__" signature="x.__long__() &lt;==&gt; long(x)" />
        <scope doc="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" ilk="function" name="__pow__" signature="x.__pow__(y[, z]) &lt;==&gt; pow(x, y[, z])" />
      </scope>
      <scope ilk="function" name="image_names" signature="image_names()" />
      <scope ilk="function" name="image_types" signature="image_types()" />
      <scope doc="Run the main loop of Tcl." ilk="function" name="mainloop" signature="mainloop(n=0)" />
      <import module="sys" />
      <import module="tkinter" />
      <variable citdl="int" name="wantobjects" />
      <variable attributes="__hidden__" citdl="Button()" line="46" name="q" />
      <scope attributes="protected __hidden__" ilk="function" line="27" lineend="39" name="_test" signature="_test()">
        <variable citdl="Dialog" line="28" name="d" />
      </scope>
      <variable attributes="__hidden__" citdl="Button()" line="43" name="t" />
    </scope>
    