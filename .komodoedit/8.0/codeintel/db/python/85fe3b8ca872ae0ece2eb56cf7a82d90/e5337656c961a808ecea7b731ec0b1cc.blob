<scope doc="Extensions to the &apos;distutils&apos; for large or complex&#xA;distributions" ilk="blob" lang="Python" name="__init__" src="/usr/lib/python2.7/dist-packages/setuptools/__init__.py"><import line="2" module="setuptools.extension" symbol="Extension" /><import line="2" module="setuptools.extension" symbol="Library" /><import line="3" module="setuptools.dist" symbol="Distribution" /><import line="3" module="setuptools.dist" symbol="Feature" /><import line="3" module="setuptools.dist" symbol="_get_unpatched" /><import line="4" module="distutils.core" /><import line="4" module="setuptools.command" /><import line="5" module="setuptools.depends" symbol="Require" /><import alias="_Command" line="6" module="distutils.core" symbol="Command" /><import line="7" module="distutils.util" symbol="convert_path" /><import line="8" module="os" /><import line="9" module="sys" /><import line="80" module="distutils.core" /><import line="96" module="distutils.filelist" /><variable citdl="str" line="11" name="__version__" /><variable citdl="list" line="12" name="__all__" /><variable attributes="protected" citdl="True" line="25" name="_distribute" /><variable line="27" name="bootstrap_install_from" /><variable citdl="True" line="31" name="run_2to3_on_doctests" /><variable citdl="list" line="33" name="lib2to3_fixer_packages" /><scope doc="Return a list all Python packages found within directory &apos;where&apos;&#xA;&#xA;&apos;where&apos; should be supplied as a &quot;cross-platform&quot; (i.e. URL-style) path; it&#xA;will be converted to the appropriate local path syntax.  &apos;exclude&apos; is a&#xA;sequence of package names to exclude; &apos;*&apos; can be used as a wildcard in the&#xA;names, such that &apos;foo.*&apos; will exclude all subpackages of &apos;foo&apos; (but not&#xA;&apos;foo&apos; itself)." ilk="function" line="35" lineend="57" name="find_packages" returns="list" signature="find_packages(where=&apos;.&apos;, exclude=())"><import line="55" module="fnmatch" symbol="fnmatchcase" /><variable citdl="str" ilk="argument" name="where" /><variable citdl="tuple" ilk="argument" name="exclude" /><variable citdl="list" line="44" name="out" /><variable citdl="list" line="45" name="stack" /><variable line="47" name="prefix" /><variable citdl="os.path.join()" line="49" name="fn" /></scope><variable citdl="distutils.core.setup" line="59" name="setup" /><variable attributes="protected" citdl="_get_unpatched()" line="61" name="_Command" /><scope classrefs="_get_unpatched()" ilk="class" line="63" lineend="78" name="Command"><variable citdl="_Command.__doc__" line="64" name="__doc__" /><variable citdl="False" line="66" name="command_consumes_arguments" /><scope attributes="__ctor__" ilk="function" line="68" lineend="72" name="__init__" signature="Command(dist, **kw)"><variable citdl="Command" ilk="argument" name="self" /><variable ilk="argument" name="dist" /><variable attributes="kwargs" ilk="argument" name="kw" /></scope><scope ilk="function" line="74" lineend="78" name="reinitialize_command" returns="_Command.reinitialize_command()" signature="reinitialize_command(command, reinit_subcommands=0, **kw)"><variable citdl="Command" ilk="argument" name="self" /><variable ilk="argument" name="command" /><variable citdl="int" ilk="argument" name="reinit_subcommands" /><variable attributes="kwargs" ilk="argument" name="kw" /><variable citdl="_Command.reinitialize_command()" line="75" name="cmd" /></scope></scope><scope doc="Find all files under &apos;dir&apos; and return the list of full filenames&#xA;(relative to &apos;dir&apos;)." ilk="function" line="83" lineend="94" name="findall" returns="list" signature="findall(dir=os.curdir)"><variable citdl="os.curdir" ilk="argument" name="dir" /><variable citdl="list" line="87" name="all_files" /><variable citdl="list" line="90" name="base" /><variable citdl="list" line="92" name="files" /></scope><variable attributes="protected" citdl="False" line="102" name="_dont_write_bytecode" /></scope>