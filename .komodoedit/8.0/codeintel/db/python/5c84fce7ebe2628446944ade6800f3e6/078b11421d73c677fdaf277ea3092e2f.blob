<scope doc="@package topo" ilk="blob" lang="Python" name="topo" src="/usr/local/lib/python2.7/dist-packages/mininet-2.0.0-py2.7.egg/mininet/topo.py"><import line="18" module="networkx" symbol="Graph" /><import line="19" module="mininet.util" symbol="irange" /><import line="19" module="mininet.util" symbol="natural" /><import line="19" module="mininet.util" symbol="naturalSeq" /><scope classrefs="object" doc="Data center network representation for structured multi-trees." ilk="class" line="21" lineend="168" name="Topo"><scope attributes="__ctor__" doc="Topo object:&#xA;hinfo: default host options&#xA;sopts: default switch options&#xA;lopts: default link options" ilk="function" line="24" lineend="35" name="__init__" signature="Topo(hopts=None, sopts=None, lopts=None)"><variable citdl="Topo" ilk="argument" name="self" /><variable ilk="argument" name="hopts" /><variable ilk="argument" name="sopts" /><variable ilk="argument" name="lopts" /></scope><variable attributes="__instancevar__" citdl="Graph()" line="29" name="g" /><variable attributes="__instancevar__" citdl="dict" line="30" name="node_info" /><variable attributes="__instancevar__" citdl="dict" line="31" name="link_info" /><variable attributes="__instancevar__" line="32" name="hopts" /><variable attributes="__instancevar__" line="33" name="sopts" /><variable attributes="__instancevar__" line="34" name="lopts" /><variable attributes="__instancevar__" citdl="dict" line="35" name="ports" /><scope doc="Add Node to graph.&#xA;name: name&#xA;opts: node options&#xA;returns: node name" ilk="function" line="37" lineend="44" name="addNode" signature="addNode(name, **opts)"><variable citdl="Topo" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable attributes="kwargs" ilk="argument" name="opts" /></scope><scope doc="Convenience method: Add host to graph.&#xA;name: host name&#xA;opts: host options&#xA;returns: host name" ilk="function" line="46" lineend="53" name="addHost" returns="Topo.addNode()" signature="addHost(name, **opts)"><variable citdl="Topo" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable attributes="kwargs" ilk="argument" name="opts" /></scope><scope doc="Convenience method: Add switch to graph.&#xA;name: switch name&#xA;opts: switch options&#xA;returns: switch name" ilk="function" line="55" lineend="63" name="addSwitch" returns="addNode()" signature="addSwitch(name, **opts)"><variable citdl="Topo" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable attributes="kwargs" ilk="argument" name="opts" /><variable citdl="addNode()" line="62" name="result" /></scope><scope doc="node1, node2: nodes to link together&#xA;port1, port2: ports (optional)&#xA;opts: link options (optional)&#xA;returns: link info key" ilk="function" line="65" lineend="77" name="addLink" returns="tuple()" signature="addLink(node1, node2, port1=None, port2=None, **opts)"><variable citdl="Topo" ilk="argument" name="self" /><variable ilk="argument" name="node1" /><variable ilk="argument" name="node2" /><variable ilk="argument" name="port1" /><variable ilk="argument" name="port2" /><variable attributes="kwargs" ilk="argument" name="opts" /><variable citdl="tuple()" line="74" name="key" /></scope><scope doc="Generate port mapping for new edge.&#xA;@param src source switch name&#xA;@param dst destination switch name" ilk="function" line="79" lineend="94" name="addPort" signature="addPort(src, dst, sport=None, dport=None)"><variable citdl="Topo" ilk="argument" name="self" /><variable ilk="argument" name="src" /><variable ilk="argument" name="dst" /><variable citdl="len()" ilk="argument" name="sport" /><variable citdl="len()" ilk="argument" name="dport" /><variable line="87" name="src_base" /><variable line="88" name="dst_base" /></scope><scope doc="Return nodes in graph" ilk="function" line="96" lineend="101" name="nodes" returns="self.sorted()" signature="nodes(sort=True)"><variable citdl="Topo" ilk="argument" name="self" /><variable citdl="True" ilk="argument" name="sort" /></scope><scope doc="Returns true if node is a switch." ilk="function" line="103" lineend="106" name="isSwitch" returns="info.get()" signature="isSwitch(n)"><variable citdl="Topo" ilk="argument" name="self" /><variable ilk="argument" name="n" /><variable line="105" name="info" /></scope><scope doc="Return switches.&#xA;sort: sort switches alphabetically&#xA;@return dpids list of dpids" ilk="function" line="108" lineend="113" name="switches" returns="list" signature="switches(sort=True)"><variable citdl="Topo" ilk="argument" name="self" /><variable citdl="True" ilk="argument" name="sort" /></scope><scope doc="Return hosts.&#xA;sort: sort hosts alphabetically&#xA;@return dpids list of dpids" ilk="function" line="115" lineend="120" name="hosts" returns="list" signature="hosts(sort=True)"><variable citdl="Topo" ilk="argument" name="self" /><variable citdl="True" ilk="argument" name="sort" /></scope><scope doc="Return links.&#xA;sort: sort links alphabetically&#xA;@return links list of name pairs" ilk="function" line="122" lineend="131" name="links" returns="sorted()" signature="links(sort=True)"><variable citdl="Topo" ilk="argument" name="self" /><variable citdl="True" ilk="argument" name="sort" /><variable citdl="list" line="130" name="links" /></scope><scope doc="Get port number.&#xA;&#xA;@param src source switch name&#xA;@param dst destination switch name&#xA;@return tuple (src_port, dst_port):&#xA;    src_port: port on source switch leading to the destination switch&#xA;    dst_port: port on destination switch leading to the source switch" ilk="function" line="133" lineend="144" name="port" returns="tuple" signature="port(src, dst)"><variable citdl="Topo" ilk="argument" name="self" /><variable ilk="argument" name="src" /><variable ilk="argument" name="dst" /></scope><scope doc="Return link metadata" ilk="function" line="146" lineend="149" name="linkInfo" signature="linkInfo(src, dst)"><variable citdl="Topo" ilk="argument" name="self" /><variable ilk="argument" name="src" /><variable ilk="argument" name="dst" /></scope><scope doc="Set link metadata" ilk="function" line="151" lineend="154" name="setlinkInfo" signature="setlinkInfo(src, dst, info)"><variable citdl="Topo" ilk="argument" name="self" /><variable ilk="argument" name="src" /><variable ilk="argument" name="dst" /><variable ilk="argument" name="info" /></scope><scope doc="Return metadata (dict) for node" ilk="function" line="156" lineend="159" name="nodeInfo" signature="nodeInfo(name)"><variable citdl="Topo" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable line="158" name="info" /></scope><scope doc="Set metadata (dict) for node" ilk="function" line="161" lineend="163" name="setNodeInfo" signature="setNodeInfo(name, info)"><variable citdl="Topo" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable ilk="argument" name="info" /></scope><scope doc="Items sorted in natural (i.e. alphabetical) order" ilk="function" line="166" lineend="168" name="sorted" returns="Topo.sorted()" signature="sorted()"><variable citdl="Topo" ilk="argument" name="items" /></scope></scope><scope classrefs="Topo" doc="Single switch connected to k hosts." ilk="class" line="170" lineend="186" name="SingleSwitchTopo"><scope attributes="__ctor__" doc="Init.&#xA;&#xA;@param k number of hosts&#xA;@param enable_all enables all nodes and switches?" ilk="function" line="173" lineend="186" name="__init__" signature="SingleSwitchTopo(k=2, **opts)"><variable citdl="SingleSwitchTopo" ilk="argument" name="self" /><variable citdl="int" ilk="argument" name="k" /><variable attributes="kwargs" ilk="argument" name="opts" /><variable citdl="self.addSwitch()" line="183" name="switch" /><variable citdl="self.addHost()" line="185" name="host" /></scope><variable attributes="__instancevar__" citdl="int" line="181" name="k" /></scope><scope classrefs="Topo" doc="Single switch connected to k hosts, with reversed ports.&#xA;&#xA;The lowest-numbered host is connected to the highest-numbered port.&#xA;&#xA;Useful to verify that Mininet properly handles custom port numberings." ilk="class" line="189" lineend="208" name="SingleSwitchReversedTopo"><scope attributes="__ctor__" doc="Init.&#xA;&#xA;@param k number of hosts&#xA;@param enable_all enables all nodes and switches?" ilk="function" line="196" lineend="208" name="__init__" signature="SingleSwitchReversedTopo(k=2, **opts)"><variable citdl="SingleSwitchReversedTopo" ilk="argument" name="self" /><variable citdl="int" ilk="argument" name="k" /><variable attributes="kwargs" ilk="argument" name="opts" /><variable citdl="self.addSwitch()" line="204" name="switch" /><variable citdl="self.addHost()" line="206" name="host" /></scope><variable attributes="__instancevar__" citdl="int" line="203" name="k" /></scope><scope classrefs="Topo" doc="Linear topology of k switches, with one host per switch." ilk="class" line="210" lineend="230" name="LinearTopo"><scope attributes="__ctor__" doc="Init.&#xA;k: number of switches (and hosts)&#xA;hconf: host configuration options&#xA;lconf: link configuration options" ilk="function" line="213" lineend="230" name="__init__" signature="LinearTopo(k=2, **opts)"><variable citdl="LinearTopo" ilk="argument" name="self" /><variable citdl="int" ilk="argument" name="k" /><variable attributes="kwargs" ilk="argument" name="opts" /><variable citdl="self.addSwitch()" line="223" name="lastSwitch" /><variable citdl="self.addHost()" line="225" name="host" /><variable citdl="self.addSwitch()" line="226" name="switch" /></scope><variable attributes="__instancevar__" citdl="int" line="221" name="k" /></scope></scope>