<scope doc="Node objects for Mininet." ilk="blob" lang="Python" name="node" src="/usr/local/lib/python2.7/dist-packages/mininet-2.0.0-py2.7.egg/mininet/node.py"><import line="47" module="os" /><import line="48" module="re" /><import line="49" module="signal" /><import line="50" module="select" /><import line="51" module="subprocess" symbol="Popen" /><import line="51" module="subprocess" symbol="PIPE" /><import line="51" module="subprocess" symbol="STDOUT" /><import line="53" module="mininet.log" symbol="info" /><import line="53" module="mininet.log" symbol="error" /><import line="53" module="mininet.log" symbol="warn" /><import line="53" module="mininet.log" symbol="debug" /><import line="54" module="mininet.util" symbol="quietRun" /><import line="54" module="mininet.util" symbol="errRun" /><import line="54" module="mininet.util" symbol="errFail" /><import line="54" module="mininet.util" symbol="moveIntf" /><import line="54" module="mininet.util" symbol="isShellBuiltin" /><import line="54" module="mininet.util" symbol="numCores" /><import line="54" module="mininet.util" symbol="retry" /><import line="54" module="mininet.util" symbol="mountCgroups" /><import line="56" module="mininet.moduledeps" symbol="moduleDeps" /><import line="56" module="mininet.moduledeps" symbol="pathCheck" /><import line="56" module="mininet.moduledeps" symbol="OVS_KMOD" /><import line="56" module="mininet.moduledeps" symbol="OF_KMOD" /><import line="56" module="mininet.moduledeps" symbol="TUN" /><import line="57" module="mininet.link" symbol="Link" /><import line="57" module="mininet.link" symbol="Intf" /><import line="57" module="mininet.link" symbol="TCIntf" /><scope classrefs="object" doc="A virtual network node is simply a shell in a network namespace.&#xA;We communicate with it using pipes." ilk="class" line="59" lineend="548" name="Node"><variable citdl="int" line="63" name="portBase" /><scope attributes="__ctor__" doc="name: name of node&#xA;inNamespace: in network namespace?&#xA;params: Node parameters (see config() for details)" ilk="function" line="65" lineend="92" name="__init__" signature="Node(name, inNamespace=True, **params)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable citdl="True" ilk="argument" name="inNamespace" /><variable attributes="kwargs" ilk="argument" name="params" /></scope><variable attributes="__instancevar__" line="73" name="name" /><variable attributes="__instancevar__" citdl="True" line="74" name="inNamespace" /><variable attributes="__instancevar__" line="77" name="params" /><variable attributes="__instancevar__" citdl="dict" line="79" name="intfs" /><variable attributes="__instancevar__" citdl="dict" line="80" name="ports" /><variable attributes="__instancevar__" citdl="dict" line="82" name="nameToIntf" /><variable attributes="__instancevar__" citdl="self.shell.stdout" line="86" name="stdout" /><variable attributes="__instancevar__" citdl="int()" line="86" name="lastPid" /><variable attributes="__instancevar__" citdl="self.shell.pid" line="86" name="pid" /><variable attributes="__instancevar__" citdl="False" line="86" name="execed" /><variable attributes="__instancevar__" citdl="select.poll()" line="86" name="pollOut" /><variable attributes="__instancevar__" citdl="Popen()" line="86" name="shell" /><variable attributes="__instancevar__" citdl="self.shell.stdin" line="86" name="stdin" /><variable attributes="__instancevar__" citdl="__builtins__.str.join()" line="86" name="lastCmd" /><variable attributes="__instancevar__" citdl="False" line="88" name="waiting" /><variable attributes="__instancevar__" citdl="str" line="89" name="readbuf" /><variable citdl="dict" line="97" name="inToNode" /><variable citdl="dict" line="98" name="outToNode" /><scope doc="Return node corresponding to given file descriptor.&#xA;fd: file descriptor&#xA;returns: node" ilk="function" line="101" lineend="106" name="fdToNode" returns="cls.inToNode.get()" signature="fdToNode(fd)"><variable citdl="Node" ilk="argument" name="cls" /><variable ilk="argument" name="fd" /><variable citdl="cls.outToNode.get()" line="105" name="node" /></scope><scope doc="Start a shell process for running commands" ilk="function" line="110" lineend="138" name="startShell" signature="startShell()"><variable citdl="Node" ilk="argument" name="self" /><variable citdl="str" line="117" name="opts" /><variable citdl="list" line="121" name="cmd" /></scope><scope doc="Help python collect its garbage." ilk="function" line="140" lineend="146" name="cleanup" signature="cleanup()"><variable citdl="Node" ilk="argument" name="self" /></scope><scope doc="Buffered read from node, non-blocking.&#xA;maxbytes: maximum number of bytes to return" ilk="function" line="150" lineend="163" name="read" returns="str" signature="read(maxbytes=1024)"><variable citdl="Node" ilk="argument" name="self" /><variable citdl="int" ilk="argument" name="maxbytes" /><variable citdl="len()" line="153" name="count" /><variable citdl="os.read()" line="155" name="data" /><variable citdl="list" line="158" name="result" /></scope><scope doc="Buffered readline from node, non-blocking.&#xA;returns: line (minus newline) or None" ilk="function" line="165" lineend="174" name="readline" returns="list" signature="readline()"><variable citdl="Node" ilk="argument" name="self" /><variable citdl="self.readbuf.find()" line="171" name="pos" /><variable citdl="list" line="172" name="line" /></scope><scope doc="Write data to node.&#xA;data: string" ilk="function" line="176" lineend="179" name="write" signature="write(data)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="data" /></scope><scope doc="Send kill signal to Node and clean up after it." ilk="function" line="181" lineend="184" name="terminate" signature="terminate()"><variable citdl="Node" ilk="argument" name="self" /></scope><scope doc="Stop node." ilk="function" line="186" lineend="188" name="stop" signature="stop()"><variable citdl="Node" ilk="argument" name="self" /></scope><scope doc="Wait until node&apos;s output is readable.&#xA;timeoutms: timeout in ms or None to wait indefinitely." ilk="function" line="190" lineend="194" name="waitReadable" signature="waitReadable(timeoutms=None)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="timeoutms" /></scope><scope doc="Send a command, followed by a command to echo a sentinel,&#xA;and return without waiting for the command to complete.&#xA;args: command and arguments, or string&#xA;printPid: print command&apos;s PID?" ilk="function" line="196" lineend="227" name="sendCmd" signature="sendCmd(*args, **kwargs)"><variable citdl="Node" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kwargs" /><variable citdl="kwargs.get()" line="202" name="printPid" /><variable citdl="str" line="205" name="cmd" /></scope><scope doc="Interrupt running command." ilk="function" line="229" lineend="235" name="sendInt" signature="sendInt(sig=signal.SIGINT)"><variable citdl="Node" ilk="argument" name="self" /><variable citdl="signal.SIGINT" ilk="argument" name="sig" /></scope><scope doc="Monitor and return the output of a command.&#xA;Set self.waiting to False if command has completed.&#xA;timeoutms: timeout in ms or None to wait indefinitely." ilk="function" line="237" lineend="257" name="monitor" returns="re.sub()" signature="monitor(timeoutms=None)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="timeoutms" /><variable citdl="read()" line="242" name="data" /><variable citdl="chr()" line="244" name="marker" /><variable citdl="re.findall()" line="246" name="markers" /></scope><scope doc="Wait for a command to complete.&#xA;Completion is signaled by a sentinel character, ASCII(127)&#xA;appearing in the output stream.  Wait for the sentinel and return&#xA;the output, including trailing newline.&#xA;verbose: print output interactively" ilk="function" line="259" lineend="271" name="waitOutput" returns="str" signature="waitOutput(verbose=False)"><variable citdl="Node" ilk="argument" name="self" /><variable citdl="False" ilk="argument" name="verbose" /><variable line="265" name="log" /><variable citdl="str" line="266" name="output" /><variable citdl="monitor()" line="268" name="data" /></scope><scope doc="Send a command, wait for output, and return it.&#xA;cmd: string" ilk="function" line="273" lineend="280" name="cmd" returns="Node.waitOutput()" signature="cmd(*args, **kwargs)"><variable citdl="Node" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kwargs" /><variable citdl="kwargs.get()" line="276" name="verbose" /><variable line="277" name="log" /></scope><scope doc="Call cmd and printing its output&#xA;cmd: string" ilk="function" line="282" lineend="285" name="cmdPrint" returns="Node.cmd()" signature="cmdPrint(*args)"><variable citdl="Node" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /></scope><scope doc="Return a Popen() object in our namespace&#xA;args: Popen() args, single list, or string&#xA;kwargs: Popen() keyword args" ilk="function" line="287" lineend="314" name="popen" returns="Popen()" signature="popen(*args, **kwargs)"><variable citdl="Node" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kwargs" /><variable citdl="dict" line="291" name="defaults" /><variable citdl="list()" line="298" name="cmd" /><variable line="308" name="mncmd" /></scope><scope doc="Execute a command using popen&#xA;returns: out, err, exitcode" ilk="function" line="316" lineend="322" name="pexec" returns="tuple" signature="pexec(*args, **kwargs)"><variable citdl="Node" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kwargs" /><variable citdl="popen()" line="319" name="popen" /><variable line="320" name="out" /><variable line="320" name="err" /><variable citdl="popen.wait()" line="321" name="exitcode" /></scope><scope doc="Return the next port number to allocate." ilk="function" line="332" lineend="336" name="newPort" returns="max()" signature="newPort()"><variable citdl="Node" ilk="argument" name="self" /></scope><scope doc="Add an interface.&#xA;intf: interface&#xA;port: port number (optional, typically OpenFlow port number)" ilk="function" line="338" lineend="351" name="addIntf" signature="addIntf(intf, port=None)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="intf" /><variable citdl="newPort()" ilk="argument" name="port" /></scope><scope doc="Return interface for lowest port" ilk="function" line="353" lineend="360" name="defaultIntf" signature="defaultIntf()"><variable citdl="Node" ilk="argument" name="self" /><variable citdl="self.intfs.keys()" line="355" name="ports" /></scope><scope doc="Return our interface object with given string name,&#xA;   default intf if name is falsy (None, empty string, etc).&#xA;   or the input intf arg.&#xA;&#xA;Having this fcn return its arg for Intf objects makes it&#xA;easier to construct functions with flexible input args for&#xA;interfaces (those that accept both string names and Intf objects)." ilk="function" line="362" lineend="376" name="intf" returns="str" signature="intf(intf=&apos;&apos;)"><variable citdl="Node" ilk="argument" name="self" /><variable citdl="str" ilk="argument" name="intf" /></scope><scope doc="Return [ intf1, intf2... ] for all intfs that connect self to node." ilk="function" line="378" lineend="390" name="connectionsTo" returns="list" signature="connectionsTo(node)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="node" /><variable citdl="list" line="381" name="connections" /><variable citdl="intf.link" line="383" name="link" /><variable citdl="link.intf1.node" line="385" name="node1" /><variable citdl="link.intf2.node" line="385" name="node2" /></scope><scope doc="Delete all of our interfaces." ilk="function" line="392" lineend="401" name="deleteIntfs" signature="deleteIntfs()"><variable citdl="Node" ilk="argument" name="self" /></scope><scope doc="Add an ARP entry.&#xA;ip: IP address as string&#xA;mac: MAC address as string" ilk="function" line="405" lineend="410" name="setARP" returns="cmd()" signature="setARP(ip, mac)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="ip" /><variable ilk="argument" name="mac" /><variable citdl="cmd()" line="409" name="result" /></scope><scope doc="Add route to host.&#xA;ip: IP address as dotted decimal&#xA;intf: string, interface name" ilk="function" line="412" lineend="416" name="setHostRoute" returns="Node.cmd()" signature="setHostRoute(ip, intf)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="ip" /><variable ilk="argument" name="intf" /></scope><scope doc="Set the default route to go through intf.&#xA;intf: string, interface name" ilk="function" line="418" lineend="424" name="setDefaultRoute" returns="Node.cmd()" signature="setDefaultRoute(intf=None)"><variable citdl="Node" ilk="argument" name="self" /><variable citdl="defaultIntf()" ilk="argument" name="intf" /></scope><scope doc="Set the MAC address for an interface.&#xA;intf: intf or intf name&#xA;mac: MAC address as string" ilk="function" line="428" lineend="432" name="setMAC" signature="setMAC(mac, intf=None)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="mac" /><variable ilk="argument" name="intf" /></scope><scope doc="Set the IP address for an interface.&#xA;intf: intf or intf name&#xA;ip: IP address as a string&#xA;prefixLen: prefix length, e.g. 8 for /8 or 16M addrs" ilk="function" line="434" lineend="442" name="setIP" signature="setIP(ip, prefixLen=8, intf=None)"><variable citdl="Node" ilk="argument" name="self" /><variable citdl="str" ilk="argument" name="ip" /><variable citdl="int" ilk="argument" name="prefixLen" /><variable ilk="argument" name="intf" /></scope><scope doc="Return IP address of a node or specific interface." ilk="function" line="444" lineend="446" name="IP" signature="IP(intf=None)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="intf" /></scope><scope doc="Return MAC address of a node or specific interface." ilk="function" line="448" lineend="450" name="MAC" signature="MAC(intf=None)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="intf" /></scope><scope doc="Check if an interface is up." ilk="function" line="452" lineend="454" name="intfIsUp" signature="intfIsUp(intf=None)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="intf" /></scope><scope doc="Internal method: configure a *single* parameter&#xA;results: dict of results to update&#xA;method: config method name&#xA;param: arg=value (ignore if value=None)&#xA;value may also be list or dict" ilk="function" line="462" lineend="479" name="setParam" returns="f()" signature="setParam(results, method, **param)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="results" /><variable ilk="argument" name="method" /><variable attributes="kwargs" ilk="argument" name="param" /><variable citdl="getattr()" line="469" name="f" /><variable citdl="f()" line="473" name="result" /></scope><scope doc="Configure Node according to (optional) parameters:&#xA;mac: MAC address for default interface&#xA;ip: IP address for default interface&#xA;ifconfig: arbitrary interface configuration&#xA;Subclasses should override this method and call&#xA;the parent class&apos;s config(**params)" ilk="function" line="481" lineend="498" name="config" returns="dict" signature="config(mac=None, ip=None, defaultRoute=None, lo=&apos;up&apos;, **_params)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="mac" /><variable ilk="argument" name="ip" /><variable ilk="argument" name="defaultRoute" /><variable citdl="str" ilk="argument" name="lo" /><variable attributes="kwargs" ilk="argument" name="_params" /><variable citdl="dict" line="492" name="r" /></scope><scope doc="Configure with default parameters" ilk="function" line="500" lineend="503" name="configDefault" signature="configDefault(**moreParams)"><variable citdl="Node" ilk="argument" name="self" /><variable attributes="kwargs" ilk="argument" name="moreParams" /></scope><scope doc="(Deprecated) Link to another node&#xA;replace with Link( node1, node2)" ilk="function" line="506" lineend="509" name="linkTo" returns="Node.linkTo.link()" signature="linkTo(node, link=Link)"><variable citdl="Node" ilk="argument" name="self" /><variable ilk="argument" name="node" /><variable citdl="Link" ilk="argument" name="link" /></scope><scope doc="List of our interfaces sorted by port number" ilk="function" line="513" lineend="515" name="intfList" returns="list" signature="intfList()"><variable citdl="Node" ilk="argument" name="self" /></scope><scope doc="The names of our interfaces sorted by port number" ilk="function" line="517" lineend="519" name="intfNames" returns="list" signature="intfNames()"><variable citdl="Node" ilk="argument" name="self" /></scope><scope doc="More informative string representation" ilk="function" line="521" lineend="526" name="__repr__" returns="tuple" signature="__repr__()"><variable citdl="Node" ilk="argument" name="self" /><variable citdl="__builtins__.str.join()" line="523" name="intfs" /></scope><scope doc="Abbreviated string representation" ilk="function" line="528" lineend="530" name="__str__" signature="__str__()"><variable citdl="Node" ilk="argument" name="self" /></scope><variable citdl="False" line="534" name="isSetup" /><scope doc="Make sure our class and superclasses are set up" ilk="function" line="537" lineend="543" name="checkSetup" signature="checkSetup()"><variable citdl="Node" ilk="argument" name="cls" /></scope><scope doc="Make sure our class dependencies are available" ilk="function" line="546" lineend="548" name="setup" signature="setup()"><variable citdl="Node" ilk="argument" name="cls" /></scope></scope><scope classrefs="Node" doc="A host is simply a Node" ilk="class" line="551" lineend="553" name="Host" /><scope classrefs="Host" doc="CPU limited host" ilk="class" line="556" lineend="713" name="CPULimitedHost"><scope attributes="__ctor__" ilk="function" line="560" lineend="577" name="__init__" signature="CPULimitedHost(name, sched=&apos;cfs&apos;, **kwargs)"><variable citdl="CPULimitedHost" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable citdl="str" ilk="argument" name="sched" /><variable attributes="kwargs" ilk="argument" name="kwargs" /></scope><variable attributes="__instancevar__" citdl="self.name" line="566" name="cgroup" /><variable attributes="__instancevar__" citdl="kwargs.get()" line="575" name="period_us" /><variable attributes="__instancevar__" citdl="str" line="576" name="sched" /><variable attributes="__instancevar__" citdl="int" line="577" name="rtprio" /><scope doc="Set a cgroup parameter and return its value" ilk="function" line="579" lineend="588" name="cgroupSet" returns="int()" signature="cgroupSet(param, value, resource=&apos;cpu&apos;)"><variable citdl="CPULimitedHost" ilk="argument" name="self" /><variable ilk="argument" name="param" /><variable ilk="argument" name="value" /><variable citdl="str" ilk="argument" name="resource" /><variable citdl="str" line="581" name="cmd" /><variable citdl="int()" line="584" name="nvalue" /></scope><scope doc="Return value of cgroup parameter" ilk="function" line="590" lineend="594" name="cgroupGet" returns="int()" signature="cgroupGet(param, resource=&apos;cpu&apos;)"><variable citdl="CPULimitedHost" ilk="argument" name="self" /><variable ilk="argument" name="param" /><variable citdl="str" ilk="argument" name="resource" /><variable citdl="str" line="592" name="cmd" /></scope><scope doc="Clean up our cgroup" ilk="function" line="596" lineend="600" name="cgroupDel" returns="bool" signature="cgroupDel()"><variable citdl="CPULimitedHost" ilk="argument" name="self" /><variable attributes="protected" line="599" name="_err" /><variable attributes="protected" line="599" name="_out" /><variable line="599" name="exitcode" /></scope><scope doc="Return a Popen() object in node&apos;s namespace&#xA;args: Popen() args, single list, or string&#xA;kwargs: Popen() keyword args" ilk="function" line="602" lineend="611" name="popen" returns="Host.popen()" signature="popen(*args, **kwargs)"><variable citdl="CPULimitedHost" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kwargs" /><variable citdl="list" line="607" name="mncmd" /></scope><scope doc="Clean up our cgroup" ilk="function" line="613" lineend="615" name="cleanup" signature="cleanup()"><variable citdl="CPULimitedHost" ilk="argument" name="self" /></scope><scope doc="Set RT scheduling priority" ilk="function" line="617" lineend="625" name="chrt" signature="chrt()"><variable citdl="CPULimitedHost" ilk="argument" name="self" /><variable citdl="quietRun()" line="620" name="result" /><variable line="621" name="firstline" /><variable line="622" name="lastword" /></scope><scope doc="Internal method: return parameters for RT bandwidth" ilk="function" line="627" lineend="632" name="rtInfo" returns="tuple" signature="rtInfo(f)"><variable citdl="CPULimitedHost" ilk="argument" name="self" /><variable ilk="argument" name="f" /><variable citdl="str" line="629" name="pstr" /><variable citdl="str" line="629" name="qstr" /><variable citdl="int()" line="631" name="quota" /></scope><scope doc="Internal method: return parameters for CFS bandwidth" ilk="function" line="634" lineend="644" name="cfsInfo" returns="tuple" signature="cfsInfo(f)"><variable citdl="CPULimitedHost" ilk="argument" name="self" /><variable ilk="argument" name="f" /><variable citdl="str" line="636" name="pstr" /><variable citdl="str" line="636" name="qstr" /><variable citdl="int" line="638" name="quota" /><variable citdl="int()" line="639" name="period" /></scope><scope doc="Set overall CPU fraction for this host&#xA;f: CPU bandwidth limit (fraction)&#xA;sched: &apos;rt&apos; or &apos;cfs&apos;&#xA;Note &apos;cfs&apos; requires CONFIG_CFS_BANDWIDTH" ilk="function" line="655" lineend="679" name="setCPUFrac" signature="setCPUFrac(f=-1, sched=None)"><variable citdl="CPULimitedHost" ilk="argument" name="self" /><variable citdl="int" ilk="argument" name="f" /><variable citdl="str" ilk="argument" name="sched" /><variable line="665" name="pstr" /><variable line="665" name="qstr" /><variable line="665" name="period" /><variable citdl="int" line="665" name="quota" /></scope><scope ilk="function" line="681" lineend="694" name="setCPUs" signature="Specify (real) cores that our cgroup can run on"><variable citdl="CPULimitedHost" ilk="argument" name="self" /><variable citdl="__builtins__.str.join()" ilk="argument" name="cores" /><variable citdl="int" ilk="argument" name="mems" /></scope><scope doc="cpu: desired overall system CPU fraction&#xA;cores: (real) core(s) this host can run on&#xA;params: parameters for Node.config()" ilk="function" line="696" lineend="705" name="config" returns="Node.config()" signature="config(cpu=None, cores=None, **params)"><variable citdl="CPULimitedHost" ilk="argument" name="self" /><variable ilk="argument" name="cpu" /><variable ilk="argument" name="cores" /><variable attributes="kwargs" ilk="argument" name="params" /><variable citdl="Node.config()" line="700" name="r" /></scope><variable citdl="False" line="707" name="inited" /><scope doc="Initialization for CPULimitedHost class" ilk="function" line="710" lineend="713" name="init" signature="init()"><variable citdl="CPULimitedHost" ilk="argument" name="cls" /></scope></scope><scope classrefs="Node" doc="A Switch is a Node that is running (or has execed?)&#xA;an OpenFlow switch." ilk="class" line="736" lineend="788" name="Switch"><variable citdl="int" line="740" name="portBase" /><variable citdl="int" line="741" name="dpidLen" /><scope attributes="__ctor__" doc="dpid: dpid for switch (or None to derive from name, e.g. s1 -&gt; 1)&#xA;opts: additional switch options&#xA;listenPort: port to listen on for dpctl connections" ilk="function" line="743" lineend="752" name="__init__" signature="Switch(name, dpid=None, opts=&apos;&apos;, listenPort=None, **params)"><variable citdl="Switch" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable ilk="argument" name="dpid" /><variable citdl="str" ilk="argument" name="opts" /><variable ilk="argument" name="listenPort" /><variable attributes="kwargs" ilk="argument" name="params" /></scope><variable attributes="__instancevar__" line="748" name="dpid" /><variable attributes="__instancevar__" citdl="str" line="749" name="opts" /><variable attributes="__instancevar__" line="750" name="listenPort" /><variable attributes="__instancevar__" citdl="Intf()" line="752" name="controlIntf" /><scope doc="Derive dpid from switch name, s1 -&gt; 1" ilk="function" line="754" lineend="762" name="defaultDpid" returns="int()" signature="defaultDpid()"><variable citdl="Switch" ilk="argument" name="self" /><variable citdl="int()" line="757" name="dpid" /></scope><scope doc="Return control interface" ilk="function" line="766" lineend="771" name="defaultIntf" returns="Node.defaultIntf()" signature="defaultIntf()"><variable citdl="Switch" ilk="argument" name="self" /></scope><scope doc="Send command to Node.&#xA;cmd: string" ilk="function" line="773" lineend="781" name="sendCmd" returns="Node.sendCmd()" signature="sendCmd(*cmd, **kwargs)"><variable citdl="Switch" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="cmd" /><variable attributes="kwargs" ilk="argument" name="kwargs" /></scope><scope doc="More informative string representation" ilk="function" line="783" lineend="788" name="__repr__" returns="tuple" signature="__repr__()"><variable citdl="Switch" ilk="argument" name="self" /><variable citdl="__builtins__.str.join()" line="785" name="intfs" /></scope></scope><scope classrefs="Switch" doc="User-space switch." ilk="class" line="790" lineend="841" name="UserSwitch"><variable citdl="int" line="793" name="dpidLen" /><scope attributes="__ctor__" doc="Init.&#xA;name: name for the switch" ilk="function" line="795" lineend="803" name="__init__" signature="UserSwitch(name, **kwargs)"><variable citdl="UserSwitch" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable attributes="kwargs" ilk="argument" name="kwargs" /></scope><scope doc="Ensure any dependencies are loaded; if not, try to load them." ilk="function" line="806" lineend="809" name="setup" signature="setup()"><variable citdl="UserSwitch" ilk="argument" name="cls" /></scope><scope doc="Run dpctl command" ilk="function" line="811" lineend="816" name="dpctl" returns="self.cmd()" signature="dpctl(*args)"><variable citdl="UserSwitch" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /></scope><scope doc="Start OpenFlow reference user datapath.&#xA;Log to /tmp/sN-{ofd,ofp}.log.&#xA;controllers: list of controller objects" ilk="function" line="818" lineend="835" name="start" signature="start(controllers)"><variable citdl="UserSwitch" ilk="argument" name="self" /><variable ilk="argument" name="controllers" /><variable citdl="__builtins__.str.join()" line="823" name="clist" /><variable citdl="str" line="825" name="ofdlog" /><variable citdl="str" line="826" name="ofplog" /><variable citdl="list" line="828" name="intfs" /></scope><scope doc="Stop OpenFlow reference user datapath." ilk="function" line="837" lineend="841" name="stop" signature="stop()"><variable citdl="UserSwitch" ilk="argument" name="self" /></scope></scope><scope classrefs="Switch" doc="Open VSwitch legacy kernel-space switch using ovs-openflowd.&#xA;Currently only works in the root namespace." ilk="class" line="844" lineend="892" name="OVSLegacyKernelSwitch"><scope attributes="__ctor__" doc="Init.&#xA;name: name for switch&#xA;dp: netlink id (0, 1, 2, ...)&#xA;defaultMAC: default MAC as unsigned int; random value if None" ilk="function" line="848" lineend="859" name="__init__" signature="OVSLegacyKernelSwitch(name, dp=None, **kwargs)"><variable citdl="OVSLegacyKernelSwitch" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable ilk="argument" name="dp" /><variable attributes="kwargs" ilk="argument" name="kwargs" /></scope><variable attributes="__instancevar__" line="854" name="dp" /><variable attributes="__instancevar__" line="855" name="intf" /><scope doc="Ensure any dependencies are loaded; if not, try to load them." ilk="function" line="862" lineend="866" name="setup" signature="setup()"><variable citdl="OVSLegacyKernelSwitch" ilk="argument" name="cls" /></scope><scope doc="Start up kernel datapath." ilk="function" line="868" lineend="886" name="start" signature="start(controllers)"><variable citdl="OVSLegacyKernelSwitch" ilk="argument" name="self" /><variable ilk="argument" name="controllers" /><variable citdl="str" line="870" name="ofplog" /><variable citdl="list" line="876" name="intfs" /><variable citdl="__builtins__.str.join()" line="879" name="clist" /></scope><variable attributes="__instancevar__" citdl="False" line="886" name="execed" /><scope doc="Terminate kernel datapath." ilk="function" line="888" lineend="892" name="stop" signature="stop()"><variable citdl="OVSLegacyKernelSwitch" ilk="argument" name="self" /></scope></scope><scope classrefs="Switch" doc="Open vSwitch switch. Depends on ovs-vsctl." ilk="class" line="895" lineend="974" name="OVSSwitch"><scope attributes="__ctor__" doc="Init.&#xA;name: name for switch&#xA;failMode: controller loss behavior (secure|open)" ilk="function" line="898" lineend="903" name="__init__" signature="OVSSwitch(name, failMode=&apos;secure&apos;, **params)"><variable citdl="OVSSwitch" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable citdl="str" ilk="argument" name="failMode" /><variable attributes="kwargs" ilk="argument" name="params" /></scope><variable attributes="__instancevar__" citdl="str" line="903" name="failMode" /><scope doc="Make sure Open vSwitch is installed and working" ilk="function" line="906" lineend="923" name="setup" signature="setup()"><variable citdl="OVSSwitch" ilk="argument" name="cls" /><variable line="913" name="out" /><variable line="913" name="err" /><variable line="913" name="exitcode" /></scope><scope doc="Run ovs-dpctl command" ilk="function" line="925" lineend="927" name="dpctl" returns="self.cmd()" signature="dpctl(*args)"><variable citdl="OVSSwitch" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /></scope><scope doc="Unfortunately OVS and Mininet are fighting&#xA;over tc queuing disciplines. As a quick hack/&#xA;workaround, we clear OVS&apos;s and reapply our own." ilk="function" line="930" lineend="935" name="TCReapply" signature="TCReapply()"><variable citdl="OVSSwitch" ilk="argument" name="intf" /></scope><scope doc="Connect a data port" ilk="function" line="937" lineend="941" name="attach" signature="attach(intf)"><variable citdl="OVSSwitch" ilk="argument" name="self" /><variable ilk="argument" name="intf" /></scope><scope doc="Disconnect a data port" ilk="function" line="943" lineend="945" name="detach" signature="detach(intf)"><variable citdl="OVSSwitch" ilk="argument" name="self" /><variable ilk="argument" name="intf" /></scope><scope doc="Start up a new OVS OpenFlow switch using ovs-vsctl" ilk="function" line="947" lineend="969" name="start" signature="start(controllers)"><variable citdl="OVSSwitch" ilk="argument" name="self" /><variable ilk="argument" name="controllers" /><variable citdl="__builtins__.str.join()" line="965" name="clist" /></scope><scope doc="Terminate OVS switch." ilk="function" line="971" lineend="974" name="stop" signature="stop()"><variable citdl="OVSSwitch" ilk="argument" name="self" /></scope></scope><variable citdl="OVSSwitch" line="976" name="OVSKernelSwitch" /><scope classrefs="Node" doc="A Controller is a Node that is running (or has execed?) an&#xA;OpenFlow controller." ilk="class" line="979" lineend="1042" name="Controller"><scope attributes="__ctor__" ilk="function" line="983" lineend="994" name="__init__" signature="Controller(name, inNamespace=False, command=&apos;controller&apos;, cargs=&apos;-v ptcp:%d&apos;, cdir=None, ip=&apos;127.0.0.1&apos;, port=6633, **params)"><variable citdl="Controller" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable citdl="False" ilk="argument" name="inNamespace" /><variable citdl="str" ilk="argument" name="command" /><variable citdl="str" ilk="argument" name="cargs" /><variable ilk="argument" name="cdir" /><variable citdl="str" ilk="argument" name="ip" /><variable citdl="int" ilk="argument" name="port" /><variable attributes="kwargs" ilk="argument" name="params" /></scope><variable attributes="__instancevar__" citdl="str" line="986" name="command" /><variable attributes="__instancevar__" citdl="str" line="987" name="cargs" /><variable attributes="__instancevar__" line="988" name="cdir" /><variable attributes="__instancevar__" citdl="str" line="989" name="ip" /><variable attributes="__instancevar__" citdl="int" line="990" name="port" /><scope doc="Make sure no controllers are running on our port" ilk="function" line="996" lineend="1012" name="checkListening" signature="checkListening()"><variable citdl="Controller" ilk="argument" name="self" /><variable line="999" name="returnCode" /><variable attributes="protected" line="999" name="_err" /><variable line="999" name="out" /><variable citdl="self.cmd()" line="1004" name="listening" /><variable line="1007" name="servers" /><variable citdl="str" line="1008" name="pstr" /><variable citdl="list" line="1009" name="clist" /></scope><scope doc="Start &lt;controller&gt; &lt;args&gt; on controller.&#xA;Log to /tmp/cN.log" ilk="function" line="1014" lineend="1023" name="start" signature="start()"><variable citdl="Controller" ilk="argument" name="self" /><variable citdl="str" line="1018" name="cout" /></scope><variable attributes="__instancevar__" citdl="False" line="1023" name="execed" /><scope doc="Stop controller." ilk="function" line="1025" lineend="1028" name="stop" signature="stop()"><variable citdl="Controller" ilk="argument" name="self" /></scope><scope doc="Return IP address of the Controller" ilk="function" line="1030" lineend="1036" name="IP" returns="str" signature="IP(intf=None)"><variable citdl="Controller" ilk="argument" name="self" /><variable ilk="argument" name="intf" /><variable citdl="Node.IP()" line="1033" name="ip" /></scope><scope doc="More informative string representation" ilk="function" line="1038" lineend="1042" name="__repr__" returns="tuple" signature="__repr__()"><variable citdl="Controller" ilk="argument" name="self" /></scope></scope><scope classrefs="Controller" doc="Open vSwitch controller" ilk="class" line="1045" lineend="1048" name="OVSController"><scope attributes="__ctor__" ilk="function" line="1047" lineend="1048" name="__init__" signature="OVSController(name, command=&apos;ovs-controller&apos;, **kwargs)"><variable citdl="OVSController" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable citdl="str" ilk="argument" name="command" /><variable attributes="kwargs" ilk="argument" name="kwargs" /></scope></scope><scope classrefs="Controller" doc="Controller to run a NOX application." ilk="class" line="1051" lineend="1074" name="NOX"><scope attributes="__ctor__" doc="Init.&#xA;name: name to give controller&#xA;noxArgs: arguments (strings) to pass to NOX" ilk="function" line="1054" lineend="1074" name="__init__" signature="NOX(name, *noxArgs, **kwargs)"><variable citdl="NOX" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable attributes="varargs" citdl="list" ilk="argument" name="noxArgs" /><variable attributes="kwargs" ilk="argument" name="kwargs" /><variable line="1067" name="noxCoreDir" /></scope></scope><scope classrefs="Controller" doc="Controller running outside of Mininet&apos;s control." ilk="class" line="1077" lineend="1103" name="RemoteController"><scope attributes="__ctor__" doc="Init.&#xA;name: name to give controller&#xA;ip: the IP address where the remote controller is&#xA;listening&#xA;port: the port where the remote controller is listening" ilk="function" line="1080" lineend="1087" name="__init__" signature="RemoteController(name, ip=&apos;127.0.0.1&apos;, port=6633, **kwargs)"><variable citdl="RemoteController" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable citdl="str" ilk="argument" name="ip" /><variable citdl="int" ilk="argument" name="port" /><variable attributes="kwargs" ilk="argument" name="kwargs" /></scope><scope doc="Overridden to do nothing." ilk="function" line="1089" name="start" signature="start()"><variable citdl="RemoteController" ilk="argument" name="self" /></scope><scope doc="Overridden to do nothing." ilk="function" line="1093" name="stop" signature="stop()"><variable citdl="RemoteController" ilk="argument" name="self" /></scope><scope doc="Warn if remote controller is not accessible" ilk="function" line="1097" lineend="1103" name="checkListening" signature="checkListening()"><variable citdl="RemoteController" ilk="argument" name="self" /><variable citdl="self.cmd()" line="1099" name="listening" /></scope></scope></scope>