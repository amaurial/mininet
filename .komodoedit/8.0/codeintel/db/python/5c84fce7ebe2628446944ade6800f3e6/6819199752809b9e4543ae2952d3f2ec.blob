<scope doc="Mininet: A simple networking testbed for OpenFlow/SDN!" ilk="blob" lang="Python" name="net" src="/usr/local/lib/python2.7/dist-packages/mininet-2.0.0-py2.7.egg/mininet/net.py"><import line="89" module="os" /><import line="90" module="re" /><import line="91" module="select" /><import line="92" module="signal" /><import line="93" module="time" symbol="sleep" /><import line="95" module="mininet.cli" symbol="CLI" /><import line="96" module="mininet.log" symbol="info" /><import line="96" module="mininet.log" symbol="error" /><import line="96" module="mininet.log" symbol="debug" /><import line="96" module="mininet.log" symbol="output" /><import line="97" module="mininet.node" symbol="Host" /><import line="97" module="mininet.node" symbol="OVSKernelSwitch" /><import line="97" module="mininet.node" symbol="Controller" /><import line="98" module="mininet.link" symbol="Link" /><import line="98" module="mininet.link" symbol="Intf" /><import line="99" module="mininet.util" symbol="quietRun" /><import line="99" module="mininet.util" symbol="fixLimits" /><import line="99" module="mininet.util" symbol="numCores" /><import line="99" module="mininet.util" symbol="ensureRoot" /><import line="100" module="mininet.util" symbol="macColonHex" /><import line="100" module="mininet.util" symbol="ipStr" /><import line="100" module="mininet.util" symbol="ipParse" /><import line="100" module="mininet.util" symbol="netParse" /><import line="100" module="mininet.util" symbol="ipAdd" /><import line="101" module="mininet.term" symbol="cleanUpScreens" /><import line="101" module="mininet.term" symbol="makeTerms" /><variable citdl="str" line="104" name="VERSION" /><scope classrefs="object" doc="Network emulation with hosts spawned in network namespaces." ilk="class" line="106" lineend="682" name="Mininet"><scope attributes="__ctor__" doc="Create Mininet object.&#xA;topo: Topo (topology) object or None&#xA;switch: default Switch class&#xA;host: default Host class/constructor&#xA;controller: default Controller class/constructor&#xA;link: default Link class/constructor&#xA;intf: default Intf class/constructor&#xA;ipBase: base IP address for hosts,&#xA;build: build now from topo?&#xA;xterms: if build now, spawn xterms?&#xA;cleanup: if build now, cleanup before creating?&#xA;inNamespace: spawn switches and controller in net namespaces?&#xA;autoSetMacs: set MAC addrs automatically like IP addresses?&#xA;autoStaticArp: set all-pairs static MAC addrs?&#xA;autoPinCpus: pin hosts to (real) cores (requires CPULimitedHost)?&#xA;listenPort: base listening port to open; will be incremented for&#xA;    each additional switch in the net if inNamespace=False" ilk="function" line="109" lineend="163" name="__init__" signature="Mininet(topo=None, switch=OVSKernelSwitch, host=Host, controller=Controller, link=Link, intf=Intf, build=True, xterms=False, cleanup=False, ipBase=&apos;10.0.0.0/8&apos;, inNamespace=False, autoSetMacs=False, autoStaticArp=False, autoPinCpus=False, listenPort=None)"><variable citdl="Mininet" ilk="argument" name="self" /><variable ilk="argument" name="topo" /><variable citdl="OVSKernelSwitch" ilk="argument" name="switch" /><variable citdl="Host" ilk="argument" name="host" /><variable citdl="Controller" ilk="argument" name="controller" /><variable citdl="Link" ilk="argument" name="link" /><variable citdl="Intf" ilk="argument" name="intf" /><variable citdl="True" ilk="argument" name="build" /><variable citdl="False" ilk="argument" name="xterms" /><variable citdl="False" ilk="argument" name="cleanup" /><variable citdl="str" ilk="argument" name="ipBase" /><variable citdl="False" ilk="argument" name="inNamespace" /><variable citdl="False" ilk="argument" name="autoSetMacs" /><variable citdl="False" ilk="argument" name="autoStaticArp" /><variable citdl="False" ilk="argument" name="autoPinCpus" /><variable ilk="argument" name="listenPort" /></scope><variable attributes="__instancevar__" line="132" name="topo" /><variable attributes="__instancevar__" citdl="OVSKernelSwitch" line="133" name="switch" /><variable attributes="__instancevar__" citdl="Host" line="134" name="host" /><variable attributes="__instancevar__" citdl="Controller" line="135" name="controller" /><variable attributes="__instancevar__" citdl="Link" line="136" name="link" /><variable attributes="__instancevar__" citdl="Intf" line="137" name="intf" /><variable attributes="__instancevar__" citdl="str" line="138" name="ipBase" /><variable attributes="__instancevar__" line="139" name="ipBaseNum" /><variable attributes="__instancevar__" line="139" name="prefixLen" /><variable attributes="__instancevar__" citdl="int" line="140" name="nextIP" /><variable attributes="__instancevar__" citdl="False" line="141" name="inNamespace" /><variable attributes="__instancevar__" citdl="False" line="142" name="xterms" /><variable attributes="__instancevar__" citdl="False" line="143" name="cleanup" /><variable attributes="__instancevar__" citdl="False" line="144" name="autoSetMacs" /><variable attributes="__instancevar__" citdl="False" line="145" name="autoStaticArp" /><variable attributes="__instancevar__" citdl="False" line="146" name="autoPinCpus" /><variable attributes="__instancevar__" citdl="numCores()" line="147" name="numCores" /><variable attributes="__instancevar__" citdl="int" line="148" name="nextCore" /><variable attributes="__instancevar__" line="149" name="listenPort" /><variable attributes="__instancevar__" citdl="list" line="151" name="hosts" /><variable attributes="__instancevar__" citdl="list" line="152" name="switches" /><variable attributes="__instancevar__" citdl="list" line="153" name="controllers" /><variable attributes="__instancevar__" citdl="dict" line="155" name="nameToNode" /><variable attributes="__instancevar__" citdl="list" line="157" name="terms" /><variable attributes="__instancevar__" citdl="True" line="161" name="built" /><scope doc="Add host.&#xA;name: name of host to add&#xA;cls: custom host class/constructor (optional)&#xA;params: parameters for host&#xA;returns: added host" ilk="function" line="165" lineend="188" name="addHost" returns="cls()" signature="addHost(name, cls=None, **params)"><variable citdl="Mininet" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable citdl="Host" ilk="argument" name="cls" /><variable attributes="kwargs" ilk="argument" name="params" /><variable citdl="dict" line="172" name="defaults" /><variable citdl="cls()" line="185" name="h" /></scope><scope doc="Add switch.&#xA;name: name of switch to add&#xA;cls: custom switch class/constructor (optional)&#xA;returns: added switch&#xA;side effect: increments listenPort ivar ." ilk="function" line="190" lineend="206" name="addSwitch" returns="cls()" signature="addSwitch(name, cls=None, **params)"><variable citdl="Mininet" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable citdl="OVSKernelSwitch" ilk="argument" name="cls" /><variable attributes="kwargs" ilk="argument" name="params" /><variable citdl="dict" line="196" name="defaults" /><variable citdl="cls()" line="201" name="sw" /></scope><scope doc="Add controller.&#xA;controller: Controller class" ilk="function" line="208" lineend="217" name="addController" returns="controller()" signature="addController(name=&apos;c0&apos;, controller=None, **params)"><variable citdl="Mininet" ilk="argument" name="self" /><variable citdl="str" ilk="argument" name="name" /><variable citdl="Controller" ilk="argument" name="controller" /><variable attributes="kwargs" ilk="argument" name="params" /><variable citdl="controller()" line="213" name="controller_new" /></scope><scope doc="Return node(s) with given name(s)" ilk="function" line="221" lineend="225" name="getNodeByName" returns="list" signature="getNodeByName(*args)"><variable citdl="Mininet" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /></scope><scope doc="Convenience alias for getNodeByName" ilk="function" line="227" lineend="229" name="get" returns="Mininet.getNodeByName()" signature="get(*args)"><variable citdl="Mininet" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /></scope><scope doc="&quot;Add a link from node1 to node2&#xA;node1: source node&#xA;node2: dest node&#xA;port1: source port&#xA;port2: dest port&#xA;returns: link object" ilk="function" line="231" lineend="245" name="addLink" returns="Mininet.addLink.cls()" signature="addLink(node1, node2, port1=None, port2=None, cls=None, **params)"><variable citdl="Mininet" ilk="argument" name="self" /><variable ilk="argument" name="node1" /><variable ilk="argument" name="node2" /><variable ilk="argument" name="port1" /><variable ilk="argument" name="port2" /><variable citdl="Link" ilk="argument" name="cls" /><variable attributes="kwargs" ilk="argument" name="params" /><variable citdl="dict" line="239" name="defaults" /></scope><scope doc="Configure a set of hosts." ilk="function" line="247" lineend="264" name="configHosts" signature="configHosts()"><variable citdl="Mininet" ilk="argument" name="self" /><variable citdl="host.defaultIntf()" line="251" name="intf" /></scope><scope doc="Build mininet from a topology object&#xA;At the end of this function, everything should be connected&#xA;and up." ilk="function" line="266" lineend="305" name="buildFromTopo" signature="buildFromTopo(topo=None)"><variable citdl="Mininet" ilk="argument" name="self" /><variable ilk="argument" name="topo" /><variable citdl="list" line="281" name="classes" /><variable line="299" name="src" /><variable line="299" name="dst" /><variable citdl="topo.linkInfo()" line="300" name="params" /><variable line="301" name="srcPort" /><variable line="301" name="dstPort" /></scope><scope doc="Control net config hook: override in subclass" ilk="function" line="307" lineend="310" name="configureControlNetwork" signature="configureControlNetwork()"><variable citdl="Mininet" ilk="argument" name="self" /></scope><scope doc="Build mininet." ilk="function" line="312" lineend="324" name="build" signature="build()"><variable citdl="Mininet" ilk="argument" name="self" /></scope><scope doc="Start a terminal for each node." ilk="function" line="326" lineend="332" name="startTerms" signature="startTerms()"><variable citdl="Mininet" ilk="argument" name="self" /></scope><scope doc="Kill each xterm." ilk="function" line="334" lineend="338" name="stopXterms" signature="stopXterms()"><variable citdl="Mininet" ilk="argument" name="self" /></scope><scope doc="Add all-pairs ARP entries to remove the need to handle broadcast." ilk="function" line="340" lineend="345" name="staticArp" signature="staticArp()"><variable citdl="Mininet" ilk="argument" name="self" /></scope><scope doc="Start controller and switches." ilk="function" line="347" lineend="358" name="start" signature="start()"><variable citdl="Mininet" ilk="argument" name="self" /></scope><scope doc="Stop the controller(s), switches and hosts" ilk="function" line="360" lineend="379" name="stop" signature="stop()"><variable citdl="Mininet" ilk="argument" name="self" /></scope><scope doc="Perform a complete start/test/stop cycle." ilk="function" line="381" lineend="387" name="run" returns="test()" signature="run(test, *args, **kwargs)"><variable citdl="Mininet" ilk="argument" name="self" /><variable ilk="argument" name="test" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kwargs" /><variable citdl="test()" line="385" name="result" /></scope><scope doc="Monitor a set of hosts (or all hosts by default),&#xA;and return their output, a line at a time.&#xA;hosts: (optional) set of hosts to monitor&#xA;timeoutms: (optional) timeout value in ms&#xA;returns: iterator which returns host, line" ilk="function" line="389" lineend="411" name="monitor" signature="monitor(hosts=None, timeoutms=-1)"><variable citdl="Mininet" ilk="argument" name="self" /><variable citdl="list" ilk="argument" name="hosts" /><variable citdl="int" ilk="argument" name="timeoutms" /><variable citdl="select.poll()" line="397" name="poller" /><variable line="398" name="Node" /><variable citdl="poller.poll()" line="402" name="ready" /><variable citdl="Node.fdToNode()" line="404" name="host" /><variable citdl="host.readline()" line="406" name="line" /></scope><scope attributes="protected" doc="Parse ping output and return packets sent, received." ilk="function" line="417" lineend="429" name="_parsePing" returns="tuple" signature="_parsePing()"><variable citdl="Mininet" ilk="argument" name="pingOutput" /><variable citdl="str" line="422" name="r" /><variable citdl="re.search()" line="423" name="m" /><variable citdl="int()" line="428" name="received" /><variable citdl="int()" line="428" name="sent" /></scope><scope doc="Ping between all specified hosts.&#xA;hosts: list of hosts&#xA;timeout: time to wait for a response, as string&#xA;returns: ploss packet loss percentage" ilk="function" line="431" lineend="464" name="ping" returns="int" signature="ping(hosts=None, timeout=None)"><variable citdl="Mininet" ilk="argument" name="self" /><variable citdl="list" ilk="argument" name="hosts" /><variable ilk="argument" name="timeout" /><variable citdl="int" line="437" name="packets" /><variable citdl="int" line="438" name="lost" /><variable citdl="int" line="439" name="ploss" /><variable citdl="str" line="447" name="opts" /><variable citdl="node.cmd()" line="450" name="result" /><variable line="451" name="received" /><variable line="451" name="sent" /></scope><scope attributes="protected" doc="Parse ping output and return all data." ilk="function" line="467" lineend="486" name="_parsePingFull" returns="tuple" signature="_parsePingFull()"><variable citdl="Mininet" ilk="argument" name="pingOutput" /><variable citdl="str" line="472" name="r" /><variable citdl="re.search()" line="473" name="m" /><variable citdl="int()" line="478" name="received" /><variable citdl="int()" line="478" name="sent" /><variable citdl="float()" line="482" name="rttmin" /><variable citdl="float()" line="483" name="rttavg" /><variable citdl="float()" line="484" name="rttmax" /><variable citdl="float()" line="485" name="rttdev" /></scope><scope doc="Ping between all specified hosts and return all data.&#xA;hosts: list of hosts&#xA;timeout: time to wait for a response, as string&#xA;returns: all ping data; see function body." ilk="function" line="488" lineend="519" name="pingFull" returns="list" signature="pingFull(hosts=None, timeout=None)"><variable citdl="Mininet" ilk="argument" name="self" /><variable citdl="list" ilk="argument" name="hosts" /><variable ilk="argument" name="timeout" /><variable citdl="list" line="495" name="all_outputs" /><variable citdl="str" line="503" name="opts" /><variable citdl="node.cmd()" line="506" name="result" /><variable citdl="_parsePingFull()" line="507" name="outputs" /></scope><scope doc="Ping between all hosts.&#xA;returns: ploss packet loss percentage" ilk="function" line="521" lineend="524" name="pingAll" returns="Mininet.ping()" signature="pingAll()"><variable citdl="Mininet" ilk="argument" name="self" /></scope><scope doc="Ping between first two hosts, useful for testing.&#xA;returns: ploss packet loss percentage" ilk="function" line="526" lineend="530" name="pingPair" returns="Mininet.ping()" signature="pingPair()"><variable citdl="Mininet" ilk="argument" name="self" /><variable citdl="list" line="529" name="hosts" /></scope><scope doc="Ping between all hosts.&#xA;returns: ploss packet loss percentage" ilk="function" line="532" lineend="535" name="pingAllFull" returns="Mininet.pingFull()" signature="pingAllFull()"><variable citdl="Mininet" ilk="argument" name="self" /></scope><scope doc="Ping between first two hosts, useful for testing.&#xA;returns: ploss packet loss percentage" ilk="function" line="537" lineend="541" name="pingPairFull" returns="Mininet.pingFull()" signature="pingPairFull()"><variable citdl="Mininet" ilk="argument" name="self" /><variable citdl="list" line="540" name="hosts" /></scope><scope attributes="protected" doc="Parse iperf output and return bandwidth.&#xA;iperfOutput: string&#xA;returns: result string" ilk="function" line="544" lineend="555" name="_parseIperf" returns="str" signature="_parseIperf()"><variable citdl="Mininet" ilk="argument" name="iperfOutput" /><variable citdl="str" line="548" name="r" /><variable citdl="re.findall()" line="549" name="m" /></scope><scope doc="Run iperf between two hosts.&#xA;hosts: list of hosts; if None, uses opposite hosts&#xA;l4Type: string, one of [ TCP, UDP ]&#xA;returns: results two-element array of server and client speeds" ilk="function" line="559" lineend="601" name="iperf" returns="list" signature="iperf(hosts=None, l4Type=&apos;TCP&apos;, udpBw=&apos;10M&apos;)"><variable citdl="Mininet" ilk="argument" name="self" /><variable citdl="list" ilk="argument" name="hosts" /><variable citdl="str" ilk="argument" name="l4Type" /><variable citdl="str" ilk="argument" name="udpBw" /><variable citdl="str" line="575" name="iperfArgs" /><variable citdl="str" line="576" name="bwArgs" /><variable citdl="str" line="583" name="servout" /><variable citdl="client.cmd()" line="591" name="cliout" /><variable citdl="list" line="597" name="result" /></scope><scope doc="run CPU limit test with &apos;while true&apos; processes.&#xA;cpu: desired CPU fraction of each host&#xA;duration: test duration in seconds&#xA;returns a single list of measured CPU fractions as floats." ilk="function" line="603" lineend="637" name="runCpuLimitTest" returns="list" signature="runCpuLimitTest(cpu, duration=5)"><variable citdl="Mininet" ilk="argument" name="self" /><variable ilk="argument" name="cpu" /><variable citdl="int" ilk="argument" name="duration" /><variable citdl="int" line="609" name="pct" /><variable citdl="list" line="611" name="hosts" /><variable citdl="list" line="614" name="pids" /><variable citdl="__builtins__.str.join()" line="615" name="pids_str" /><variable citdl="__builtins__.str.join()" line="616" name="cmd" /><variable citdl="list" line="618" name="outputs" /><variable citdl="list" line="624" name="cpu_fractions" /><variable citdl="str" line="629" name="r" /><variable citdl="re.search()" line="630" name="m" /></scope><scope doc="Change status of src &lt;-&gt; dst links.&#xA;src: node name&#xA;dst: node name&#xA;status: string {up, down}" ilk="function" line="641" lineend="664" name="configLinkStatus" signature="configLinkStatus(src, dst, status)"><variable citdl="Mininet" ilk="argument" name="self" /><variable ilk="argument" name="src" /><variable ilk="argument" name="dst" /><variable ilk="argument" name="status" /><variable citdl="src.connectionsTo()" line="655" name="connections" /><variable citdl="srcIntf.ifconfig()" line="659" name="result" /></scope><scope doc="Start network and run our simple CLI." ilk="function" line="666" lineend="671" name="interact" returns="CLI()" signature="interact()"><variable citdl="Mininet" ilk="argument" name="self" /><variable citdl="CLI()" line="669" name="result" /></scope><variable citdl="True" line="673" name="inited" /><scope doc="Initialize Mininet" ilk="function" line="676" lineend="682" name="init" signature="init()"><variable citdl="Mininet" ilk="argument" name="cls" /></scope></scope><scope classrefs="Mininet" doc="Control network support:&#xA;&#xA;Create an explicit control network. Currently this is only&#xA;used/usable with the user datapath.&#xA;&#xA;Notes:&#xA;&#xA;1. If the controller and switches are in the same (e.g. root)&#xA;   namespace, they can just use the loopback connection.&#xA;&#xA;2. If we can get unix domain sockets to work, we can use them&#xA;   instead of an explicit control network.&#xA;&#xA;3. Instead of routing, we could bridge or use &apos;in-band&apos; control.&#xA;&#xA;4. Even if we dispense with this in general, it could still be&#xA;   useful for people who wish to simulate a separate control&#xA;   network (since real networks may need one!)&#xA;&#xA;5. Basically nobody ever used this code, so it has been moved&#xA;   into its own class.&#xA;&#xA;6. Ultimately we may wish to extend this to allow us to create a&#xA;   control network which every node&apos;s control interface is&#xA;   attached to." ilk="class" line="685" lineend="753" name="MininetWithControlNet"><scope doc="Configure control network." ilk="function" line="713" lineend="715" name="configureControlNetwork" signature="configureControlNetwork()"><variable citdl="MininetWithControlNet" ilk="argument" name="self" /></scope><scope doc="Configure a routed control network on controller and switches.&#xA;For use with the user datapath only right now." ilk="function" line="720" lineend="753" name="configureRoutedControlNetwork" signature="configureRoutedControlNetwork(ip=&apos;192.168.123.1&apos;, prefixLen=16)"><variable citdl="MininetWithControlNet" ilk="argument" name="self" /><variable citdl="str" ilk="argument" name="ip" /><variable citdl="int" ilk="argument" name="prefixLen" /><variable line="724" name="controller" /><variable citdl="str" line="726" name="cip" /><variable citdl="ipParse()" line="727" name="snum" /><variable citdl="self.link()" line="730" name="link" /><variable citdl="link.intf1" line="731" name="sintf" /><variable citdl="link.intf2" line="731" name="cintf" /><variable citdl="ipStr()" line="736" name="sip" /></scope></scope></scope>