<scope doc="A very quick and dirty DHCP server" ilk="blob" lang="Python" name="dhcpd" src="/home/mininet/new_pox/pox/pox/misc/dhcpd.py"><import line="25" module="pox.core" symbol="core" /><import alias="of" line="26" module="pox.openflow.libopenflow_01" /><import alias="pkt" line="27" module="pox.lib.packet" /><import line="29" module="pox.lib.addresses" symbol="IPAddr" /><import line="29" module="pox.lib.addresses" symbol="EthAddr" /><import line="29" module="pox.lib.addresses" symbol="parse_cidr" /><import line="30" module="pox.lib.addresses" symbol="IP_BROADCAST" /><import line="30" module="pox.lib.addresses" symbol="IP_ANY" /><import line="31" module="pox.lib.revent" symbol="*" /><import line="32" module="pox.lib.util" symbol="dpid_to_str" /><variable citdl="core.getLogger()" line="34" name="log" /><scope doc="Use a switch&apos;s DPID as an EthAddr" ilk="function" line="37" lineend="42" name="ip_for_event" returns="EthAddr()" signature="ip_for_event(event)"><variable ilk="argument" name="event" /><variable line="41" name="eth" /></scope><scope classrefs="Event" doc="Raised when a lease is given&#xA;&#xA;Call nak() to abort this lease" ilk="class" line="45" lineend="58" name="DHCPLease"><scope attributes="__ctor__" ilk="function" line="51" lineend="55" name="__init__" signature="DHCPLease(host_mac, ip)"><variable citdl="DHCPLease" ilk="argument" name="self" /><variable ilk="argument" name="host_mac" /><variable ilk="argument" name="ip" /></scope><variable attributes="__instancevar__" line="53" name="host_mac" /><variable attributes="__instancevar__" line="54" name="ip" /><variable attributes="protected __instancevar__" citdl="False" line="55" name="_nak" /><scope ilk="function" line="57" lineend="58" name="nak" signature="nak()"><variable citdl="DHCPLease" ilk="argument" name="self" /></scope></scope><scope classrefs="object" doc="Superclass for DHCP address pools&#xA;&#xA;Note that it&apos;s just a subset of a list (thus, you can always just use&#xA;a list as a pool).  The one exception is an optional &quot;subnet_mask&quot; hint.&#xA;&#xA;It probably makes sense to change this abstraction so that we can more&#xA;easily return addresses from multiple ranges, and because some things&#xA;(e.g., getitem) are potentially difficult to implement and not particularly&#xA;useful (since we only need to remove a single item at a time)." ilk="class" line="61" lineend="109" name="AddressPool"><scope attributes="__ctor__" doc="Initialize this pool." ilk="function" line="73" lineend="77" name="__init__" signature="AddressPool()"><variable citdl="AddressPool" ilk="argument" name="self" /></scope><scope doc="Is this IPAddr in the pool?" ilk="function" line="79" lineend="83" name="__contains__" returns="bool" signature="__contains__(item)"><variable citdl="AddressPool" ilk="argument" name="self" /><variable ilk="argument" name="item" /></scope><scope doc="Add this IP address back into the pool" ilk="function" line="85" lineend="89" name="append" signature="append(item)"><variable citdl="AddressPool" ilk="argument" name="self" /><variable ilk="argument" name="item" /></scope><scope doc="Remove this IPAddr from the pool" ilk="function" line="91" lineend="95" name="remove" signature="remove(item)"><variable citdl="AddressPool" ilk="argument" name="self" /><variable ilk="argument" name="item" /></scope><scope doc="Returns number of IP addresses in the pool" ilk="function" line="97" lineend="101" name="__len__" returns="int" signature="__len__()"><variable citdl="AddressPool" ilk="argument" name="self" /></scope><scope doc="Get an IPAddr from the pool.&#xA;&#xA;Note that this will only be called with index = 0!" ilk="function" line="103" lineend="109" name="__getitem__" signature="__getitem__(index)"><variable citdl="AddressPool" ilk="argument" name="self" /><variable ilk="argument" name="index" /></scope></scope><scope classrefs="AddressPool" doc="Simple AddressPool for simple subnet based pools." ilk="class" line="112" lineend="222" name="SimpleAddressPool"><scope attributes="__ctor__" doc="Simple subnet-based address pool&#xA;&#xA;Allocates count IP addresses out of network/network_size, starting&#xA;with the first&apos;th.  You may specify the end of the range with either&#xA;last (to specify the last&apos;th address to use) or count to specify the&#xA;number to use.  If both are None, use up to the end of all&#xA;legal addresses.&#xA;&#xA;Example for all of 192.168.x.x/16:&#xA;  SimpleAddressPool(&quot;192.168.0.0/16&quot;, 1, 65534)" ilk="function" line="116" lineend="153" name="__init__" signature="SimpleAddressPool(network=&apos;192.168.0.0/24&apos;, first=1, last=None, count=None)"><variable citdl="SimpleAddressPool" ilk="argument" name="self" /><variable citdl="str" ilk="argument" name="network" /><variable citdl="int" ilk="argument" name="first" /><variable ilk="argument" name="last" /><variable ilk="argument" name="count" /><variable line="130" name="network_size" /></scope><variable attributes="__instancevar__" citdl="int" line="132" name="first" /><variable attributes="__instancevar__" line="133" name="network_size" /><variable attributes="__instancevar__" citdl="int" line="134" name="host_size" /><variable attributes="__instancevar__" citdl="IPAddr()" line="135" name="network" /><variable attributes="__instancevar__" citdl="int" line="138" name="last" /><variable attributes="__instancevar__" citdl="set()" line="146" name="removed" /><scope ilk="function" line="155" lineend="156" name="__repr__" returns="str()" signature="__repr__()"><variable citdl="SimpleAddressPool" ilk="argument" name="self" /></scope><scope ilk="function" line="158" lineend="161" name="__str__" returns="tuple" signature="__str__()"><variable citdl="SimpleAddressPool" ilk="argument" name="self" /><variable citdl="tuple" line="159" name="t" /></scope><variable attributes="property" citdl="IPAddr()" line="164" name="subnet_mask" /><scope attributes="__hidden__" ilk="function" line="164" lineend="165" name="subnet_mask (property getter)" returns="IPAddr()" signature="subnet_mask (property getter)()"><variable citdl="SimpleAddressPool" ilk="argument" name="self" /></scope><variable attributes="property" line="168" name="count" /><scope attributes="__hidden__" ilk="function" line="168" lineend="169" name="count (property getter)" signature="count (property getter)()"><variable citdl="SimpleAddressPool" ilk="argument" name="self" /></scope><scope ilk="function" line="171" lineend="181" name="__contains__" returns="bool" signature="__contains__(item)"><variable citdl="SimpleAddressPool" ilk="argument" name="self" /><variable citdl="IPAddr()" ilk="argument" name="item" /><variable citdl="item.toUnsigned()" line="174" name="n" /><variable citdl="int" line="175" name="mask" /><variable citdl="int" line="176" name="nm" /></scope><scope ilk="function" line="183" lineend="190" name="append" signature="append(item)"><variable citdl="SimpleAddressPool" ilk="argument" name="self" /><variable citdl="IPAddr()" ilk="argument" name="item" /></scope><scope ilk="function" line="192" lineend="196" name="remove" signature="remove(item)"><variable citdl="SimpleAddressPool" ilk="argument" name="self" /><variable citdl="IPAddr()" ilk="argument" name="item" /></scope><scope ilk="function" line="198" lineend="199" name="__len__" returns="len()" signature="__len__()"><variable citdl="SimpleAddressPool" ilk="argument" name="self" /></scope><scope ilk="function" line="201" lineend="222" name="__getitem__" returns="IPAddr()" signature="__getitem__(index)"><variable citdl="SimpleAddressPool" ilk="argument" name="self" /><variable ilk="argument" name="index" /><variable citdl="int" line="206" name="c" /><variable citdl="IPAddr()" line="216" name="addr" /></scope></scope><scope classrefs="EventMixin" ilk="class" line="225" lineend="459" name="DHCPD"><variable attributes="protected" citdl="set()" line="226" name="_eventMixin_events" /><scope attributes="__ctor__" ilk="function" line="228" lineend="265" name="__init__" signature="DHCPD(ip_address=&apos;192.168.0.254&apos;, router_address=(), dns_address=(), pool=None, subnet=None, install_flow=True)"><variable citdl="DHCPD" ilk="argument" name="self" /><variable citdl="str" ilk="argument" name="ip_address" /><variable citdl="tuple" ilk="argument" name="router_address" /><variable citdl="tuple" ilk="argument" name="dns_address" /><variable ilk="argument" name="pool" /><variable ilk="argument" name="subnet" /><variable citdl="True" ilk="argument" name="install_flow" /><scope ilk="function" line="232" lineend="235" name="fix_addr" returns="IPAddr()" signature="fix_addr(addr, backup)"><variable ilk="argument" name="addr" /><variable ilk="argument" name="backup" /></scope></scope><variable attributes="protected __instancevar__" citdl="True" line="237" name="_install_flow" /><variable attributes="__instancevar__" citdl="IPAddr()" line="239" name="ip_addr" /><variable attributes="__instancevar__" citdl="__init__.fix_addr()" line="240" name="router_addr" /><variable attributes="__instancevar__" citdl="__init__.fix_addr()" line="241" name="dns_addr" /><variable attributes="__instancevar__" citdl="list" line="244" name="pool" /><variable attributes="__instancevar__" citdl="pool.subnet_mask" line="245" name="subnet" /><variable attributes="__instancevar__" citdl="int" line="255" name="lease_time" /><variable attributes="__instancevar__" citdl="dict" line="258" name="offers" /><variable attributes="__instancevar__" citdl="dict" line="259" name="leases" /><scope attributes="protected" ilk="function" line="267" lineend="278" name="_handle_ConnectionUp" signature="_handle_ConnectionUp(event)"><variable citdl="DHCPD" ilk="argument" name="self" /><variable ilk="argument" name="event" /><variable citdl="of.ofp_flow_mod()" line="269" name="msg" /></scope><scope attributes="protected" ilk="function" line="280" lineend="317" name="_handle_PacketIn" signature="_handle_PacketIn(event)"><variable citdl="DHCPD" ilk="argument" name="self" /><variable ilk="argument" name="event" /><variable citdl="event.parsed.find()" line="282" name="ipp" /><variable citdl="ipp.payload" line="287" name="nwp" /><variable citdl="nwp.payload" line="294" name="p" /><variable citdl="p.options.get()" line="308" name="t" /></scope><scope ilk="function" line="319" lineend="345" name="reply" signature="reply(event, msg)"><variable citdl="DHCPD" ilk="argument" name="self" /><variable ilk="argument" name="event" /><variable ilk="argument" name="msg" /><variable citdl="event.parsed.find()" line="320" name="orig" /><variable citdl="bool" line="321" name="broadcast" /><variable citdl="pkt.ethernet()" line="329" name="ethp" /><variable citdl="pkt.ipv4()" line="331" name="ipp" /><variable citdl="pkt.udp()" line="337" name="udpp" /><variable citdl="of.ofp_packet_out()" line="343" name="po" /></scope><scope ilk="function" line="347" lineend="352" name="nak" signature="nak(event, msg=None)"><variable citdl="DHCPD" ilk="argument" name="self" /><variable ilk="argument" name="event" /><variable citdl="pkt.dhcp()" ilk="argument" name="msg" /></scope><scope ilk="function" line="354" lineend="364" name="exec_release" signature="exec_release(event, p)"><variable citdl="DHCPD" ilk="argument" name="self" /><variable ilk="argument" name="event" /><variable ilk="argument" name="p" /><variable citdl="event.parsed.src" line="355" name="src" /></scope><scope ilk="function" line="366" lineend="414" name="exec_request" signature="exec_request(event, p)"><variable citdl="DHCPD" ilk="argument" name="self" /><variable ilk="argument" name="event" /><variable ilk="argument" name="p" /><variable line="370" name="wanted_ip" /><variable citdl="event.parsed.src" line="371" name="src" /><variable line="372" name="got_ip" /><variable citdl="DHCPLease" line="397" name="ev" /><variable citdl="pkt.dhcp()" line="404" name="reply" /><variable citdl="set()" line="409" name="wanted_opts" /></scope><scope ilk="function" line="416" lineend="447" name="exec_discover" signature="exec_discover(event, p)"><variable citdl="DHCPD" ilk="argument" name="self" /><variable ilk="argument" name="event" /><variable ilk="argument" name="p" /><variable citdl="pkt.dhcp()" line="417" name="reply" /><variable citdl="event.parsed.src" line="419" name="src" /><variable citdl="self.offers.get()" line="421" name="offer" /><variable line="434" name="wanted_ip" /><variable citdl="set()" line="442" name="wanted_opts" /></scope><scope doc="Fill out some options in msg" ilk="function" line="449" lineend="459" name="fill" signature="fill(wanted_opts, msg)"><variable citdl="DHCPD" ilk="argument" name="self" /><variable ilk="argument" name="wanted_opts" /><variable ilk="argument" name="msg" /></scope></scope><scope doc="Launch DHCP server defaulting to 192.168.0.100-199" ilk="function" line="462" lineend="471" name="default" signature="default(no_flow=False, network=&apos;192.168.0.0/24&apos;, first=100, last=199, count=None, ip=&apos;192.168.0.254&apos;, router=(), dns=())"><variable citdl="False" ilk="argument" name="no_flow" /><variable citdl="str" ilk="argument" name="network" /><variable citdl="int" ilk="argument" name="first" /><variable citdl="int" ilk="argument" name="last" /><variable ilk="argument" name="count" /><variable citdl="str" ilk="argument" name="ip" /><variable citdl="tuple" ilk="argument" name="router" /><variable citdl="tuple" ilk="argument" name="dns" /></scope><scope doc="Launch DHCP server&#xA;&#xA;Defaults to serving 192.168.0.1 to 192.168.0.253&#xA;&#xA;network  Subnet to allocate addresses from&#xA;first    First&apos;th address in subnet to use (256 is x.x.1.0 in a /16)&#xA;last     Last&apos;th address in subnet to use&#xA;count    Alternate way to specify last address to use&#xA;ip       IP to use for DHCP server&#xA;router   Router IP to tell clients. Defaults to &apos;ip&apos;. &apos;None&apos; will&#xA;         stop the server from telling clients anything&#xA;dns      DNS IP to tell clients.  Defaults to &apos;router&apos;.  &apos;None&apos; will&#xA;         stop the server from telling clients anything." ilk="function" line="474" lineend="516" name="launch" signature="launch(no_flow=False, network=&apos;192.168.0.0/24&apos;, first=1, last=None, count=None, ip=&apos;192.168.0.254&apos;, router=(), dns=())"><variable citdl="False" ilk="argument" name="no_flow" /><variable citdl="str" ilk="argument" name="network" /><variable citdl="int" ilk="argument" name="first" /><variable ilk="argument" name="last" /><variable ilk="argument" name="count" /><variable citdl="str" ilk="argument" name="ip" /><variable citdl="tuple" ilk="argument" name="router" /><variable citdl="tuple" ilk="argument" name="dns" /><scope ilk="function" line="495" lineend="499" name="fixint" returns="int()" signature="fixint(i)"><variable citdl="str()" ilk="argument" name="i" /></scope><scope ilk="function" line="500" lineend="505" name="fix" returns="tuple" signature="fix(i)"><variable citdl="str()" ilk="argument" name="i" /></scope><variable citdl="SimpleAddressPool" line="509" name="pool" /></scope></scope>