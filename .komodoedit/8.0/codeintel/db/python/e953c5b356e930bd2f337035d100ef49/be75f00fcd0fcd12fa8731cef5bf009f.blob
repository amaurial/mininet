<scope doc="datetime.tzinfo timezone definitions generated from the&#xA;Olson timezone database:" ilk="blob" lang="Python" name="__init__" src="/usr/lib/python2.7/dist-packages/pytz/__init__.py"><import line="28" module="sys" /><import line="28" module="datetime" /><import line="28" module="os.path" /><import line="28" module="gettext" /><import line="30" module="UserDict" symbol="DictMixin" /><import alias="DictMixin" line="32" module="collections" symbol="Mapping" /><import line="34" module="pytz.exceptions" symbol="AmbiguousTimeError" /><import line="35" module="pytz.exceptions" symbol="InvalidTimeError" /><import line="36" module="pytz.exceptions" symbol="NonExistentTimeError" /><import line="37" module="pytz.exceptions" symbol="UnknownTimeZoneError" /><import line="38" module="pytz.tzinfo" symbol="unpickler" /><import line="39" module="pytz.tzfile" symbol="build_tzinfo" /><import line="39" module="pytz.tzfile" symbol="_byte_string" /><variable citdl="str" line="12" name="OLSON_VERSION" /><variable citdl="str" line="13" name="VERSION" /><variable citdl="str" line="16" name="__version__" /><variable citdl="str" line="18" name="OLSEN_VERSION" /><variable citdl="list" line="20" name="__all__" /><variable citdl="str" line="49" name="unicode" /><scope doc="&gt;&gt;&gt; ascii(&apos;Hello&apos;)&#xA;&apos;Hello&apos;&#xA;&gt;&gt;&gt; ascii(u&apos;Hello&apos;)&#xA;&apos;Hello&apos;&#xA;&gt;&gt;&gt; ascii(u&apos;\N{TRADE MARK SIGN}&apos;) #doctest: +IGNORE_EXCEPTION_DETAIL&#xA;Traceback (most recent call last):&#xA;    ...&#xA;UnicodeEncodeError: ..." ilk="function" line="65" lineend="76" name="ascii" returns="s.encode()" signature="ascii(s)"><variable ilk="argument" name="s" /></scope><scope doc="Open a resource from the zoneinfo subdir for reading.&#xA;&#xA;Uses the pkg_resources module if available and no standard file&#xA;found at the calculated location." ilk="function" line="79" lineend="91" name="open_resource" returns="open()" signature="open_resource(name)"><variable ilk="argument" name="name" /><variable line="86" name="name_parts" /><variable citdl="os.path.join()" line="90" name="filename" /></scope><scope doc="Return true if the given resource exists" ilk="function" line="94" lineend="100" name="resource_exists" returns="bool" signature="resource_exists(name)"><variable ilk="argument" name="name" /></scope><variable attributes="protected" citdl="dict" line="118" name="_tzinfo_cache" /><scope doc="Return a datetime.tzinfo implementation for the given timezone &#xA;&#xA;   &gt;&gt;&gt; from datetime import datetime, timedelta&#xA;   &gt;&gt;&gt; utc = timezone(&apos;UTC&apos;)&#xA;   &gt;&gt;&gt; eastern = timezone(&apos;US/Eastern&apos;)&#xA;   &gt;&gt;&gt; eastern.zone&#xA;   &apos;US/Eastern&apos;&#xA;   &gt;&gt;&gt; timezone(unicode(&apos;US/Eastern&apos;)) is eastern&#xA;   True&#xA;   &gt;&gt;&gt; utc_dt = datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc)&#xA;   &gt;&gt;&gt; loc_dt = utc_dt.astimezone(eastern)&#xA;   &gt;&gt;&gt; fmt = &apos;%Y-%m-%d %H:%M:%S %Z (%z)&apos;&#xA;   &gt;&gt;&gt; loc_dt.strftime(fmt)&#xA;   &apos;2002-10-27 01:00:00 EST (-0500)&apos;&#xA;   &gt;&gt;&gt; (loc_dt - timedelta(minutes=10)).strftime(fmt)&#xA;   &apos;2002-10-27 00:50:00 EST (-0500)&apos;&#xA;   &gt;&gt;&gt; eastern.normalize(loc_dt - timedelta(minutes=10)).strftime(fmt)&#xA;   &apos;2002-10-27 01:50:00 EDT (-0400)&apos;&#xA;   &gt;&gt;&gt; (loc_dt + timedelta(minutes=10)).strftime(fmt)&#xA;   &apos;2002-10-27 01:10:00 EST (-0500)&apos;&#xA;&#xA;   Raises UnknownTimeZoneError if passed an unknown zone.&#xA;&#xA;   &gt;&gt;&gt; try:&#xA;   ...     timezone(&apos;Asia/Shangri-La&apos;)&#xA;   ... except UnknownTimeZoneError:&#xA;   ...     print(&apos;Unknown&apos;)&#xA;   Unknown&#xA;&#xA;   &gt;&gt;&gt; try:&#xA;   ...     timezone(unicode(&apos;\N{TRADE MARK SIGN}&apos;))&#xA;   ... except UnknownTimeZoneError:&#xA;   ...     print(&apos;Unknown&apos;)&#xA;   Unknown&#xA;&#xA;   " ilk="function" line="120" lineend="177" name="timezone" returns="utc" signature="timezone(zone)"><variable citdl="_unmunge_zone()" ilk="argument" name="zone" /><variable citdl="open_resource()" line="169" name="fp" /></scope><scope attributes="protected" doc="Undo the time zone name munging done by older versions of pytz." ilk="function" line="180" lineend="182" name="_unmunge_zone" signature="_unmunge_zone(zone)"><variable ilk="argument" name="zone" /></scope><variable citdl="datetime.timedelta()" line="185" name="ZERO" /><variable citdl="datetime.timedelta()" line="186" name="HOUR" /><variable citdl="UTC" doc="UTC&#xA;&#xA;Identical to the reference UTC implementation given in Python docs except&#xA;that it unpickles using the single module global instance defined beneath&#xA;this class declaration.&#xA;&#xA;Also contains extra attributes and methods to match other pytz tzinfo&#xA;instances." line="189" name="UTC" /><scope attributes="protected" doc="Factory function for utc unpickling.&#xA;&#xA;Makes sure that unpickling a utc instance always returns the same &#xA;module global.&#xA;&#xA;These examples belong in the UTC class above, but it is obscured; or in&#xA;the README.txt, but we are not depending on Python 2.4 so integrating&#xA;the README.txt examples with the unit tests is not trivial.&#xA;&#xA;&gt;&gt;&gt; import datetime, pickle&#xA;&gt;&gt;&gt; dt = datetime.datetime(2005, 3, 1, 14, 13, 21, tzinfo=utc)&#xA;&gt;&gt;&gt; naive = dt.replace(tzinfo=None)&#xA;&gt;&gt;&gt; p = pickle.dumps(dt, 1)&#xA;&gt;&gt;&gt; naive_p = pickle.dumps(naive, 1)&#xA;&gt;&gt;&gt; len(p) - len(naive_p)&#xA;17&#xA;&gt;&gt;&gt; new = pickle.loads(p)&#xA;&gt;&gt;&gt; new == dt&#xA;True&#xA;&gt;&gt;&gt; new is dt&#xA;False&#xA;&gt;&gt;&gt; new.tzinfo is dt.tzinfo&#xA;True&#xA;&gt;&gt;&gt; utc is UTC is timezone(&apos;UTC&apos;)&#xA;True&#xA;&gt;&gt;&gt; utc is timezone(&apos;GMT&apos;)&#xA;False" ilk="function" line="239" lineend="268" name="_UTC" returns="utc" signature="_UTC()"><variable citdl="True" line="269" name="__safe_for_unpickling__" /></scope><scope attributes="protected" doc="Factory function for unpickling pytz tzinfo instances.&#xA;&#xA;Just a wrapper around tzinfo.unpickler to save a few bytes in each pickle&#xA;by shortening the path." ilk="function" line="272" lineend="278" name="_p" returns="unpickler()" signature="_p(*args)"><variable attributes="varargs" ilk="argument" name="args" /><variable citdl="True" line="279" name="__safe_for_unpickling__" /></scope><scope attributes="protected" classrefs="DictMixin" doc="Dictionary populated on first use." ilk="class" line="282" lineend="308" name="_LazyDict"><variable line="284" name="data" /><scope ilk="function" line="285" lineend="288" name="__getitem__" signature="__getitem__(key)"><variable citdl="_LazyDict" ilk="argument" name="self" /><variable ilk="argument" name="key" /></scope><scope ilk="function" line="290" lineend="293" name="__contains__" returns="bool" signature="__contains__(key)"><variable citdl="_LazyDict" ilk="argument" name="self" /><variable ilk="argument" name="key" /></scope><scope ilk="function" line="295" lineend="298" name="__iter__" returns="iter()" signature="__iter__()"><variable citdl="_LazyDict" ilk="argument" name="self" /></scope><scope ilk="function" line="300" lineend="303" name="__len__" returns="len()" signature="__len__()"><variable citdl="_LazyDict" ilk="argument" name="self" /></scope><scope ilk="function" line="305" lineend="308" name="keys" returns="self.data.keys()" signature="keys()"><variable citdl="_LazyDict" ilk="argument" name="self" /></scope></scope><scope attributes="protected" classrefs="_LazyDict" doc="Map ISO 3166 country code to a list of timezone names commonly used&#xA;in that country.&#xA;&#xA;iso3166_code is the two letter code used to identify the country.&#xA;&#xA;&gt;&gt;&gt; def print_list(list_of_strings):&#xA;...     &apos;We use a helper so doctests work under Python 2.3 -&gt; 3.x&apos;&#xA;...     for s in list_of_strings:&#xA;...         print(s)&#xA;&#xA;&gt;&gt;&gt; print_list(country_timezones[&apos;nz&apos;])&#xA;Pacific/Auckland&#xA;Pacific/Chatham&#xA;&gt;&gt;&gt; print_list(country_timezones[&apos;ch&apos;])&#xA;Europe/Zurich&#xA;&gt;&gt;&gt; print_list(country_timezones[&apos;CH&apos;])&#xA;Europe/Zurich&#xA;&gt;&gt;&gt; print_list(country_timezones[unicode(&apos;ch&apos;)])&#xA;Europe/Zurich&#xA;&gt;&gt;&gt; print_list(country_timezones[&apos;XXX&apos;])&#xA;Traceback (most recent call last):&#xA;...&#xA;KeyError: &apos;XXX&apos;&#xA;&#xA;Previously, this information was exposed as a function rather than a&#xA;dictionary. This is still supported::&#xA;&#xA;&gt;&gt;&gt; print_list(country_timezones(&apos;nz&apos;))&#xA;Pacific/Auckland&#xA;Pacific/Chatham" ilk="class" line="311" lineend="364" name="_CountryTimezoneDict"><scope doc="Backwards compatibility." ilk="function" line="343" lineend="345" name="__call__" signature="__call__(iso3166_code)"><variable citdl="_CountryTimezoneDict" ilk="argument" name="self" /><variable ilk="argument" name="iso3166_code" /></scope><scope attributes="protected" ilk="function" line="347" lineend="364" name="_fill" signature="_fill()"><variable citdl="_CountryTimezoneDict" ilk="argument" name="self" /><variable citdl="dict" line="348" name="data" /><variable citdl="open_resource()" line="349" name="zone_tab" /><variable citdl="line.decode()" line="352" name="line" /></scope><variable attributes="__instancevar__" citdl="dict" line="362" name="data" /></scope><variable citdl="_CountryTimezoneDict" line="366" name="country_timezones" /><scope attributes="protected" classrefs="_LazyDict" doc="Dictionary proving ISO3166 code -&gt; English name.&#xA;&#xA;&gt;&gt;&gt; print(country_names[&apos;au&apos;])&#xA;Australia" ilk="class" line="369" lineend="387" name="_CountryNameDict"><scope attributes="protected" ilk="function" line="375" lineend="387" name="_fill" signature="_fill()"><variable citdl="_CountryNameDict" ilk="argument" name="self" /><variable citdl="dict" line="376" name="data" /><variable citdl="open_resource()" line="377" name="zone_tab" /><variable citdl="line.decode()" line="380" name="line" /><variable line="383" name="code" /><variable line="383" name="name" /></scope><variable attributes="__instancevar__" citdl="dict" line="385" name="data" /></scope><variable citdl="_CountryNameDict" line="389" name="country_names" /><scope attributes="protected" classrefs="datetime.tzinfo" ilk="class" line="394" lineend="429" name="_FixedOffset"><variable line="396" name="zone" /><scope attributes="__ctor__" ilk="function" line="398" lineend="402" name="__init__" signature="_FixedOffset(minutes)"><variable citdl="_FixedOffset" ilk="argument" name="self" /><variable ilk="argument" name="minutes" /></scope><variable attributes="protected __instancevar__" line="401" name="_minutes" /><variable attributes="protected __instancevar__" citdl="datetime.timedelta()" line="402" name="_offset" /><scope ilk="function" line="404" lineend="405" name="utcoffset" returns="datetime.timedelta()" signature="utcoffset(dt)"><variable citdl="_FixedOffset" ilk="argument" name="self" /><variable ilk="argument" name="dt" /></scope><scope ilk="function" line="407" lineend="408" name="__reduce__" returns="tuple" signature="__reduce__()"><variable citdl="_FixedOffset" ilk="argument" name="self" /></scope><scope ilk="function" line="410" lineend="411" name="dst" returns="datetime.timedelta()" signature="dst(dt)"><variable citdl="_FixedOffset" ilk="argument" name="self" /><variable ilk="argument" name="dt" /></scope><scope ilk="function" line="413" lineend="414" name="tzname" signature="tzname(dt)"><variable citdl="_FixedOffset" ilk="argument" name="self" /><variable ilk="argument" name="dt" /></scope><scope ilk="function" line="416" lineend="417" name="__repr__" returns="str" signature="__repr__()"><variable citdl="_FixedOffset" ilk="argument" name="self" /></scope><scope doc="Convert naive time to local time" ilk="function" line="419" lineend="423" name="localize" returns="dt.replace()" signature="localize(dt, is_dst=False)"><variable citdl="_FixedOffset" ilk="argument" name="self" /><variable ilk="argument" name="dt" /><variable citdl="False" ilk="argument" name="is_dst" /></scope><scope doc="Correct the timezone information on the given datetime" ilk="function" line="425" lineend="429" name="normalize" returns="dt.replace()" signature="normalize(dt, is_dst=False)"><variable citdl="_FixedOffset" ilk="argument" name="self" /><variable ilk="argument" name="dt" /><variable citdl="False" ilk="argument" name="is_dst" /></scope></scope><scope doc="return a fixed-offset timezone based off a number of minutes.&#xA;&#xA;    &gt;&gt;&gt; one = FixedOffset(-330)&#xA;    &gt;&gt;&gt; one&#xA;    pytz.FixedOffset(-330)&#xA;    &gt;&gt;&gt; one.utcoffset(datetime.datetime.now())&#xA;    datetime.timedelta(-1, 66600)&#xA;    &gt;&gt;&gt; one.dst(datetime.datetime.now())&#xA;    datetime.timedelta(0)&#xA;&#xA;    &gt;&gt;&gt; two = FixedOffset(1380)&#xA;    &gt;&gt;&gt; two&#xA;    pytz.FixedOffset(1380)&#xA;    &gt;&gt;&gt; two.utcoffset(datetime.datetime.now())&#xA;    datetime.timedelta(0, 82800)&#xA;    &gt;&gt;&gt; two.dst(datetime.datetime.now())&#xA;    datetime.timedelta(0)&#xA;&#xA;The datetime.timedelta must be between the range of -1 and 1 day,&#xA;non-inclusive.&#xA;&#xA;    &gt;&gt;&gt; FixedOffset(1440)&#xA;    Traceback (most recent call last):&#xA;    ...&#xA;    ValueError: (&apos;absolute offset is too large&apos;, 1440)&#xA;&#xA;    &gt;&gt;&gt; FixedOffset(-1440)&#xA;    Traceback (most recent call last):&#xA;    ...&#xA;    ValueError: (&apos;absolute offset is too large&apos;, -1440)&#xA;&#xA;An offset of 0 is special-cased to return UTC.&#xA;&#xA;    &gt;&gt;&gt; FixedOffset(0) is UTC&#xA;    True&#xA;&#xA;There should always be only one instance of a FixedOffset per timedelta.&#xA;This should be true for multiple creation calls.&#xA;&#xA;    &gt;&gt;&gt; FixedOffset(-330) is one&#xA;    True&#xA;    &gt;&gt;&gt; FixedOffset(1380) is two&#xA;    True&#xA;&#xA;It should also be true for pickling.&#xA;&#xA;    &gt;&gt;&gt; import pickle&#xA;    &gt;&gt;&gt; pickle.loads(pickle.dumps(one)) is one&#xA;    True&#xA;    &gt;&gt;&gt; pickle.loads(pickle.dumps(two)) is two&#xA;    True" ilk="function" line="432" lineend="496" name="FixedOffset" returns="_tzinfos.get()" signature="FixedOffset(offset, _tzinfos={})"><variable ilk="argument" name="offset" /><variable citdl="dict" ilk="argument" name="_tzinfos" /><variable citdl="_tzinfos.get()" line="488" name="info" /><variable citdl="True" line="498" name="__safe_for_unpickling__" /></scope><scope attributes="protected" ilk="function" line="501" lineend="505" name="_test" returns="doctest.testmod()" signature="_test()"><import line="502" module="doctest" /><import line="502" module="os" /><import line="502" module="sys" /><import line="504" module="pytz" /></scope><variable citdl="list" line="510" name="all_timezones" /><variable citdl="set()" line="1086" name="all_timezones_set" /><variable citdl="list" line="1087" name="common_timezones" /><variable citdl="set()" line="1518" name="common_timezones_set" /></scope>