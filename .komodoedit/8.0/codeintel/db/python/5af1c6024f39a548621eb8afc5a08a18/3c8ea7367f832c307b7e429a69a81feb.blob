<scope ilk="blob" lang="Python" name="socketcapture" src="/home/mininet/new_pox/pox/pox/lib/socketcapture.py"><import line="18" module="pox.lib.addresses" symbol="*" /><import alias="pkt" line="19" module="pox.lib.packet" /><import line="21" module="struct" symbol="pack" /><import line="22" module="time" /><import line="24" module="struct" symbol="pack" /><import line="25" module="time" /><import line="185" module="socket" /><import line="191" module="sys" /><import line="192" module="time" /><import line="193" module="random" /><scope classrefs="object" ilk="class" line="27" lineend="42" name="SocketWedge"><scope attributes="__ctor__" ilk="function" line="28" lineend="29" name="__init__" signature="SocketWedge(socket)"><variable citdl="SocketWedge" ilk="argument" name="self" /><variable ilk="argument" name="socket" /></scope><variable attributes="protected __instancevar__" line="29" name="_socket" /><scope ilk="function" line="31" lineend="34" name="send" returns="self._socket.send()" signature="send(string, *args, **kw)"><variable citdl="SocketWedge" ilk="argument" name="self" /><variable ilk="argument" name="string" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kw" /><variable citdl="self._socket.send()" line="32" name="r" /></scope><scope ilk="function" line="36" lineend="39" name="recv" returns="self._socket.recv()" signature="recv(bufsize, *args, **kw)"><variable citdl="SocketWedge" ilk="argument" name="self" /><variable ilk="argument" name="bufsize" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kw" /><variable citdl="self._socket.recv()" line="37" name="r" /></scope><scope ilk="function" line="41" lineend="42" name="__getattr__" returns="getattr()" signature="__getattr__(n)"><variable citdl="SocketWedge" ilk="argument" name="self" /><variable ilk="argument" name="n" /></scope></scope><scope classrefs="object" ilk="class" line="45" lineend="134" name="PCapWriter"><scope attributes="__ctor__" doc="outstream is the stream to write the PCAP trace to.&#xA;Ethernet addresses have to be faked, and it can be convenient to&#xA;fake IP and TCP addresses as well.  Thus, you can specify local_addrs&#xA;or remote_addrs.  These are tuples of (EthAddr, IPAddr, TCPPort).&#xA;Any item that is None gets a default value." ilk="function" line="46" lineend="109" name="__init__" signature="PCapWriter(outstream, socket=None, flush=False, local_addrs=(None, None, None), remote_addrs=(None, None, None))"><variable citdl="PCapWriter" ilk="argument" name="self" /><variable ilk="argument" name="outstream" /><variable ilk="argument" name="socket" /><variable citdl="False" ilk="argument" name="flush" /><variable citdl="tuple" ilk="argument" name="local_addrs" /><variable citdl="tuple" ilk="argument" name="remote_addrs" /><variable citdl="socket.getpeername()" line="60" name="remote" /><variable citdl="socket.getsockname()" line="61" name="local" /><scope ilk="function" line="66" lineend="83" name="create_packet" returns="pkt.ethernet()" signature="create_packet(e1, e2, i1, i2, t1, t2)"><variable ilk="argument" name="e1" /><variable ilk="argument" name="e2" /><variable ilk="argument" name="i1" /><variable ilk="argument" name="i2" /><variable ilk="argument" name="t1" /><variable ilk="argument" name="t2" /><variable citdl="pkt.ethernet()" line="67" name="e" /><variable citdl="pkt.ipv4()" line="71" name="i" /><variable citdl="pkt.tcp()" line="75" name="t" /></scope></scope><variable attributes="protected __instancevar__" line="56" name="_out" /><variable attributes="protected __instancevar__" citdl="False" line="57" name="_flush" /><variable attributes="protected __instancevar__" citdl="__init__.create_packet()" line="85" name="_c_to_s" /><variable attributes="protected __instancevar__" citdl="__init__.create_packet()" line="94" name="_s_to_c" /><scope ilk="function" line="112" lineend="134" name="write" signature="write(outgoing, buf)"><variable citdl="PCapWriter" ilk="argument" name="self" /><variable ilk="argument" name="outgoing" /><variable citdl="e.pack()" ilk="argument" name="buf" /><variable line="114" name="e" /><variable line="115" name="e2" /><variable citdl="len()" line="116" name="l" /><variable citdl="int()" line="120" name="t" /><variable citdl="int()" line="121" name="ut" /></scope></scope><scope classrefs="SocketWedge" doc="Wraps a TCP socket and writes a faked PCAP format trace" ilk="class" line="137" lineend="177" name="CaptureSocket"><scope attributes="__ctor__" doc="socket is the socket to be wrapped.&#xA;outstream is the stream to write the PCAP trace to.&#xA;Ethernet addresses have to be faked, and it can be convenient to&#xA;fake IP and TCP addresses as well.  Thus, you can specify local_addrs&#xA;or remote_addrs.  These are tuples of (EthAddr, IPAddr, TCPPort).&#xA;Any item that is None gets a default value." ilk="function" line="141" lineend="156" name="__init__" signature="CaptureSocket(socket, outstream, close=True, local_addrs=(None, None, None), remote_addrs=(None, None, None))"><variable citdl="CaptureSocket" ilk="argument" name="self" /><variable ilk="argument" name="socket" /><variable ilk="argument" name="outstream" /><variable citdl="True" ilk="argument" name="close" /><variable citdl="tuple" ilk="argument" name="local_addrs" /><variable citdl="tuple" ilk="argument" name="remote_addrs" /></scope><variable attributes="protected __instancevar__" citdl="True" line="153" name="_close" /><variable attributes="protected __instancevar__" citdl="PCapWriter" line="154" name="_writer" /><scope attributes="protected" ilk="function" line="159" lineend="163" name="_recv_out" signature="_recv_out(buf)"><variable citdl="CaptureSocket" ilk="argument" name="self" /><variable ilk="argument" name="buf" /></scope><scope attributes="protected" ilk="function" line="165" lineend="169" name="_send_out" signature="_send_out(buf, r)"><variable citdl="CaptureSocket" ilk="argument" name="self" /><variable ilk="argument" name="buf" /><variable ilk="argument" name="r" /></scope><scope ilk="function" line="171" lineend="177" name="close" returns="self._socket.close()" signature="close(*args, **kw)"><variable citdl="CaptureSocket" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kw" /></scope></scope><variable citdl="socket.create_connection()" line="186" name="sock" /><variable citdl="CaptureSocket" line="187" name="s" /><variable citdl="d.upper()" line="189" name="d" /></scope>