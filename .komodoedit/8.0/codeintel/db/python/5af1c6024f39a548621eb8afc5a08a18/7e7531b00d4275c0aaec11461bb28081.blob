<scope doc="This module provides a MockSocket that can be used to fake&#xA;TCP connections inside of the simulator" ilk="blob" lang="Python" name="mock_socket" src="/home/mininet/new_pox/pox/pox/lib/mock_socket.py"><scope classrefs="object" doc="A mock socket that works on a sending and a receiving message channel.&#xA;Use MockSocket.pair() to get a pair of connected MockSockets&#xA;&#xA;TODO: model failure modes" ilk="class" line="23" lineend="98" name="MockSocket"><scope attributes="__ctor__" ilk="function" line="30" lineend="32" name="__init__" signature="MockSocket(receiving, sending)"><variable citdl="MockSocket" ilk="argument" name="self" /><variable ilk="argument" name="receiving" /><variable ilk="argument" name="sending" /></scope><variable attributes="__instancevar__" line="31" name="receiving" /><variable attributes="__instancevar__" line="32" name="sending" /><scope doc="Send data out on this socket.&#xA;&#xA;Data will be available for reading at the receiving socket pair.&#xA;Note that this currently always succeeds and never blocks (unlimited&#xA;receive buffer size)" ilk="function" line="34" lineend="42" name="send" returns="self.sending.send()" signature="send(data)"><variable citdl="MockSocket" ilk="argument" name="self" /><variable ilk="argument" name="data" /></scope><scope doc="receive data on this sockect.&#xA;&#xA;If no data is available to be received, return &quot;&quot;.&#xA;Note that this is non-standard socket behavior and should be&#xA;changed to mimic either blocking on non-blocking socket semantics" ilk="function" line="44" lineend="52" name="recv" returns="self.receiving.recv()" signature="recv(max_size=None)"><variable citdl="MockSocket" ilk="argument" name="self" /><variable ilk="argument" name="max_size" /></scope><scope doc="set a handler function on_ready(socket, size) to be called when&#xA;data is available for reading at this socket" ilk="function" line="54" lineend="59" name="set_on_ready_to_recv" signature="set_on_ready_to_recv(on_ready)"><variable citdl="MockSocket" ilk="argument" name="self" /><variable ilk="argument" name="on_ready" /></scope><scope ilk="function" line="61" lineend="62" name="ready_to_recv" returns="bool" signature="ready_to_recv()"><variable citdl="MockSocket" ilk="argument" name="self" /></scope><scope ilk="function" line="64" lineend="65" name="ready_to_send" returns="self.sending.is_full()" signature="ready_to_send()"><variable citdl="MockSocket" ilk="argument" name="self" /></scope><scope doc="shutdown a socket.&#xA;Currently a no-op on this MockSocket object." ilk="function" line="67" lineend="72" name="shutdown" signature="shutdown(sig=None)"><variable citdl="MockSocket" ilk="argument" name="self" /><variable ilk="argument" name="sig" /></scope><scope doc="close a socket. Currently a no-op on this MockSocket object." ilk="function" line="75" lineend="79" name="close" signature="close()"><variable citdl="MockSocket" ilk="argument" name="self" /></scope><scope doc="return the pseudo-fileno of this Mock Socket.&#xA;Currently always returns -1." ilk="function" line="82" lineend="87" name="fileno" returns="int" signature="fileno()"><variable citdl="MockSocket" ilk="argument" name="self" /></scope><scope doc="Return a pair of connected sockets " ilk="function" line="92" lineend="98" name="pair" returns="tuple" signature="pair()"><variable citdl="MockSocket" ilk="argument" name="cls" /><variable citdl="MessageChannel()" line="94" name="a_to_b" /><variable citdl="MessageChannel()" line="95" name="b_to_a" /><variable citdl="cls()" line="96" name="a" /><variable citdl="cls()" line="97" name="b" /></scope></scope><scope classrefs="object" doc="A undirectional reliable in order byte stream message channel&#xA;(think TCP half-connection)" ilk="class" line="100" lineend="153" name="MessageChannel"><scope attributes="__ctor__" ilk="function" line="105" lineend="110" name="__init__" signature="MessageChannel()"><variable citdl="MessageChannel" ilk="argument" name="self" /></scope><variable attributes="__instancevar__" citdl="str" line="107" name="buffer" /><variable attributes="__instancevar__" line="108" name="on_data" /><variable attributes="__instancevar__" citdl="False" line="109" name="on_data_running" /><variable attributes="__instancevar__" citdl="int" line="110" name="pending_on_datas" /><scope ilk="function" line="112" lineend="115" name="send" returns="len()" signature="send(msg)"><variable citdl="MessageChannel" ilk="argument" name="self" /><variable ilk="argument" name="msg" /></scope><scope attributes="protected" ilk="function" line="117" lineend="130" name="_trigger_on_data" signature="_trigger_on_data()"><variable citdl="MessageChannel" ilk="argument" name="self" /></scope><scope doc="retrieve and return the data stored in this channel&apos;s buffer.&#xA;If buffer is empty, return &quot;&quot;" ilk="function" line="132" lineend="143" name="recv" returns="str" signature="recv(max_size=None)"><variable citdl="MessageChannel" ilk="argument" name="self" /><variable ilk="argument" name="max_size" /><variable citdl="list" line="138" name="msg" /></scope><scope ilk="function" line="145" lineend="146" name="is_empty" returns="bool" signature="is_empty()"><variable citdl="MessageChannel" ilk="argument" name="self" /></scope><scope ilk="function" line="148" lineend="150" name="is_full" returns="bool" signature="is_full()"><variable citdl="MessageChannel" ilk="argument" name="self" /></scope><scope ilk="function" line="152" lineend="153" name="__len__" returns="len()" signature="__len__()"><variable citdl="MessageChannel" ilk="argument" name="self" /></scope></scope></scope>