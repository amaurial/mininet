<scope doc="Classes for addresses of various types." ilk="blob" lang="Python" name="addresses" src="/home/mininet/new_pox/pox/pox/lib/addresses.py"><import line="22" module="__future__" symbol="print_function" /><import line="23" module="struct" /><import line="24" module="socket" /><import line="27" module="sys" /><import line="440" module="code" /><variable citdl="int" line="29" name="long" /><variable attributes="protected" citdl="dict" line="42" name="_eth_oui_to_name" /><scope attributes="protected" ilk="function" line="44" lineend="72" name="_load_oui_names" signature="_load_oui_names()"><import line="45" module="inspect" /><import line="46" module="os.path" /><import line="70" module="logging" /><variable citdl="os.path.join()" line="47" name="filename" /><variable citdl="open()" line="48" name="f" /><variable citdl="line.split()" line="56" name="split" /><variable line="60" name="oui_str" /><variable citdl="end.split()" line="62" name="end" /><variable citdl="__builtins__.str.join()" line="65" name="oui_name" /><variable citdl="int()" line="67" name="oui" /></scope><scope classrefs="object" doc="An Ethernet (MAC) address type." ilk="class" line="76" lineend="222" name="EthAddr"><scope attributes="__ctor__" doc="Understands Ethernet address is various forms.  Hex strings, raw byte&#xA;strings, etc." ilk="function" line="80" lineend="117" name="__init__" signature="EthAddr(addr)"><variable citdl="EthAddr" ilk="argument" name="self" /><variable citdl="__builtins__.str.join()" ilk="argument" name="addr" /></scope><variable attributes="protected __instancevar__" citdl="__builtins__.str.join()" line="109" name="_value" /><scope doc="Returns True if this is IEEE 802.1D MAC Bridge Filtered MAC Group Address,&#xA;01-80-C2-00-00-00 to 01-80-C2-00-00-0F. MAC frames that have a destination MAC address&#xA;within this range are not relayed by MAC bridges conforming to IEEE 802.1D" ilk="function" line="119" lineend="130" name="isBridgeFiltered" returns="bool" signature="isBridgeFiltered()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><scope attributes="__hidden__" ilk="function" line="133" lineend="134" name="is_bridge_filtered (property getter)" returns="EthAddr.isBridgeFiltered()" signature="is_bridge_filtered (property getter)()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><variable attributes="property" citdl="EthAddr.isBridgeFiltered()" line="133" name="is_bridge_filtered" /><scope doc="Returns True if this is a globally unique (OUI enforced) address." ilk="function" line="136" lineend="140" name="isGlobal" returns="bool" signature="isGlobal()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><scope doc="Returns True if this is a locally-administered (non-global) address." ilk="function" line="142" lineend="146" name="isLocal" signature="isLocal()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><scope attributes="__hidden__" ilk="function" line="149" lineend="150" name="is_local (property getter)" returns="EthAddr.isLocal()" signature="is_local (property getter)()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><variable attributes="property" citdl="EthAddr.isLocal()" line="149" name="is_local" /><variable attributes="property" citdl="EthAddr.isGlobal()" line="153" name="is_global" /><scope attributes="__hidden__" ilk="function" line="153" lineend="154" name="is_global (property getter)" returns="EthAddr.isGlobal()" signature="is_global (property getter)()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><scope doc="Returns True if this is a multicast address." ilk="function" line="156" lineend="160" name="isMulticast" signature="isMulticast()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><scope attributes="__hidden__" ilk="function" line="163" lineend="164" name="is_multicast (property getter)" returns="EthAddr.isMulticast()" signature="is_multicast (property getter)()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><variable attributes="property" citdl="EthAddr.isMulticast()" line="163" name="is_multicast" /><scope doc="Returns the address as a 6-long bytes object." ilk="function" line="166" lineend="170" name="toRaw" returns="str" signature="toRaw()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><scope doc="Returns a 6-entry long tuple where each entry is the numeric value&#xA;of the corresponding byte of the address." ilk="function" line="172" lineend="177" name="toTuple" returns="tuple()" signature="toTuple()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><scope doc="Returns the address as string consisting of 12 hex chars separated&#xA;by separator.&#xA;If resolveNames is True, it may return company names based on&#xA;the OUI. (Currently unimplemented)" ilk="function" line="179" lineend="187" name="toStr" returns="separator.join()" signature="toStr(separator=&apos;:&apos;, resolveNames=False)"><variable citdl="EthAddr" ilk="argument" name="self" /><variable citdl="str" ilk="argument" name="separator" /><variable citdl="False" ilk="argument" name="resolveNames" /></scope><scope ilk="function" line="189" lineend="190" name="__str__" returns="EthAddr.toStr()" signature="__str__()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><scope ilk="function" line="192" lineend="208" name="__cmp__" returns="other.__cmp__()" signature="__cmp__(other)"><variable citdl="EthAddr" ilk="argument" name="self" /><variable citdl="other._value" ilk="argument" name="other" /></scope><scope ilk="function" line="210" lineend="211" name="__hash__" returns="self._value.__hash__()" signature="__hash__()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><scope ilk="function" line="213" lineend="214" name="__repr__" returns="str" signature="__repr__()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><scope ilk="function" line="216" lineend="217" name="__len__" returns="int" signature="__len__()"><variable citdl="EthAddr" ilk="argument" name="self" /></scope><scope ilk="function" line="219" lineend="222" name="__setattr__" signature="__setattr__(a, v)"><variable citdl="EthAddr" ilk="argument" name="self" /><variable ilk="argument" name="a" /><variable ilk="argument" name="v" /></scope></scope><scope classrefs="object" doc="Represents an IPv4 address." ilk="class" line="225" lineend="329" name="IPAddr"><scope attributes="__ctor__" doc="Can be initialized with several formats.&#xA;       If addr is an int/long, then it is assumed to be in host byte order&#xA;       unless networkOrder = True&#xA;       Stored in network byte order as a signed int&#xA;   " ilk="function" line="229" lineend="250" name="__init__" signature="IPAddr(addr, networkOrder=False)"><variable citdl="IPAddr" ilk="argument" name="self" /><variable citdl="int" ilk="argument" name="addr" /><variable citdl="False" ilk="argument" name="networkOrder" /></scope><variable attributes="protected __instancevar__" citdl="addr._value" line="240" name="_value" /><scope doc="A shortcut " ilk="function" line="252" lineend="254" name="toSignedN" returns="self.toSigned()" signature="toSignedN()"><variable citdl="IPAddr" ilk="argument" name="self" /></scope><scope doc="A shortcut " ilk="function" line="256" lineend="258" name="toUnsignedN" returns="self.toUnsigned()" signature="toUnsignedN()"><variable citdl="IPAddr" ilk="argument" name="self" /></scope><scope doc="Return the address as a signed int " ilk="function" line="260" lineend="265" name="toSigned" returns="addr._value" signature="toSigned(networkOrder=False)"><variable citdl="IPAddr" ilk="argument" name="self" /><variable citdl="False" ilk="argument" name="networkOrder" /><variable citdl="socket.htonl()" line="264" name="v" /></scope><scope doc="Returns the address as a four-character byte string." ilk="function" line="267" lineend="271" name="toRaw" returns="struct.pack()" signature="toRaw()"><variable citdl="IPAddr" ilk="argument" name="self" /></scope><scope doc="Returns the address as an integer in either network or host (the&#xA;default) byte order." ilk="function" line="273" lineend="280" name="toUnsigned" returns="socket.htonl()" signature="toUnsigned(networkOrder=False)"><variable citdl="IPAddr" ilk="argument" name="self" /><variable citdl="False" ilk="argument" name="networkOrder" /></scope><scope doc="Return dotted quad representation " ilk="function" line="282" lineend="284" name="toStr" returns="socket.inet_ntoa()" signature="toStr()"><variable citdl="IPAddr" ilk="argument" name="self" /></scope><scope doc="Returns True if this network is in the specified network.&#xA;network is a dotted quad (with or without a CIDR or normal style&#xA;netmask, which can also be specified separately via the netmask&#xA;parameter), or it can be a tuple of (address,network-bits) like that&#xA;returned by parse_cidr()." ilk="function" line="286" lineend="303" name="inNetwork" returns="bool" signature="inNetwork(network, netmask=None)"><variable citdl="IPAddr" ilk="argument" name="self" /><variable ilk="argument" name="network" /><variable ilk="argument" name="netmask" /><variable line="297" name="b" /><variable citdl="" line="297" name="n" /></scope><scope ilk="function" line="305" lineend="306" name="__str__" returns="IPAddr.toStr()" signature="__str__()"><variable citdl="IPAddr" ilk="argument" name="self" /></scope><scope ilk="function" line="308" lineend="315" name="__cmp__" returns="other.__cmp__()" signature="__cmp__(other)"><variable citdl="IPAddr" ilk="argument" name="self" /><variable citdl="" ilk="argument" name="other" /></scope><scope ilk="function" line="317" lineend="318" name="__hash__" returns="self._value.__hash__()" signature="__hash__()"><variable citdl="IPAddr" ilk="argument" name="self" /></scope><scope ilk="function" line="320" lineend="321" name="__repr__" returns="str" signature="__repr__()"><variable citdl="IPAddr" ilk="argument" name="self" /></scope><scope ilk="function" line="323" lineend="324" name="__len__" returns="int" signature="__len__()"><variable citdl="IPAddr" ilk="argument" name="self" /></scope><scope ilk="function" line="326" lineend="329" name="__setattr__" signature="__setattr__(a, v)"><variable citdl="IPAddr" ilk="argument" name="self" /><variable ilk="argument" name="a" /><variable ilk="argument" name="v" /></scope></scope><scope doc="Takes a netmask as either an IPAddr or a string, and returns the number&#xA;of network bits.  e.g., 255.255.255.0 -&gt; 24&#xA;Raise exception if subnet mask is not CIDR-compatible." ilk="function" line="332" lineend="348" name="netmask_to_cidr" returns="int" signature="netmask_to_cidr(dq)"><variable citdl="IPAddr" ilk="argument" name="dq" /><variable citdl="int" line="340" name="v" /><variable citdl="int" line="341" name="c" /></scope><scope doc="Takes a number of network bits, and returns the corresponding netmask&#xA;as an IPAddr.  e.g., 24 -&gt; 255.255.255.0" ilk="function" line="351" lineend="358" name="cidr_to_netmask" returns="IPAddr" signature="cidr_to_netmask(bits)"><variable ilk="argument" name="bits" /><variable citdl="int" line="356" name="v" /></scope><scope doc="Takes a CIDR address or plain dotted-quad, and returns a tuple of address&#xA;and count-of-network-bits.&#xA;Can infer the network bits based on network classes if infer=True.&#xA;Can also take a string in the form &apos;address/netmask&apos;, as long as the&#xA;netmask is representable in CIDR.&#xA;&#xA;FIXME: This function is badly named." ilk="function" line="361" lineend="406" name="parse_cidr" returns="parse_cidr.check()" signature="parse_cidr(addr, infer=True, allow_host=False)"><variable citdl="addr.split()" ilk="argument" name="addr" /><variable citdl="True" ilk="argument" name="infer" /><variable citdl="False" ilk="argument" name="allow_host" /><scope ilk="function" line="371" lineend="377" name="check" returns="tuple" signature="check(r0, r1)"><variable ilk="argument" name="r0" /><variable ilk="argument" name="r1" /><variable citdl="r0.toUnsigned()" line="372" name="a" /><variable line="373" name="b" /></scope><variable citdl="int" line="383" name="b" /><variable citdl="int" line="384" name="m" /><variable citdl="int()" line="392" name="wild" /></scope><scope doc="Uses network classes to guess the number of network bits" ilk="function" line="409" lineend="430" name="infer_netmask" returns="int" signature="infer_netmask(addr)"><variable citdl="addr.toUnsigned()" ilk="argument" name="addr" /></scope><variable citdl="IPAddr" line="433" name="IP_ANY" /><variable citdl="IPAddr" line="434" name="IP_BROADCAST" /><variable citdl="IPAddr" line="441" name="a" /></scope>