<scope doc="Various utility functions" ilk="blob" lang="Python" name="util" src="/home/mininet/new_pox/pox/pox/lib/util.py"><import line="22" module="__future__" symbol="print_function" /><import line="24" module="traceback" /><import line="25" module="struct" /><import line="26" module="sys" /><import line="27" module="os" /><import line="28" module="time" /><import line="29" module="socket" /><import line="32" module="logging" /><variable citdl="logging.getLogger()" line="33" name="log" /><scope classrefs="list" ilk="class" line="36" lineend="109" name="DirtyList"><scope attributes="__ctor__" ilk="function" line="41" lineend="44" name="__init__" signature="DirtyList(*args, **kw)"><variable citdl="DirtyList" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kw" /></scope><variable attributes="__instancevar__" citdl="True" line="43" name="dirty" /><variable attributes="__instancevar__" line="44" name="callback" /><scope ilk="function" line="46" lineend="49" name="__setslice__" signature="__setslice__(k, v)"><variable citdl="DirtyList" ilk="argument" name="self" /><variable ilk="argument" name="k" /><variable ilk="argument" name="v" /></scope><scope ilk="function" line="51" lineend="54" name="__delslice__" signature="__delslice__(k)"><variable citdl="DirtyList" ilk="argument" name="self" /><variable ilk="argument" name="k" /></scope><scope ilk="function" line="56" lineend="58" name="append" signature="append(v)"><variable citdl="DirtyList" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope><scope ilk="function" line="60" lineend="62" name="extend" signature="extend(v)"><variable citdl="DirtyList" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope><scope ilk="function" line="64" lineend="66" name="insert" signature="insert(i, v)"><variable citdl="DirtyList" ilk="argument" name="self" /><variable ilk="argument" name="i" /><variable ilk="argument" name="v" /></scope><scope ilk="function" line="68" lineend="70" name="pop" signature="pop(i=-1)"><variable citdl="DirtyList" ilk="argument" name="self" /><variable citdl="int" ilk="argument" name="i" /></scope><scope ilk="function" line="72" lineend="75" name="remove" signature="remove(v)"><variable citdl="DirtyList" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope><scope ilk="function" line="77" lineend="80" name="reverse" signature="reverse()"><variable citdl="DirtyList" ilk="argument" name="self" /></scope><scope ilk="function" line="82" lineend="85" name="sort" signature="sort(*arg, **kw)"><variable citdl="DirtyList" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="arg" /><variable attributes="kwargs" ilk="argument" name="kw" /></scope><scope ilk="function" line="87" lineend="94" name="__setitem__" signature="__setitem__(k, v)"><variable citdl="DirtyList" ilk="argument" name="self" /><variable ilk="argument" name="k" /><variable ilk="argument" name="v" /></scope><scope ilk="function" line="96" lineend="102" name="__delitem__" signature="__delitem__(k)"><variable citdl="DirtyList" ilk="argument" name="self" /><variable ilk="argument" name="k" /></scope><scope attributes="protected" ilk="function" line="104" lineend="109" name="_smudge" signature="_smudge(reason, k, v)"><variable citdl="DirtyList" ilk="argument" name="self" /><variable ilk="argument" name="reason" /><variable ilk="argument" name="k" /><variable ilk="argument" name="v" /></scope></scope><scope classrefs="dict" doc="A dict that tracks whether values have been changed shallowly.&#xA;If you set a callback, it will be called when the value changes, and&#xA;passed three values: &quot;add&quot;/&quot;modify&quot;/&quot;delete&quot;, key, value" ilk="class" line="112" lineend="139" name="DirtyDict"><scope attributes="__ctor__" ilk="function" line="118" lineend="121" name="__init__" signature="DirtyDict(*args, **kw)"><variable citdl="DirtyDict" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kw" /></scope><variable attributes="__instancevar__" citdl="True" line="120" name="dirty" /><variable attributes="__instancevar__" line="121" name="callback" /><scope attributes="protected" ilk="function" line="123" lineend="128" name="_smudge" signature="_smudge(reason, k, v)"><variable citdl="DirtyDict" ilk="argument" name="self" /><variable ilk="argument" name="reason" /><variable ilk="argument" name="k" /><variable ilk="argument" name="v" /></scope><scope ilk="function" line="130" lineend="135" name="__setitem__" signature="__setitem__(k, v)"><variable citdl="DirtyDict" ilk="argument" name="self" /><variable ilk="argument" name="k" /><variable ilk="argument" name="v" /></scope><scope ilk="function" line="137" lineend="139" name="__delitem__" signature="__delitem__(k)"><variable citdl="DirtyDict" ilk="argument" name="self" /><variable ilk="argument" name="k" /></scope></scope><scope doc="Adds item to the list l at position index.  If index is beyond the end&#xA;of the list, it will pad the list out until it&apos;s large enough, using&#xA;emptyValue for the new entries." ilk="function" line="142" lineend="150" name="set_extend" signature="set_extend(l, index, item, emptyValue=None)"><variable ilk="argument" name="l" /><variable ilk="argument" name="index" /><variable ilk="argument" name="item" /><variable ilk="argument" name="emptyValue" /></scope><scope doc="Convert a DPID in the canonical string form into a long int." ilk="function" line="153" lineend="168" name="str_to_dpid" returns="int" signature="str_to_dpid(s)"><variable citdl="list" ilk="argument" name="s" /><variable citdl="int()" line="160" name="a" /><variable citdl="int" line="162" name="b" /></scope><variable citdl="str_to_dpid" line="169" name="strToDPID" /><scope doc="Convert a DPID from a long into into the canonical string form." ilk="function" line="172" lineend="187" name="dpid_to_str" returns="__builtins__.str.join()" signature="dpid_to_str(dpid, alwaysLong=False)"><variable citdl="struct.pack()" ilk="argument" name="dpid" /><variable citdl="False" ilk="argument" name="alwaysLong" /><variable citdl="__builtins__.str.join()" line="182" name="r" /></scope><variable citdl="dpid_to_str" line="188" name="dpidToStr" /><scope doc="Assert that a parameter is of a given type.&#xA;Raise an Assertion Error with a descriptive error msg if not.&#xA;&#xA;name: name of the parameter for error messages&#xA;obj: parameter value to be checked&#xA;types: type or list or tuple of types that is acceptable&#xA;none_ok: whether &apos;None&apos; is an ok value" ilk="function" line="191" lineend="220" name="assert_type" returns="bool" signature="assert_type(name, obj, types, none_ok=True)"><variable ilk="argument" name="name" /><variable ilk="argument" name="obj" /><variable citdl="list" ilk="argument" name="types" /><variable citdl="True" ilk="argument" name="none_ok" /><variable citdl="__builtins__.str.join()" line="213" name="allowed_types" /><variable citdl="traceback.extract_stack()" line="214" name="stack" /><variable citdl="str" line="215" name="stack_msg" /><variable citdl="str" line="217" name="type_msg" /></scope><scope doc="Inside a class&apos;s __init__, this will copy keyword arguments to fields&#xA;of the same name.  See libopenflow for an example." ilk="function" line="223" lineend="232" name="initHelper" signature="initHelper(obj, kw)"><variable ilk="argument" name="obj" /><variable ilk="argument" name="kw" /></scope><scope doc="A pinger is basically a thing to let you wake a select().&#xA;On Unix systems, this makes a pipe pair.  But on Windows, select() only&#xA;works with sockets, so it makes a pair of connected sockets." ilk="function" line="235" lineend="362" name="makePinger" returns="makePinger.PipePinger" signature="makePinger()"><import line="300" module="socket" /><import line="301" module="select" /><scope classrefs="object" ilk="class" line="242" lineend="273" name="PipePinger"><scope attributes="__ctor__" ilk="function" line="243" lineend="246" name="__init__" signature="PipePinger(pair)"><variable citdl="PipePinger" ilk="argument" name="self" /><variable ilk="argument" name="pair" /></scope><variable attributes="protected __instancevar__" line="244" name="_w" /><variable attributes="protected __instancevar__" line="245" name="_r" /><scope ilk="function" line="248" lineend="250" name="ping" signature="ping()"><variable citdl="PipePinger" ilk="argument" name="self" /></scope><scope ilk="function" line="252" lineend="253" name="fileno" signature="fileno()"><variable citdl="PipePinger" ilk="argument" name="self" /></scope><scope ilk="function" line="255" lineend="257" name="pongAll" signature="pongAll()"><variable citdl="PipePinger" ilk="argument" name="self" /></scope><scope ilk="function" line="259" lineend="260" name="pong" signature="pong()"><variable citdl="PipePinger" ilk="argument" name="self" /></scope><scope ilk="function" line="262" lineend="270" name="__del__" signature="__del__()"><variable citdl="PipePinger" ilk="argument" name="self" /></scope><scope ilk="function" line="272" lineend="273" name="__repr__" returns="tuple" signature="__repr__()"><variable citdl="PipePinger" ilk="argument" name="self" /></scope></scope><scope classrefs="object" ilk="class" line="275" lineend="289" name="SocketPinger"><scope attributes="__ctor__" ilk="function" line="276" lineend="278" name="__init__" signature="SocketPinger(pair)"><variable citdl="SocketPinger" ilk="argument" name="self" /><variable ilk="argument" name="pair" /></scope><variable attributes="protected __instancevar__" line="277" name="_w" /><variable attributes="protected __instancevar__" line="278" name="_r" /><scope ilk="function" line="279" lineend="280" name="ping" signature="ping()"><variable citdl="SocketPinger" ilk="argument" name="self" /></scope><scope ilk="function" line="281" lineend="282" name="pong" signature="pong()"><variable citdl="SocketPinger" ilk="argument" name="self" /></scope><scope ilk="function" line="283" lineend="285" name="pongAll" signature="pongAll()"><variable citdl="SocketPinger" ilk="argument" name="self" /></scope><scope ilk="function" line="286" lineend="287" name="fileno" returns="self._r.fileno()" signature="fileno()"><variable citdl="SocketPinger" ilk="argument" name="self" /></scope><scope ilk="function" line="288" lineend="289" name="__repr__" returns="tuple" signature="__repr__()"><variable citdl="SocketPinger" ilk="argument" name="self" /></scope></scope><variable citdl="str" line="297" name="localaddress" /><variable citdl="int" line="298" name="startPort" /><scope ilk="function" line="303" lineend="354" name="tryConnect" returns="tuple" signature="tryConnect()"><import line="323" module="traceback" /><variable citdl="socket.socket()" line="304" name="l" /><variable citdl="int" line="307" name="port" /><variable citdl="socket.socket()" line="318" name="r" /><variable citdl="traceback.format_exception_only()" line="324" name="ei" /><variable line="330" name="rlist" /><variable line="330" name="elist" /><variable line="330" name="wlist" /><variable line="339" name="addr" /><variable line="339" name="w" /></scope><variable citdl="tryConnect()" line="358" name="result" /></scope><scope doc="Given a string, parses out whether it is meant to be True or not" ilk="function" line="365" lineend="383" name="str_to_bool" returns="bool" signature="str_to_bool(s)"><variable citdl="list" ilk="argument" name="s" /><variable citdl="int" line="374" name="r" /><variable citdl="int()" line="378" name="i" /></scope><scope ilk="function" line="386" lineend="405" name="hexdump" returns="str" signature="hexdump(data)"><variable citdl="list" ilk="argument" name="data" /><variable citdl="str" line="389" name="o" /><scope ilk="function" line="390" lineend="391" name="chunks" signature="chunks(data, length)"><variable ilk="argument" name="data" /><variable ilk="argument" name="length" /></scope><scope ilk="function" line="392" lineend="394" name="filt" returns="str" signature="filt(c)"><variable ilk="argument" name="c" /></scope><variable citdl="list" line="399" name="l" /><variable citdl="__builtins__.str.join()" line="402" name="t" /></scope><scope doc="Connect to the given address and port. If the connection attempt fails, &#xA;exponentially back off, up to the max backoff&#xA;&#xA;return the connected socket, or raise an exception if the connection&#xA;was unsuccessful" ilk="function" line="408" lineend="434" name="connect_socket_with_backoff" returns="socket.socket()" signature="connect_socket_with_backoff(address, port, max_backoff_seconds=32)"><variable ilk="argument" name="address" /><variable ilk="argument" name="port" /><variable citdl="int" ilk="argument" name="max_backoff_seconds" /><variable citdl="int" line="416" name="backoff_seconds" /><variable citdl="socket.socket()" line="417" name="sock" /></scope><variable attributes="protected" citdl="tuple" line="437" name="_scalar_types" /><scope ilk="function" line="439" lineend="440" name="is_scalar" returns="isinstance()" signature="is_scalar(v)"><variable ilk="argument" name="v" /></scope><scope doc="Returns key/value pairs of things that seem like public fields of an object." ilk="function" line="443" lineend="465" name="fields_of" returns="dict" signature="fields_of(obj, primitives_only=False, primitives_and_composites_only=False, allow_caps=False)"><variable ilk="argument" name="obj" /><variable citdl="False" ilk="argument" name="primitives_only" /><variable citdl="False" ilk="argument" name="primitives_and_composites_only" /><variable citdl="False" ilk="argument" name="allow_caps" /><variable citdl="dict" line="450" name="r" /><variable citdl="getattr()" line="453" name="v" /></scope><scope ilk="function" line="470" lineend="470" name="cb" signature="cb(t, k, v)"><variable ilk="argument" name="t" /><variable ilk="argument" name="k" /><variable ilk="argument" name="v" /></scope><variable citdl="DirtyList" line="471" name="l" /></scope>