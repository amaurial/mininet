<scope doc="Utilities for writing code that runs on Python 2 and 3" ilk="blob" lang="Python" name="six" src="/usr/lib/python2.7/dist-packages/six.py"><import line="3" module="operator" /><import line="4" module="sys" /><import line="5" module="types" /><import line="255" module="io" /><import line="264" module="StringIO" /><import line="271" module="builtins" /><variable citdl="str" line="7" name="__author__" /><variable citdl="str" line="8" name="__version__" /><variable citdl="bool" line="12" name="PY3" /><variable citdl="tuple" line="15" name="string_types" /><variable citdl="tuple" line="16" name="integer_types" /><variable citdl="tuple" line="17" name="class_types" /><variable citdl="unicode" line="18" name="text_type" /><variable citdl="bytes" line="19" name="binary_type" /><variable citdl="int()" line="21" name="MAXSIZE" /><scope classrefs="object" ilk="class" line="30" lineend="32" name="X"><scope ilk="function" line="31" lineend="32" name="__len__" returns="int" signature="__len__()"><variable citdl="X" ilk="argument" name="self" /></scope></scope><scope attributes="protected" doc="Add documentation to a function." ilk="function" line="44" lineend="46" name="_add_doc" signature="_add_doc(func, doc)"><variable ilk="argument" name="func" /><variable ilk="argument" name="doc" /></scope><scope attributes="protected" doc="Import module, returning the module after the last dot." ilk="function" line="49" lineend="52" name="_import_module" signature="_import_module(name)"><variable ilk="argument" name="name" /></scope><scope attributes="protected" classrefs="object" ilk="class" line="55" lineend="65" name="_LazyDescr"><scope attributes="__ctor__" ilk="function" line="57" lineend="58" name="__init__" signature="_LazyDescr(name)"><variable citdl="_LazyDescr" ilk="argument" name="self" /><variable ilk="argument" name="name" /></scope><variable attributes="__instancevar__" line="58" name="name" /><scope ilk="function" line="60" lineend="65" name="__get__" returns="self._resolve()" signature="__get__(obj, tp)"><variable citdl="_LazyDescr" ilk="argument" name="self" /><variable ilk="argument" name="obj" /><variable ilk="argument" name="tp" /><variable citdl="self._resolve()" line="61" name="result" /></scope></scope><scope classrefs="_LazyDescr" ilk="class" line="68" lineend="80" name="MovedModule"><scope attributes="__ctor__" ilk="function" line="70" lineend="77" name="__init__" signature="MovedModule(name, old, new=None)"><variable citdl="MovedModule" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable ilk="argument" name="old" /><variable ilk="argument" name="new" /></scope><variable attributes="__instancevar__" line="75" name="mod" /><scope attributes="protected" ilk="function" line="79" lineend="80" name="_resolve" returns="_import_module()" signature="_resolve()"><variable citdl="MovedModule" ilk="argument" name="self" /></scope></scope><scope classrefs="_LazyDescr" ilk="class" line="83" lineend="105" name="MovedAttribute"><scope attributes="__ctor__" ilk="function" line="85" lineend="101" name="__init__" signature="MovedAttribute(name, old_mod, new_mod, old_attr=None, new_attr=None)"><variable citdl="MovedAttribute" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable ilk="argument" name="old_mod" /><variable ilk="argument" name="new_mod" /><variable ilk="argument" name="old_attr" /><variable ilk="argument" name="new_attr" /></scope><variable attributes="__instancevar__" line="90" name="mod" /><variable attributes="__instancevar__" line="96" name="attr" /><scope attributes="protected" ilk="function" line="103" lineend="105" name="_resolve" returns="getattr()" signature="_resolve()"><variable citdl="MovedAttribute" ilk="argument" name="self" /><variable citdl="_import_module()" line="104" name="module" /></scope></scope><scope attributes="protected" classrefs="types.ModuleType" doc="Lazy loading of moved objects" ilk="class" line="109" name="_MovedItems" /><variable attributes="protected" citdl="list" line="113" name="_moved_attributes" /><variable citdl="_MovedItems" line="162" name="moves" /><scope doc="Add an item to six.moves." ilk="function" line="165" lineend="167" name="add_move" signature="add_move(move)"><variable ilk="argument" name="move" /></scope><scope doc="Remove item from six.moves." ilk="function" line="170" lineend="178" name="remove_move" signature="remove_move(name)"><variable ilk="argument" name="name" /></scope><variable attributes="protected" citdl="str" line="182" name="_meth_func" /><variable attributes="protected" citdl="str" line="183" name="_meth_self" /><variable attributes="protected" citdl="str" line="185" name="_func_code" /><variable attributes="protected" citdl="str" line="186" name="_func_defaults" /><variable attributes="protected" citdl="str" line="188" name="_iterkeys" /><variable attributes="protected" citdl="str" line="189" name="_itervalues" /><variable attributes="protected" citdl="str" line="190" name="_iteritems" /><variable citdl="function" line="210" name="callable" /><scope ilk="function" line="213" lineend="214" name="get_unbound_function" returns="unbound.im_func" signature="get_unbound_function(unbound)"><variable ilk="argument" name="unbound" /></scope><scope ilk="function" line="217" lineend="218" name="advance_iterator" returns="it.next()" signature="advance_iterator(it)"><variable ilk="argument" name="it" /></scope><variable citdl="operator.attrgetter()" line="225" name="get_method_function" /><variable citdl="operator.attrgetter()" line="226" name="get_method_self" /><variable citdl="operator.attrgetter()" line="227" name="get_function_code" /><variable citdl="operator.attrgetter()" line="228" name="get_function_defaults" /><scope doc="Return an iterator over the keys of a dictionary." ilk="function" line="231" lineend="233" name="iterkeys" returns="getattr()()" signature="iterkeys(d)"><variable ilk="argument" name="d" /></scope><scope doc="Return an iterator over the values of a dictionary." ilk="function" line="235" lineend="237" name="itervalues" returns="getattr()()" signature="itervalues(d)"><variable ilk="argument" name="d" /></scope><scope doc="Return an iterator over the (key, value) pairs of a dictionary." ilk="function" line="239" lineend="241" name="iteritems" returns="getattr()()" signature="iteritems(d)"><variable ilk="argument" name="d" /></scope><variable citdl="function" line="250" name="int2byte" /><variable citdl="StringIO.StringIO" line="256" name="StringIO" /><variable citdl="io.BytesIO" line="257" name="BytesIO" /><scope ilk="function" line="259" lineend="260" name="b" signature="b(s)"><variable ilk="argument" name="s" /></scope><scope ilk="function" line="261" lineend="262" name="u" returns="unicode()" signature="u(s)"><variable ilk="argument" name="s" /></scope><scope ilk="function" line="275" lineend="278" name="reraise" signature="reraise(tp, value, tb=None)"><variable ilk="argument" name="tp" /><variable ilk="argument" name="value" /><variable ilk="argument" name="tb" /></scope><scope doc="Execute code in a namespace." ilk="function" line="285" lineend="295" name="exec_" signature="exec_(code, globs=None, locs=None)"><variable ilk="argument" name="code" /><variable citdl="frame.f_globals" ilk="argument" name="globs" /><variable citdl="frame.f_locals" ilk="argument" name="locs" /><variable citdl="sys._getframe()" line="288" name="frame" /></scope><scope doc="The new-style print function." ilk="function" line="303" lineend="346" name="print_" signature="print_(*args, **kwargs)"><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kwargs" /><variable citdl="kwargs.pop()" line="305" name="fp" /><scope ilk="function" line="308" lineend="311" name="write" signature="write(data)"><variable citdl="str()" ilk="argument" name="data" /></scope><variable citdl="True" line="312" name="want_unicode" /><variable citdl="unicode()" line="313" name="sep" /><variable citdl="unicode()" line="319" name="end" /><variable citdl="unicode()" line="333" name="newline" /><variable citdl="unicode()" line="334" name="space" /></scope><scope doc="Create a base class with a metaclass." ilk="function" line="351" lineend="353" name="with_metaclass" returns="with_metaclass.meta()" signature="with_metaclass(meta, base=object)"><variable ilk="argument" name="meta" /><variable citdl="object" ilk="argument" name="base" /></scope></scope>