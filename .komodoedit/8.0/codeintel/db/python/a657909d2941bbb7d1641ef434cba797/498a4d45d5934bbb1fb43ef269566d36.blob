<scope doc="In charge of OpenFlow 1.0 switches." ilk="blob" lang="Python" name="of_01" src="/home/mininet/new_pox/pox/pox/openflow/of_01.py"><import line="24" module="pox.core" symbol="core" /><import line="25" module="pox" /><import line="26" module="pox.lib.util" /><import line="27" module="pox.lib.revent.revent" symbol="EventMixin" /><import line="28" module="datetime" /><import line="29" module="time" /><import line="30" module="pox.lib.socketcapture" symbol="CaptureSocket" /><import line="31" module="pox.openflow.debug" /><import line="32" module="pox.openflow.util" symbol="make_type_to_unpacker_table" /><import line="33" module="pox.openflow" symbol="*" /><import line="37" module="socket" /><import line="38" module="select" /><import line="50" module="IN" /><import alias="of" line="56" module="pox.openflow.libopenflow_01" /><import line="58" module="threading" /><import line="59" module="os" /><import line="60" module="sys" /><import line="61" module="exceptions" /><import line="62" module="errno" symbol="EAGAIN" /><import line="62" module="errno" symbol="ECONNRESET" /><import line="65" module="traceback" /><import line="820" module="pox.lib.recoco.recoco" symbol="*" /><variable citdl="core.getLogger()" line="35" name="log" /><variable citdl="make_type_to_unpacker_table()" line="43" name="unpackers" /><variable citdl="int" line="46" name="PIPE_BUF" /><scope ilk="function" line="68" lineend="73" name="handle_HELLO" signature="handle_HELLO(con, msg)"><variable ilk="argument" name="con" /><variable citdl="of.ofp_features_request()" ilk="argument" name="msg" /></scope><scope ilk="function" line="75" lineend="77" name="handle_ECHO_REPLY" signature="handle_ECHO_REPLY(con, msg)"><variable ilk="argument" name="con" /><variable ilk="argument" name="msg" /></scope><scope ilk="function" line="79" lineend="83" name="handle_ECHO_REQUEST" signature="handle_ECHO_REQUEST(con, msg)"><variable ilk="argument" name="con" /><variable ilk="argument" name="msg" /><variable line="80" name="reply" /></scope><scope ilk="function" line="85" lineend="88" name="handle_FLOW_REMOVED" signature="handle_FLOW_REMOVED(con, msg)"><variable ilk="argument" name="con" /><variable ilk="argument" name="msg" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="86" name="e" /></scope><scope ilk="function" line="90" lineend="160" name="handle_FEATURES_REPLY" signature="handle_FEATURES_REPLY(con, msg)"><variable ilk="argument" name="con" /><variable ilk="argument" name="msg" /><variable citdl="bool" line="91" name="connecting" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="99" name="e" /><variable citdl="core.OpenFlowConnectionArbiter.getNexus()" line="104" name="nexus" /><variable citdl="of.ofp_barrier_request()" line="115" name="barrier" /><variable citdl="list" line="117" name="listeners" /><scope ilk="function" line="119" lineend="133" name="finish_connecting" signature="finish_connecting(event)"><variable ilk="argument" name="event" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="127" name="e" /></scope><scope ilk="function" line="136" lineend="142" name="also_finish_connecting" signature="also_finish_connecting(event)"><variable ilk="argument" name="event" /></scope></scope><scope ilk="function" line="162" lineend="166" name="handle_STATS_REPLY" signature="handle_STATS_REPLY(con, msg)"><variable ilk="argument" name="con" /><variable ilk="argument" name="msg" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="163" name="e" /></scope><scope ilk="function" line="168" lineend="175" name="handle_PORT_STATUS" signature="handle_PORT_STATUS(con, msg)"><variable ilk="argument" name="con" /><variable ilk="argument" name="msg" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="173" name="e" /></scope><scope ilk="function" line="177" lineend="180" name="handle_PACKET_IN" signature="handle_PACKET_IN(con, msg)"><variable ilk="argument" name="con" /><variable ilk="argument" name="msg" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="178" name="e" /></scope><scope ilk="function" line="182" lineend="189" name="handle_ERROR_MSG" signature="handle_ERROR_MSG(con, msg)"><variable ilk="argument" name="con" /><variable ilk="argument" name="msg" /><variable citdl="ErrorIn()" line="183" name="err" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="184" name="e" /></scope><scope ilk="function" line="191" lineend="194" name="handle_BARRIER" signature="handle_BARRIER(con, msg)"><variable ilk="argument" name="con" /><variable ilk="argument" name="msg" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="192" name="e" /></scope><scope ilk="function" line="197" lineend="201" name="handle_OFPST_DESC" signature="handle_OFPST_DESC(con, parts)"><variable ilk="argument" name="con" /><variable ilk="argument" name="parts" /><variable line="198" name="msg" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="199" name="e" /></scope><scope ilk="function" line="203" lineend="209" name="handle_OFPST_FLOW" signature="handle_OFPST_FLOW(con, parts)"><variable ilk="argument" name="con" /><variable ilk="argument" name="parts" /><variable citdl="list" line="204" name="msg" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="207" name="e" /></scope><scope ilk="function" line="211" lineend="216" name="handle_OFPST_AGGREGATE" signature="handle_OFPST_AGGREGATE(con, parts)"><variable ilk="argument" name="con" /><variable ilk="argument" name="parts" /><variable line="212" name="msg" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="213" name="e" /></scope><scope ilk="function" line="218" lineend="224" name="handle_OFPST_TABLE" signature="handle_OFPST_TABLE(con, parts)"><variable ilk="argument" name="con" /><variable ilk="argument" name="parts" /><variable citdl="list" line="219" name="msg" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="222" name="e" /></scope><scope ilk="function" line="226" lineend="232" name="handle_OFPST_PORT" signature="handle_OFPST_PORT(con, parts)"><variable ilk="argument" name="con" /><variable ilk="argument" name="parts" /><variable citdl="list" line="227" name="msg" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="230" name="e" /></scope><scope ilk="function" line="234" lineend="240" name="handle_OFPST_QUEUE" signature="handle_OFPST_QUEUE(con, parts)"><variable ilk="argument" name="con" /><variable ilk="argument" name="parts" /><variable citdl="list" line="235" name="msg" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="238" name="e" /></scope><scope ilk="function" line="242" lineend="243" name="handle_VENDOR" signature="handle_VENDOR(con, msg)"><variable ilk="argument" name="con" /><variable ilk="argument" name="msg" /></scope><variable citdl="list" line="249" name="handlers" /><variable citdl="dict" line="252" name="handlerMap" /><variable citdl="dict" line="266" name="statsHandlerMap" /><scope classrefs="threading.Thread" doc="Class that handles sending when a socket write didn&apos;t complete" ilk="class" line="277" lineend="378" name="DeferredSender"><scope attributes="__ctor__" ilk="function" line="281" lineend="290" name="__init__" signature="DeferredSender()"><variable citdl="DeferredSender" ilk="argument" name="self" /></scope><variable attributes="protected __instancevar__" citdl="dict" line="284" name="_dataForConnection" /><variable attributes="protected __instancevar__" citdl="threading.RLock()" line="285" name="_lock" /><variable attributes="protected __instancevar__" citdl="pox.lib.util.makePinger()" line="286" name="_waker" /><variable attributes="__instancevar__" citdl="True" line="287" name="daemon" /><variable attributes="__instancevar__" citdl="False" line="288" name="sending" /><scope attributes="protected" doc="Takes an array of data bytes, and slices into elements of&#xA;PIPE_BUF bytes each" ilk="function" line="292" lineend="303" name="_sliceup" returns="list" signature="_sliceup(data)"><variable citdl="DeferredSender" ilk="argument" name="self" /><variable citdl="list" ilk="argument" name="data" /><variable citdl="list" line="297" name="out" /></scope><scope ilk="function" line="305" lineend="316" name="send" signature="send(con, data)"><variable citdl="DeferredSender" ilk="argument" name="self" /><variable ilk="argument" name="con" /><variable citdl="_sliceup()" ilk="argument" name="data" /></scope><scope ilk="function" line="318" lineend="325" name="kill" signature="kill(con)"><variable citdl="DeferredSender" ilk="argument" name="self" /><variable ilk="argument" name="con" /></scope><scope ilk="function" line="327" lineend="378" name="run" signature="run()"><variable citdl="DeferredSender" ilk="argument" name="self" /><variable citdl="self._dataForConnection.keys()" line="331" name="cons" /><variable line="333" name="elist" /><variable line="333" name="rlist" /><variable line="333" name="wlist" /><variable line="348" name="alldata" /><variable line="350" name="data" /><variable citdl="con.sock.send()" line="352" name="l" /></scope></scope><variable citdl="DeferredSender" line="381" name="deferredSender" /><scope classrefs="object" ilk="class" line="383" lineend="390" name="DummyOFNexus"><scope ilk="function" line="384" lineend="385" name="raiseEventNoErrors" signature="raiseEventNoErrors(event, *args, **kw)"><variable citdl="DummyOFNexus" ilk="argument" name="self" /><variable ilk="argument" name="event" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kw" /></scope><scope ilk="function" line="386" lineend="387" name="raiseEvent" signature="raiseEvent(event, *args, **kw)"><variable citdl="DummyOFNexus" ilk="argument" name="self" /><variable ilk="argument" name="event" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kw" /></scope><scope attributes="protected" ilk="function" line="388" lineend="390" name="_disconnect" signature="_disconnect(dpid)"><variable citdl="DummyOFNexus" ilk="argument" name="self" /><variable ilk="argument" name="dpid" /></scope></scope><variable attributes="protected" citdl="DummyOFNexus" line="392" name="_dummyOFNexus" /><scope classrefs="CaptureSocket" doc="Captures OpenFlow data to a pcap file" ilk="class" line="416" lineend="463" name="OFCaptureSocket"><scope attributes="__ctor__" ilk="function" line="420" lineend="424" name="__init__" signature="OFCaptureSocket(*args, **kw)"><variable citdl="OFCaptureSocket" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kw" /></scope><variable attributes="protected __instancevar__" citdl="list" line="422" name="_rbuf" /><variable attributes="protected __instancevar__" citdl="list" line="423" name="_sbuf" /><variable attributes="protected __instancevar__" citdl="False" line="424" name="_enabled" /><scope attributes="protected" ilk="function" line="427" lineend="444" name="_recv_out" signature="_recv_out(buf)"><variable citdl="OFCaptureSocket" ilk="argument" name="self" /><variable ilk="argument" name="buf" /><variable citdl="len()" line="430" name="l" /><variable citdl="int" line="436" name="packet_length" /></scope><scope attributes="protected" ilk="function" line="446" lineend="463" name="_send_out" signature="_send_out(buf, r)"><variable citdl="OFCaptureSocket" ilk="argument" name="self" /><variable ilk="argument" name="buf" /><variable ilk="argument" name="r" /><variable citdl="len()" line="449" name="l" /><variable citdl="int" line="455" name="packet_length" /></scope></scope><scope classrefs="object" doc="Keeps track of lists of ports and provides nice indexing.&#xA;&#xA;NOTE: It&apos;s possible this could be simpler by inheriting from UserDict,&#xA;      but I couldn&apos;t swear without looking at UserDict in some detail,&#xA;      so I just implemented a lot of stuff by hand." ilk="class" line="466" lineend="565" name="PortCollection"><scope attributes="__ctor__" ilk="function" line="474" lineend="477" name="__init__" signature="PortCollection()"><variable citdl="PortCollection" ilk="argument" name="self" /></scope><variable attributes="protected __instancevar__" citdl="set()" line="475" name="_ports" /><variable attributes="protected __instancevar__" citdl="set()" line="476" name="_masks" /><variable attributes="protected __instancevar__" line="477" name="_chain" /><scope attributes="protected" ilk="function" line="479" lineend="481" name="_reset" signature="_reset()"><variable citdl="PortCollection" ilk="argument" name="self" /></scope><scope attributes="protected" ilk="function" line="483" lineend="485" name="_forget" signature="_forget(port_no)"><variable citdl="PortCollection" ilk="argument" name="self" /><variable ilk="argument" name="port_no" /></scope><scope attributes="protected" ilk="function" line="487" lineend="490" name="_update" signature="_update(port)"><variable citdl="PortCollection" ilk="argument" name="self" /><variable ilk="argument" name="port" /></scope><scope ilk="function" line="492" lineend="496" name="__str__" returns="tuple" signature="__str__()"><variable citdl="PortCollection" ilk="argument" name="self" /><variable citdl="list" line="495" name="l" /></scope><scope ilk="function" line="498" lineend="499" name="__len__" returns="len()" signature="__len__()"><variable citdl="PortCollection" ilk="argument" name="self" /></scope><scope ilk="function" line="501" lineend="519" name="__getitem__" returns="p" signature="__getitem__(index)"><variable citdl="PortCollection" ilk="argument" name="self" /><variable ilk="argument" name="index" /><variable line="515" name="p" /></scope><scope ilk="function" line="521" lineend="528" name="keys" returns="list()" signature="keys()"><variable citdl="PortCollection" ilk="argument" name="self" /><variable citdl="set()" line="523" name="k" /></scope><scope ilk="function" line="530" lineend="531" name="__iter__" returns="iter()" signature="__iter__()"><variable citdl="PortCollection" ilk="argument" name="self" /></scope><scope ilk="function" line="536" lineend="542" name="__contains__" returns="bool" signature="__contains__(index)"><variable citdl="PortCollection" ilk="argument" name="self" /><variable ilk="argument" name="index" /></scope><scope ilk="function" line="544" lineend="545" name="values" returns="list" signature="values()"><variable citdl="PortCollection" ilk="argument" name="self" /></scope><scope ilk="function" line="547" lineend="548" name="items" returns="list" signature="items()"><variable citdl="PortCollection" ilk="argument" name="self" /></scope><scope ilk="function" line="550" lineend="551" name="iterkeys" returns="iter()" signature="iterkeys()"><variable citdl="PortCollection" ilk="argument" name="self" /></scope><scope ilk="function" line="552" lineend="553" name="itervalues" returns="iter()" signature="itervalues()"><variable citdl="PortCollection" ilk="argument" name="self" /></scope><scope ilk="function" line="554" lineend="555" name="iteritems" returns="iter()" signature="iteritems()"><variable citdl="PortCollection" ilk="argument" name="self" /></scope><scope ilk="function" line="556" lineend="557" name="has_key" returns="bool" signature="has_key(k)"><variable citdl="PortCollection" ilk="argument" name="self" /><variable ilk="argument" name="k" /></scope><scope ilk="function" line="558" lineend="562" name="get" signature="get(k, default=None)"><variable citdl="PortCollection" ilk="argument" name="self" /><variable ilk="argument" name="k" /><variable ilk="argument" name="default" /></scope><scope ilk="function" line="563" lineend="565" name="copy" signature="copy()"><variable citdl="PortCollection" ilk="argument" name="self" /><variable citdl="" line="564" name="r" /></scope></scope><scope classrefs="EventMixin" doc="A Connection object represents a single TCP session with an&#xA;openflow-enabled switch.&#xA;If the switch reconnects, a new connection object is instantiated." ilk="class" line="568" lineend="802" name="Connection"><variable attributes="protected" citdl="set()" line="574" name="_eventMixin_events" /><variable citdl="int" line="593" name="ID" /><scope ilk="function" line="595" lineend="597" name="msg" signature="msg(m)"><variable citdl="Connection" ilk="argument" name="self" /><variable ilk="argument" name="m" /></scope><scope ilk="function" line="598" lineend="600" name="err" signature="err(m)"><variable citdl="Connection" ilk="argument" name="self" /><variable ilk="argument" name="m" /></scope><scope ilk="function" line="601" lineend="604" name="info" signature="info(m)"><variable citdl="Connection" ilk="argument" name="self" /><variable ilk="argument" name="m" /></scope><scope attributes="__ctor__" ilk="function" line="606" lineend="626" name="__init__" signature="Connection(sock)"><variable citdl="Connection" ilk="argument" name="self" /><variable ilk="argument" name="sock" /></scope><variable attributes="protected __instancevar__" citdl="list" line="607" name="_previous_stats" /><variable attributes="__instancevar__" citdl="DummyOFNexus" line="609" name="ofnexus" /><variable attributes="__instancevar__" line="610" name="sock" /><variable attributes="__instancevar__" citdl="list" line="611" name="buf" /><variable attributes="__instancevar__" line="616" name="dpid" /><variable attributes="__instancevar__" line="617" name="features" /><variable attributes="__instancevar__" citdl="False" line="618" name="disconnected" /><variable attributes="__instancevar__" line="619" name="connect_time" /><variable attributes="__instancevar__" citdl="time.time()" line="620" name="idle_time" /><variable attributes="__instancevar__" citdl="PortCollection" line="624" name="original_ports" /><variable attributes="__instancevar__" citdl="PortCollection" line="625" name="ports" /><scope ilk="function" line="631" lineend="632" name="fileno" returns="self.sock.fileno()" signature="fileno()"><variable citdl="Connection" ilk="argument" name="self" /></scope><scope ilk="function" line="634" lineend="639" name="close" signature="close()"><variable citdl="Connection" ilk="argument" name="self" /></scope><scope doc="disconnect this Connection (usually not invoked manually)." ilk="function" line="641" lineend="672" name="disconnect" signature="disconnect(msg=&apos;disconnected&apos;)"><variable citdl="Connection" ilk="argument" name="self" /><variable citdl="str" ilk="argument" name="msg" /><variable citdl="True" line="645" name="already" /></scope><scope doc="Send data to the switch.&#xA;&#xA;Data should probably either be raw bytes in OpenFlow wire format, or&#xA;an OpenFlow controller-to-switch message object from libopenflow." ilk="function" line="674" lineend="706" name="send" signature="send(data)"><variable citdl="Connection" ilk="argument" name="self" /><variable citdl="data.pack()" ilk="argument" name="data" /><variable citdl="self.sock.send()" line="694" name="l" /></scope><scope doc="Read data from this connection.  Generally this is just called by the&#xA;main OpenFlow loop below.&#xA;&#xA;Note: This function will block if data is not available." ilk="function" line="708" lineend="759" name="read" returns="bool" signature="read()"><variable citdl="Connection" ilk="argument" name="self" /><variable citdl="self.sock.recv()" line="715" name="d" /><variable citdl="len()" line="719" name="buf_len" /><variable citdl="int" line="722" name="offset" /><variable citdl="ord()" line="728" name="ofp_type" /><variable citdl="int" line="739" name="msg_length" /><variable line="743" name="msg" /><variable line="743" name="new_offset" /><variable line="748" name="h" /></scope><scope attributes="protected" ilk="function" line="761" lineend="794" name="_incoming_stats_reply" signature="_incoming_stats_reply(ofp)"><variable citdl="Connection" ilk="argument" name="self" /><variable ilk="argument" name="ofp" /><variable citdl="statsHandlerMap.get()" line="787" name="handler" /><variable citdl="list" line="788" name="s" /></scope><scope ilk="function" line="796" lineend="802" name="__str__" returns="tuple" signature="__str__()"><variable citdl="Connection" ilk="argument" name="self" /><variable citdl="str()" line="799" name="d" /></scope></scope><scope ilk="function" line="805" lineend="817" name="wrap_socket" returns="OFCaptureSocket" signature="wrap_socket(new_sock)"><import line="814" module="traceback" /><variable citdl="OFCaptureSocket" ilk="argument" name="new_sock" /><variable line="806" name="fname" /><variable citdl="file()" line="809" name="pcapfile" /></scope><scope classrefs="Task" doc="The main recoco thread for listening to openflow messages" ilk="class" line="822" lineend="912" name="OpenFlow_01_Task"><scope attributes="__ctor__" ilk="function" line="826" lineend="831" name="__init__" signature="OpenFlow_01_Task(port=6633, address=&apos;0.0.0.0&apos;)"><variable citdl="OpenFlow_01_Task" ilk="argument" name="self" /><variable citdl="int" ilk="argument" name="port" /><variable citdl="str" ilk="argument" name="address" /></scope><variable attributes="__instancevar__" citdl="int()" line="828" name="port" /><variable attributes="__instancevar__" citdl="str" line="829" name="address" /><scope attributes="protected" ilk="function" line="833" lineend="834" name="_handle_GoingUpEvent" signature="_handle_GoingUpEvent(event)"><variable citdl="OpenFlow_01_Task" ilk="argument" name="self" /><variable ilk="argument" name="event" /></scope><scope ilk="function" line="836" lineend="912" name="run" signature="run()"><variable citdl="OpenFlow_01_Task" ilk="argument" name="self" /><variable citdl="list" line="838" name="sockets" /><variable citdl="socket.socket()" line="840" name="listener" /><variable line="849" name="con" /><variable citdl="time.time()" line="871" name="timestamp" /><variable citdl="wrap_socket()" line="874" name="new_sock" /><variable citdl="Connection" line="880" name="newcon" /><variable citdl="False" line="891" name="doTraceback" /></scope></scope><scope attributes="protected" ilk="function" line="917" lineend="920" name="_set_handlers" signature="_set_handlers()" /><scope ilk="function" line="925" lineend="930" name="launch" returns="OpenFlow_01_Task" signature="launch(port=6633, address=&apos;0.0.0.0&apos;)"><variable citdl="int" ilk="argument" name="port" /><variable citdl="str" ilk="argument" name="address" /><variable citdl="OpenFlow_01_Task" line="928" name="l" /></scope></scope>