<scope ilk="blob" lang="Python" name="nicira" src="/home/mininet/new_pox/pox/pox/openflow/nicira.py"><import line="18" module="pox.core" symbol="core" /><import line="19" module="pox.lib.util" symbol="initHelper" /><import line="20" module="pox.lib.util" symbol="hexdump" /><import line="21" module="pox.lib.addresses" symbol="parse_cidr" /><import line="21" module="pox.lib.addresses" symbol="IPAddr" /><import line="21" module="pox.lib.addresses" symbol="EthAddr" /><import alias="of" line="23" module="pox.openflow.libopenflow_01" /><import line="24" module="pox.openflow.libopenflow_01" symbol="ofp_header" /><import line="24" module="pox.openflow.libopenflow_01" symbol="ofp_vendor_base" /><import line="25" module="pox.openflow.libopenflow_01" symbol="_PAD" /><import line="25" module="pox.openflow.libopenflow_01" symbol="_PAD2" /><import line="25" module="pox.openflow.libopenflow_01" symbol="_PAD4" /><import line="25" module="pox.openflow.libopenflow_01" symbol="_PAD6" /><import line="26" module="pox.openflow.libopenflow_01" symbol="_unpack" /><import line="26" module="pox.openflow.libopenflow_01" symbol="_read" /><import line="26" module="pox.openflow.libopenflow_01" symbol="_skip" /><import line="28" module="struct" /><import line="1776" module="pox.openflow" symbol="PacketIn" /><variable citdl="int" line="31" name="NX_VENDOR_ID" /><scope attributes="protected" ilk="function" line="33" lineend="59" name="_init_constants" signature="_init_constants()"><variable citdl="list" line="34" name="actions" /></scope><variable citdl="int" line="63" name="NXT_ROLE_REQUEST" /><variable citdl="int" line="64" name="NXT_ROLE_REPLY" /><variable citdl="int" line="65" name="NXT_SET_FLOW_FORMAT" /><variable citdl="int" line="66" name="NXT_FLOW_MOD" /><variable citdl="int" line="67" name="NXT_FLOW_MOD_TABLE_ID" /><variable citdl="int" line="68" name="NXT_SET_PACKET_IN_FORMAT" /><variable citdl="int" line="69" name="NXT_FLOW_AGE" /><variable citdl="int" line="70" name="NXT_SET_CONTROLLER_ID" /><variable citdl="int" line="71" name="NXT_FLOW_MONITOR_CANCEL" /><variable citdl="int" line="72" name="NXT_FLOW_MONITOR_PAUSED" /><variable citdl="int" line="73" name="NXT_FLOW_MONITOR_RESUMED" /><variable citdl="int" line="74" name="NXST_FLOW_MONITOR_REQUEST" /><variable citdl="int" line="75" name="NXST_FLOW_MONITOR_REPLY" /><scope attributes="protected" ilk="function" line="78" lineend="82" name="_issubclass" returns="bool" signature="_issubclass(a, b)"><variable ilk="argument" name="a" /><variable ilk="argument" name="b" /></scope><scope classrefs="ofp_vendor_base" doc="Base class for Nicira extensions" ilk="class" line="85" lineend="178" name="nicira_base"><variable attributes="protected" citdl="int" line="89" name="_MIN_LENGTH" /><variable citdl="int" line="90" name="vendor" /><scope attributes="protected" doc="Return True if equal&#xA;&#xA;Overide this." ilk="function" line="93" lineend="99" name="_eq" returns="bool" signature="_eq(other)"><variable citdl="nicira_base" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope attributes="protected" doc="Initialize fields&#xA;&#xA;Overide this." ilk="function" line="101" lineend="107" name="_init" signature="_init(kw)"><variable citdl="nicira_base" ilk="argument" name="self" /><variable ilk="argument" name="kw" /></scope><scope attributes="protected" doc="Pack body." ilk="function" line="109" lineend="113" name="_pack_body" returns="str" signature="_pack_body()"><variable citdl="nicira_base" ilk="argument" name="self" /></scope><scope attributes="protected" doc="Unpack body in raw starting at offset.&#xA;&#xA;Return new offset" ilk="function" line="115" lineend="121" name="_unpack_body" signature="_unpack_body(raw, offset, avail)"><variable citdl="nicira_base" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable ilk="argument" name="offset" /><variable ilk="argument" name="avail" /></scope><scope attributes="protected" doc="Return length of body.&#xA;&#xA;Optionally override this." ilk="function" line="123" lineend="129" name="_body_length" returns="len()" signature="_body_length()"><variable citdl="nicira_base" ilk="argument" name="self" /></scope><scope attributes="protected" doc="Format additional fields as text" ilk="function" line="131" lineend="135" name="_show" returns="str" signature="_show(prefix)"><variable citdl="nicira_base" ilk="argument" name="self" /><variable ilk="argument" name="prefix" /></scope><scope attributes="__ctor__" ilk="function" line="137" lineend="142" name="__init__" signature="nicira_base(**kw)"><variable citdl="nicira_base" ilk="argument" name="self" /><variable attributes="kwargs" ilk="argument" name="kw" /></scope><scope ilk="function" line="144" lineend="151" name="pack" returns="str" signature="pack()"><variable citdl="nicira_base" ilk="argument" name="self" /><variable citdl="str" line="147" name="packed" /></scope><scope ilk="function" line="153" lineend="157" name="unpack" returns="tuple" signature="unpack(raw, offset=0)"><variable citdl="nicira_base" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable citdl="int" ilk="argument" name="offset" /><variable line="154" name="length" /></scope><scope ilk="function" line="159" lineend="160" name="__len__" returns="nicira_base._body_length()" signature="__len__()"><variable citdl="nicira_base" ilk="argument" name="self" /></scope><scope ilk="function" line="162" lineend="167" name="__eq__" returns="bool" signature="__eq__(other)"><variable citdl="nicira_base" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope ilk="function" line="169" lineend="169" name="__ne__" returns="bool" signature="__ne__(other)"><variable citdl="nicira_base" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope ilk="function" line="171" lineend="178" name="show" returns="str" signature="show(prefix=&apos;&apos;)"><variable citdl="nicira_base" ilk="argument" name="self" /><variable citdl="str" ilk="argument" name="prefix" /><variable citdl="str" line="172" name="outstr" /></scope></scope><scope classrefs="nicira_base" doc="Used to enable the flow mod table ID extension&#xA;&#xA;When this is enabled, a slightly altered ofp_flow_mod can be used&#xA;to set the table for a flow insertion.  A convenient version of this&#xA;slightly altered flow_mod is available as ofp_flow_mod_table_id." ilk="class" line="181" lineend="232" name="nx_flow_mod_table_id"><variable citdl="int" line="189" name="subtype" /><variable attributes="protected" citdl="int" line="190" name="_MIN_LENGTH" /><scope attributes="protected" ilk="function" line="192" lineend="193" name="_init" signature="_init(kw)"><variable citdl="nx_flow_mod_table_id" ilk="argument" name="self" /><variable ilk="argument" name="kw" /></scope><variable attributes="__instancevar__" citdl="True" line="193" name="enable" /><scope attributes="protected" doc="Return True if equal&#xA;&#xA;Overide this." ilk="function" line="195" lineend="201" name="_eq" returns="bool" signature="_eq(other)"><variable citdl="nx_flow_mod_table_id" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope attributes="protected" doc="Pack body." ilk="function" line="203" lineend="207" name="_pack_body" returns="struct.pack()" signature="_pack_body()"><variable citdl="nx_flow_mod_table_id" ilk="argument" name="self" /></scope><scope attributes="protected" doc="Unpack body in raw starting at offset.&#xA;&#xA;Return new offset" ilk="function" line="209" lineend="218" name="_unpack_body" returns="of._skip()" signature="_unpack_body(raw, offset, avail)"><variable citdl="nx_flow_mod_table_id" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable citdl="of._skip()" ilk="argument" name="offset" /><variable ilk="argument" name="avail" /><variable line="215" name="enable" /></scope><scope attributes="protected" doc="Return length of body.&#xA;&#xA;Optionally override this." ilk="function" line="220" lineend="226" name="_body_length" returns="len()" signature="_body_length()"><variable citdl="nx_flow_mod_table_id" ilk="argument" name="self" /></scope><scope attributes="protected" doc="Format additional fields as text" ilk="function" line="228" lineend="232" name="_show" returns="str" signature="_show(prefix)"><variable citdl="nx_flow_mod_table_id" ilk="argument" name="self" /><variable ilk="argument" name="prefix" /></scope></scope><scope classrefs="of.ofp_flow_mod" doc="A subclass of ofp_flow_mod which has a table_id&#xA;&#xA;This is for use with the NXT_FLOW_MOD_TABLE_ID extension." ilk="class" line="235" lineend="334" name="ofp_flow_mod_table_id"><scope attributes="__ctor__" ilk="function" line="243" lineend="245" name="__init__" signature="ofp_flow_mod_table_id(**kw)"><variable citdl="ofp_flow_mod_table_id" ilk="argument" name="self" /><variable attributes="kwargs" ilk="argument" name="kw" /></scope><variable attributes="__instancevar__" citdl="int" line="244" name="table_id" /><scope attributes="protected __hidden__" ilk="function" line="248" lineend="249" name="_command (property getter)" returns="chr()" signature="_command (property getter)()"><variable citdl="ofp_flow_mod_table_id" ilk="argument" name="self" /></scope><variable attributes="property protected" citdl="chr()" line="248" name="_command" /><scope attributes="protected __hidden__" ilk="function" line="252" lineend="254" name="_command (property setter)" signature="_command (property setter)(v)"><variable citdl="ofp_flow_mod_table_id" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope><variable attributes="__instancevar__" citdl="ord()" line="254" name="command" /><scope doc="Packs this object into its wire format.&#xA;May normalize fields.&#xA;NOTE: If &quot;data&quot; has been specified, this method may actually return&#xA;      *more than just a single ofp_flow_mod* in packed form.&#xA;      Specifically, it may also have a barrier and an ofp_packet_out." ilk="function" line="259" lineend="296" name="pack" returns="str" signature="pack()"><variable citdl="ofp_flow_mod_table_id" ilk="argument" name="self" /><variable citdl="ofp_packet_out()" line="267" name="po" /><variable citdl="str" line="283" name="packed" /></scope><variable attributes="__instancevar__" citdl="self.data.buffer_id" line="274" name="buffer_id" /><scope ilk="function" line="298" lineend="308" name="unpack" returns="tuple" signature="unpack(raw, offset=0)"><variable citdl="ofp_flow_mod_table_id" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable citdl="int" ilk="argument" name="offset" /><variable line="299" name="length" /></scope><variable attributes="__instancevar__" line="305" name="actions" /><scope ilk="function" line="310" lineend="314" name="__eq__" returns="bool" signature="__eq__(other)"><variable citdl="ofp_flow_mod_table_id" ilk="argument" name="self" /><variable ilk="argument" name="other" /><variable citdl="of.ofp_flow_mod()" line="311" name="r" /></scope><scope ilk="function" line="316" lineend="334" name="show" returns="str" signature="show(prefix=&apos;&apos;)"><variable citdl="ofp_flow_mod_table_id" ilk="argument" name="self" /><variable citdl="str" ilk="argument" name="prefix" /><variable citdl="str" line="317" name="outstr" /></scope></scope><scope classrefs="of.ofp_flow_mod of.ofp_vendor_base" doc="A flow mod command that uses Nicira extended matches&#xA;&#xA;This has a table_id attribute, which only works if you have enabled&#xA;the nx_flow_mod_table_id option." ilk="class" line="337" lineend="438" name="nx_flow_mod"><variable attributes="protected" citdl="int" line="344" name="_MIN_LENGTH" /><variable citdl="of.OFPT_VENDOR" line="345" name="header_type" /><variable citdl="int" line="346" name="vendor" /><variable citdl="int" line="347" name="subtype" /><scope attributes="__ctor__" ilk="function" line="349" lineend="355" name="__init__" signature="nx_flow_mod(**kw)"><variable citdl="nx_flow_mod" ilk="argument" name="self" /><variable attributes="kwargs" ilk="argument" name="kw" /></scope><variable attributes="__instancevar__" citdl="int" line="350" name="table_id" /><variable attributes="__instancevar__" citdl="nx_match()" line="355" name="match" /><scope attributes="protected" ilk="function" line="357" lineend="360" name="_validate" returns="str" signature="_validate()"><variable citdl="nx_flow_mod" ilk="argument" name="self" /></scope><scope doc="Packs this object into its wire format.&#xA;May normalize fields.&#xA;NOTE: If &quot;data&quot; has been specified, this method may actually return&#xA;      *more than just a single ofp_flow_mod* in packed form.&#xA;      Specifically, it may also have a barrier and an ofp_packet_out." ilk="function" line="362" lineend="411" name="pack" returns="str" signature="pack()"><variable citdl="nx_flow_mod" ilk="argument" name="self" /><variable citdl="ofp_packet_out()" line="370" name="po" /><variable citdl="self.match.pack()" line="386" name="match" /><variable citdl="len()" line="387" name="match_len" /><variable citdl="self.command" line="389" name="command" /><variable citdl="str" line="392" name="packed" /></scope><variable attributes="__instancevar__" citdl="self.data.buffer_id" line="377" name="buffer_id" /><scope ilk="function" line="413" lineend="426" name="unpack" returns="tuple" signature="unpack(raw, offset=0)"><variable citdl="nx_flow_mod" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable citdl="int" ilk="argument" name="offset" /><variable attributes="protected" citdl="int" line="414" name="_o" /><variable line="415" name="length" /></scope><variable attributes="__instancevar__" line="423" name="actions" /><scope ilk="function" line="428" lineend="438" name="__len__" returns="int" signature="__len__()"><variable citdl="nx_flow_mod" ilk="argument" name="self" /><variable citdl="len()" line="429" name="match_len" /><variable citdl="int" line="430" name="l" /></scope></scope><variable citdl="int" line="442" name="NXPIF_OPENFLOW10" /><variable citdl="int" line="443" name="NXPIF_NXM" /><scope classrefs="nicira_base" ilk="class" line="445" lineend="486" name="nx_packet_in_format"><variable citdl="int" line="446" name="subtype" /><variable attributes="protected" citdl="int" line="447" name="_MIN_LENGTH" /><scope attributes="protected" ilk="function" line="449" lineend="450" name="_init" signature="_init(kw)"><variable citdl="nx_packet_in_format" ilk="argument" name="self" /><variable ilk="argument" name="kw" /></scope><variable attributes="__instancevar__" citdl="int" line="450" name="format" /><scope attributes="protected" doc="Return True if equal&#xA;&#xA;Overide this." ilk="function" line="452" lineend="458" name="_eq" returns="bool" signature="_eq(other)"><variable citdl="nx_packet_in_format" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope attributes="protected" doc="Pack body." ilk="function" line="460" lineend="464" name="_pack_body" returns="struct.pack()" signature="_pack_body()"><variable citdl="nx_packet_in_format" ilk="argument" name="self" /></scope><scope attributes="protected" doc="Unpack body in raw starting at offset.&#xA;&#xA;Return new offset" ilk="function" line="466" lineend="473" name="_unpack_body" signature="_unpack_body(raw, offset, avail)"><variable citdl="nx_packet_in_format" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable ilk="argument" name="offset" /><variable ilk="argument" name="avail" /></scope><scope attributes="protected" doc="Format additional fields as text" ilk="function" line="475" lineend="486" name="_show" returns="str" signature="_show(prefix)"><variable citdl="nx_packet_in_format" ilk="argument" name="self" /><variable ilk="argument" name="prefix" /><variable citdl="str" line="479" name="s" /></scope></scope><scope classrefs="of.ofp_action_vendor_base" ilk="class" line="489" lineend="541" name="nx_output_reg"><scope attributes="protected" ilk="function" line="490" lineend="496" name="_init" signature="_init(kw)"><variable citdl="nx_output_reg" ilk="argument" name="self" /><variable ilk="argument" name="kw" /></scope><variable attributes="__instancevar__" citdl="int" line="491" name="vendor" /><variable attributes="__instancevar__" citdl="NXAST_OUTPUT_REG" line="492" name="subtype" /><variable attributes="__instancevar__" citdl="int" line="493" name="offset" /><variable attributes="__instancevar__" citdl="int" line="494" name="nbits" /><variable attributes="__instancevar__" citdl="_class_for_nxm_header()" line="495" name="reg" /><variable attributes="__instancevar__" citdl="int" line="496" name="max_len" /><scope attributes="protected" ilk="function" line="498" lineend="504" name="_eq" returns="bool" signature="_eq(other)"><variable citdl="nx_output_reg" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope attributes="protected" ilk="function" line="506" lineend="518" name="_pack_body" returns="struct.pack()" signature="_pack_body()"><variable citdl="nx_output_reg" ilk="argument" name="self" /><variable line="507" name="nbits" /><variable citdl="int" line="510" name="ofs_nbits" /><variable citdl="reg()" line="512" name="o" /><variable citdl="o.pack()" line="514" name="reg" /><variable citdl="struct.pack()" line="516" name="p" /></scope><scope attributes="protected" ilk="function" line="520" lineend="529" name="_unpack_body" signature="_unpack_body(raw, offset, avail)"><variable citdl="nx_output_reg" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable ilk="argument" name="offset" /><variable ilk="argument" name="avail" /></scope><scope attributes="protected" ilk="function" line="531" lineend="532" name="_body_length" returns="int" signature="_body_length()"><variable citdl="nx_output_reg" ilk="argument" name="self" /></scope><scope attributes="protected" ilk="function" line="534" lineend="541" name="_show" returns="str" signature="_show(prefix)"><variable citdl="nx_output_reg" ilk="argument" name="self" /><variable ilk="argument" name="prefix" /><variable citdl="str" line="535" name="s" /></scope></scope><scope classrefs="of.ofp_action_vendor_base" ilk="class" line="544" lineend="598" name="nx_reg_move"><scope attributes="protected" ilk="function" line="545" lineend="552" name="_init" signature="_init(kw)"><variable citdl="nx_reg_move" ilk="argument" name="self" /><variable ilk="argument" name="kw" /></scope><variable attributes="__instancevar__" citdl="int" line="546" name="vendor" /><variable attributes="__instancevar__" citdl="NXAST_REG_MOVE" line="547" name="subtype" /><variable attributes="__instancevar__" line="548" name="nbits" /><variable attributes="__instancevar__" citdl="_class_for_nxm_header()" line="549" name="dst" /><variable attributes="__instancevar__" citdl="int" line="550" name="dst_ofs" /><variable attributes="__instancevar__" citdl="_class_for_nxm_header()" line="551" name="src" /><variable attributes="__instancevar__" citdl="int" line="552" name="src_ofs" /><scope attributes="protected" ilk="function" line="554" lineend="561" name="_eq" returns="bool" signature="_eq(other)"><variable citdl="nx_reg_move" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope attributes="protected" ilk="function" line="563" lineend="574" name="_pack_body" returns="struct.pack()" signature="_pack_body()"><variable citdl="nx_reg_move" ilk="argument" name="self" /><variable citdl="dst()" line="564" name="o" /><variable citdl="o.pack()" line="566" name="dst" /><variable citdl="o.pack()" line="570" name="src" /><variable citdl="struct.pack()" line="572" name="p" /></scope><scope attributes="protected" ilk="function" line="576" lineend="584" name="_unpack_body" signature="_unpack_body(raw, offset, avail)"><variable citdl="nx_reg_move" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable ilk="argument" name="offset" /><variable ilk="argument" name="avail" /></scope><scope attributes="protected" ilk="function" line="586" lineend="587" name="_body_length" returns="int" signature="_body_length()"><variable citdl="nx_reg_move" ilk="argument" name="self" /></scope><scope attributes="protected" ilk="function" line="589" lineend="598" name="_show" returns="str" signature="_show(prefix)"><variable citdl="nx_reg_move" ilk="argument" name="self" /><variable ilk="argument" name="prefix" /><variable citdl="str" line="590" name="s" /></scope></scope><scope classrefs="of.ofp_action_vendor_base" ilk="class" line="601" lineend="652" name="nx_reg_load"><scope attributes="protected" ilk="function" line="602" lineend="608" name="_init" signature="_init(kw)"><variable citdl="nx_reg_load" ilk="argument" name="self" /><variable ilk="argument" name="kw" /></scope><variable attributes="__instancevar__" citdl="int" line="603" name="vendor" /><variable attributes="__instancevar__" citdl="NXAST_REG_LOAD" line="604" name="subtype" /><variable attributes="__instancevar__" citdl="int" line="605" name="offset" /><variable attributes="__instancevar__" citdl="int" line="606" name="nbits" /><variable attributes="__instancevar__" citdl="_class_for_nxm_header()" line="607" name="dst" /><variable attributes="__instancevar__" citdl="int" line="608" name="value" /><scope attributes="protected" ilk="function" line="610" lineend="616" name="_eq" returns="bool" signature="_eq(other)"><variable citdl="nx_reg_load" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope attributes="protected" ilk="function" line="618" lineend="629" name="_pack_body" returns="struct.pack()" signature="_pack_body()"><variable citdl="nx_reg_load" ilk="argument" name="self" /><variable line="619" name="nbits" /><variable citdl="int" line="622" name="ofs_nbits" /><variable citdl="dst()" line="624" name="o" /><variable citdl="o.pack()" line="626" name="dst" /><variable citdl="struct.pack()" line="628" name="p" /></scope><scope attributes="protected" ilk="function" line="631" lineend="640" name="_unpack_body" signature="_unpack_body(raw, offset, avail)"><variable citdl="nx_reg_load" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable ilk="argument" name="offset" /><variable ilk="argument" name="avail" /></scope><scope attributes="protected" ilk="function" line="642" lineend="643" name="_body_length" returns="int" signature="_body_length()"><variable citdl="nx_reg_load" ilk="argument" name="self" /></scope><scope attributes="protected" ilk="function" line="645" lineend="652" name="_show" returns="str" signature="_show(prefix)"><variable citdl="nx_reg_load" ilk="argument" name="self" /><variable ilk="argument" name="prefix" /><variable citdl="str" line="646" name="s" /></scope></scope><scope classrefs="of.ofp_action_vendor_base" ilk="class" line="655" lineend="680" name="nx_action_dec_ttl"><scope attributes="protected" ilk="function" line="656" lineend="658" name="_init" signature="_init(kw)"><variable citdl="nx_action_dec_ttl" ilk="argument" name="self" /><variable ilk="argument" name="kw" /></scope><variable attributes="__instancevar__" citdl="int" line="657" name="vendor" /><variable attributes="__instancevar__" citdl="NXAST_DEC_TTL" line="658" name="subtype" /><scope attributes="protected" ilk="function" line="660" lineend="662" name="_eq" returns="bool" signature="_eq(other)"><variable citdl="nx_action_dec_ttl" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope attributes="protected" ilk="function" line="664" lineend="667" name="_pack_body" returns="struct.pack()" signature="_pack_body()"><variable citdl="nx_action_dec_ttl" ilk="argument" name="self" /><variable citdl="struct.pack()" line="665" name="p" /></scope><scope attributes="protected" ilk="function" line="669" lineend="672" name="_unpack_body" returns="of._skip()" signature="_unpack_body(raw, offset, avail)"><variable citdl="nx_action_dec_ttl" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable citdl="of._skip()" ilk="argument" name="offset" /><variable ilk="argument" name="avail" /></scope><scope attributes="protected" ilk="function" line="674" lineend="675" name="_body_length" returns="int" signature="_body_length()"><variable citdl="nx_action_dec_ttl" ilk="argument" name="self" /></scope><scope attributes="protected" ilk="function" line="677" lineend="680" name="_show" returns="str" signature="_show(prefix)"><variable citdl="nx_action_dec_ttl" ilk="argument" name="self" /><variable ilk="argument" name="prefix" /><variable citdl="str" line="678" name="s" /></scope></scope><scope classrefs="of.ofp_action_vendor_base" doc="Used with both resubmit and resubmit_table.&#xA;&#xA;Generally, you want to use one of the factory methods." ilk="class" line="683" lineend="729" name="nx_action_resubmit"><scope ilk="function" line="690" lineend="691" name="resubmit" returns="nx_action_resubmit.resubmit.cls()" signature="resubmit(in_port=of.OFPP_IN_PORT)"><variable citdl="nx_action_resubmit" ilk="argument" name="cls" /><variable citdl="of.OFPP_IN_PORT" ilk="argument" name="in_port" /></scope><scope ilk="function" line="694" lineend="696" name="resubmit_table" returns="nx_action_resubmit.resubmit_table.cls()" signature="resubmit_table(table=255, in_port=of.OFPP_IN_PORT)"><variable citdl="nx_action_resubmit" ilk="argument" name="cls" /><variable citdl="int" ilk="argument" name="table" /><variable citdl="of.OFPP_IN_PORT" ilk="argument" name="in_port" /></scope><scope attributes="protected" ilk="function" line="698" lineend="702" name="_init" signature="_init(kw)"><variable citdl="nx_action_resubmit" ilk="argument" name="self" /><variable ilk="argument" name="kw" /></scope><variable attributes="__instancevar__" citdl="int" line="699" name="vendor" /><variable attributes="__instancevar__" citdl="NXAST_RESUBMIT" line="700" name="subtype" /><variable attributes="__instancevar__" line="701" name="in_port" /><variable attributes="__instancevar__" line="702" name="table" /><scope attributes="protected" ilk="function" line="704" lineend="708" name="_eq" returns="bool" signature="_eq(other)"><variable citdl="nx_action_resubmit" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope attributes="protected" ilk="function" line="710" lineend="713" name="_pack_body" returns="struct.pack()" signature="_pack_body()"><variable citdl="nx_action_resubmit" ilk="argument" name="self" /><variable citdl="struct.pack()" line="711" name="p" /></scope><scope attributes="protected" ilk="function" line="715" lineend="719" name="_unpack_body" returns="of._skip()" signature="_unpack_body(raw, offset, avail)"><variable citdl="nx_action_resubmit" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable citdl="of._skip()" ilk="argument" name="offset" /><variable ilk="argument" name="avail" /></scope><scope attributes="protected" ilk="function" line="721" lineend="722" name="_body_length" returns="int" signature="_body_length()"><variable citdl="nx_action_resubmit" ilk="argument" name="self" /></scope><scope attributes="protected" ilk="function" line="724" lineend="729" name="_show" returns="str" signature="_show(prefix)"><variable citdl="nx_action_resubmit" ilk="argument" name="self" /><variable ilk="argument" name="prefix" /><variable citdl="str" line="725" name="s" /></scope></scope><scope classrefs="of.ofp_action_vendor_base" ilk="class" line="732" lineend="765" name="nx_action_fin_timeout"><scope attributes="protected" ilk="function" line="733" lineend="737" name="_init" signature="_init(kw)"><variable citdl="nx_action_fin_timeout" ilk="argument" name="self" /><variable ilk="argument" name="kw" /></scope><variable attributes="__instancevar__" citdl="int" line="734" name="vendor" /><variable attributes="__instancevar__" citdl="NXAST_FIN_TIMEOUT" line="735" name="subtype" /><variable attributes="__instancevar__" citdl="int" line="736" name="fin_idle_timeout" /><variable attributes="__instancevar__" citdl="int" line="737" name="fin_hard_timeout" /><scope attributes="protected" ilk="function" line="739" lineend="743" name="_eq" returns="bool" signature="_eq(other)"><variable citdl="nx_action_fin_timeout" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope attributes="protected" ilk="function" line="745" lineend="749" name="_pack_body" returns="struct.pack()" signature="_pack_body()"><variable citdl="nx_action_fin_timeout" ilk="argument" name="self" /><variable citdl="struct.pack()" line="746" name="p" /></scope><scope attributes="protected" ilk="function" line="751" lineend="755" name="_unpack_body" returns="of._skip()" signature="_unpack_body(raw, offset, avail)"><variable citdl="nx_action_fin_timeout" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable citdl="of._skip()" ilk="argument" name="offset" /><variable ilk="argument" name="avail" /></scope><scope attributes="protected" ilk="function" line="757" lineend="758" name="_body_length" returns="int" signature="_body_length()"><variable citdl="nx_action_fin_timeout" ilk="argument" name="self" /></scope><scope attributes="protected" ilk="function" line="760" lineend="765" name="_show" returns="str" signature="_show(prefix)"><variable citdl="nx_action_fin_timeout" ilk="argument" name="self" /><variable ilk="argument" name="prefix" /><variable citdl="str" line="761" name="s" /></scope></scope><scope classrefs="of.ofp_action_vendor_base" ilk="class" line="767" lineend="793" name="nx_action_exit"><scope attributes="protected" ilk="function" line="768" lineend="770" name="_init" signature="_init(kw)"><variable citdl="nx_action_exit" ilk="argument" name="self" /><variable ilk="argument" name="kw" /></scope><variable attributes="__instancevar__" citdl="int" line="769" name="vendor" /><variable attributes="__instancevar__" citdl="NXAST_EXIT" line="770" name="subtype" /><scope attributes="protected" ilk="function" line="772" lineend="774" name="_eq" returns="bool" signature="_eq(other)"><variable citdl="nx_action_exit" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope attributes="protected" ilk="function" line="776" lineend="779" name="_pack_body" returns="struct.pack()" signature="_pack_body()"><variable citdl="nx_action_exit" ilk="argument" name="self" /><variable citdl="struct.pack()" line="777" name="p" /></scope><scope attributes="protected" ilk="function" line="781" lineend="785" name="_unpack_body" returns="of._skip()" signature="_unpack_body(raw, offset, avail)"><variable citdl="nx_action_exit" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable citdl="of._skip()" ilk="argument" name="offset" /><variable ilk="argument" name="avail" /></scope><scope attributes="protected" ilk="function" line="787" lineend="788" name="_body_length" returns="int" signature="_body_length()"><variable citdl="nx_action_exit" ilk="argument" name="self" /></scope><scope attributes="protected" ilk="function" line="790" lineend="793" name="_show" returns="str" signature="_show(prefix)"><variable citdl="nx_action_exit" ilk="argument" name="self" /><variable ilk="argument" name="prefix" /><variable citdl="str" line="791" name="s" /></scope></scope><scope attributes="protected" classrefs="object" ilk="class" line="807" lineend="811" name="_nxm_raw"><scope attributes="protected" ilk="function" line="808" lineend="809" name="_pack_value" signature="_pack_value(v)"><variable citdl="_nxm_raw" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope><scope attributes="protected" ilk="function" line="810" lineend="811" name="_unpack_value" signature="_unpack_value(v)"><variable citdl="_nxm_raw" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope></scope><scope attributes="protected" classrefs="object" ilk="class" line="814" lineend="827" name="_nxm_numeric"><variable attributes="protected" citdl="list" line="815" name="_size_table" /><scope attributes="protected" ilk="function" line="817" lineend="819" name="_pack_value" returns="struct.pack()" signature="_pack_value(v)"><variable citdl="_nxm_numeric" ilk="argument" name="self" /><variable ilk="argument" name="v" /><variable line="818" name="size" /></scope><scope attributes="protected" ilk="function" line="821" lineend="827" name="_unpack_value" signature="_unpack_value(v)"><variable citdl="_nxm_numeric" ilk="argument" name="self" /><variable ilk="argument" name="v" /><variable line="823" name="size" /></scope></scope><scope attributes="protected" classrefs="object" doc="Allows setting of IP address in many formats&#xA;&#xA;The value can be any format known by IPAddr.  If it&apos;s a string, it can&#xA;also have a trailing /netmask or /cidr-bits.  If it&apos;s a tuple, the&#xA;first is assumed to be any kind of IP address and the second is either&#xA;a netmask or the number of network bits." ilk="class" line="829" lineend="871" name="_nxm_ip"><scope attributes="__hidden__" ilk="function" line="840" lineend="841" name="value (property getter)" returns="self._unpack_value()" signature="value (property getter)()"><variable citdl="_nxm_ip" ilk="argument" name="self" /></scope><variable attributes="property" citdl="self._unpack_value()" line="840" name="value" /><scope attributes="__hidden__" ilk="function" line="843" lineend="857" name="value (property setter)" signature="value (property setter)(value)"><variable citdl="_nxm_ip" ilk="argument" name="self" /><variable ilk="argument" name="value" /><variable line="846" name="ip" /><variable citdl="parse_cidr()" line="851" name="temp" /></scope><variable attributes="__instancevar__" line="847" name="mask" /><variable attributes="protected __instancevar__" citdl="self._pack_value()" line="857" name="_value" /><scope attributes="protected" ilk="function" line="859" lineend="860" name="_pack_value" signature="_pack_value(v)"><variable citdl="_nxm_ip" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope><scope attributes="protected" ilk="function" line="861" lineend="862" name="_unpack_value" returns="IPAddr()" signature="_unpack_value(v)"><variable citdl="_nxm_ip" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope><scope attributes="protected" ilk="function" line="863" lineend="871" name="_pack_mask" signature="_pack_mask(v)"><variable citdl="_nxm_ip" ilk="argument" name="self" /><variable citdl="int" ilk="argument" name="v" /><variable citdl="int" line="868" name="n" /></scope></scope><scope attributes="protected" classrefs="object" doc="Placeholder until we have real IPv6 support&#xA;&#xA;Allows setting of IP address in many formats&#xA;&#xA;The value can be any format known by IPAddr.  If it&apos;s a string, it can&#xA;also have a trailing /netmask or /cidr-bits.  If it&apos;s a tuple, the&#xA;first is assumed to be any kind of IP address and the second is either&#xA;a netmask or the number of network bits." ilk="class" line="876" lineend="917" name="_nxm_ipv6"><scope attributes="__hidden__" ilk="function" line="890" lineend="891" name="value (property getter)" returns="self._unpack_value()" signature="value (property getter)()"><variable citdl="_nxm_ipv6" ilk="argument" name="self" /></scope><variable attributes="property" citdl="self._unpack_value()" line="890" name="value" /><scope attributes="__hidden__" ilk="function" line="893" lineend="908" name="value (property setter)" signature="value (property setter)(value)"><variable citdl="_nxm_ipv6" ilk="argument" name="self" /><variable ilk="argument" name="value" /><variable line="896" name="ip" /></scope><variable attributes="__instancevar__" line="897" name="mask" /><variable attributes="protected __instancevar__" citdl="self._pack_value()" line="908" name="_value" /><scope attributes="protected" ilk="function" line="910" lineend="911" name="_pack_value" signature="_pack_value(v)"><variable citdl="_nxm_ipv6" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope><scope attributes="protected" ilk="function" line="913" lineend="914" name="_unpack_value" signature="_unpack_value(v)"><variable citdl="_nxm_ipv6" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope><scope attributes="protected" ilk="function" line="916" lineend="917" name="_pack_mask" signature="_pack_mask(v)"><variable citdl="_nxm_ipv6" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope></scope><scope attributes="protected" classrefs="object" ilk="class" line="930" lineend="934" name="_nxm_ether"><scope attributes="protected" ilk="function" line="931" lineend="932" name="_pack_value" signature="_pack_value(v)"><variable citdl="_nxm_ether" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope><scope attributes="protected" ilk="function" line="933" lineend="934" name="_unpack_value" returns="EthAddr()" signature="_unpack_value(v)"><variable citdl="_nxm_ether" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope></scope><variable attributes="protected" citdl="dict" line="937" name="_nxm_type_to_class" /><variable attributes="protected" citdl="dict" line="938" name="_nxm_name_to_type" /><scope classrefs="object" ilk="class" line="940" lineend="1115" name="nxm_entry"><variable attributes="protected" citdl="False" line="943" name="_force_mask" /><scope attributes="__hidden__" ilk="function" line="948" lineend="949" name="nxm_vendor (property getter)" returns="int" signature="nxm_vendor (property getter)()"><variable citdl="nxm_entry" ilk="argument" name="self" /></scope><variable attributes="property" citdl="int" line="948" name="nxm_vendor" /><variable attributes="property" citdl="int" line="951" name="nxm_field" /><scope attributes="__hidden__" ilk="function" line="951" lineend="952" name="nxm_field (property getter)" returns="int" signature="nxm_field (property getter)()"><variable citdl="nxm_entry" ilk="argument" name="self" /></scope><scope doc="Parses the NXM_HEADER&#xA;&#xA;Returns (type,has_mask,length)" ilk="function" line="955" lineend="966" name="unpack_header" returns="tuple" signature="unpack_header(offset)"><variable citdl="nxm_entry" ilk="argument" name="raw" /><variable ilk="argument" name="offset" /><variable line="961" name="h" /><variable citdl="int" line="963" name="t" /><variable citdl="bool" line="964" name="has_mask" /><variable citdl="int" line="965" name="length" /></scope><scope ilk="function" line="969" lineend="997" name="unpack_new" returns="tuple" signature="unpack_new(offset)"><variable citdl="nxm_entry" ilk="argument" name="raw" /><variable ilk="argument" name="offset" /><variable line="970" name="has_mask" /><variable line="970" name="length" /><variable line="970" name="t" /><variable citdl="list" line="972" name="data" /><variable citdl="list" line="973" name="mask" /><variable citdl="_nxm_type_to_class.get()" line="980" name="c" /><variable citdl="c()" line="982" name="e" /></scope><scope ilk="function" line="999" lineend="1007" name="clone" returns="self.__class__()" signature="clone()"><variable citdl="nxm_entry" ilk="argument" name="self" /><variable citdl="self.__class__()" line="1000" name="n" /></scope><scope attributes="__ctor__" ilk="function" line="1009" lineend="1015" name="__init__" signature="nxm_entry(value=None, mask=None)"><variable citdl="nxm_entry" ilk="argument" name="self" /><variable ilk="argument" name="value" /><variable ilk="argument" name="mask" /></scope><variable attributes="protected __instancevar__" citdl="self._pack_value()" line="1011" name="_value" /><variable attributes="protected __instancevar__" citdl="_pack_mask()" line="1012" name="_mask" /><scope ilk="function" line="1017" lineend="1021" name="get_length" returns="len()" signature="get_length(omittable=False)"><variable citdl="nxm_entry" ilk="argument" name="self" /><variable citdl="False" ilk="argument" name="omittable" /></scope><scope ilk="function" line="1023" lineend="1024" name="__len__" returns="nxm_entry.get_length()" signature="__len__()"><variable citdl="nxm_entry" ilk="argument" name="self" /></scope><scope attributes="protected" ilk="function" line="1026" lineend="1027" name="_unpack_mask" returns="self._unpack_value()" signature="_unpack_mask(m)"><variable citdl="nxm_entry" ilk="argument" name="self" /><variable ilk="argument" name="m" /></scope><scope attributes="protected" ilk="function" line="1028" lineend="1029" name="_pack_mask" returns="self._pack_value()" signature="_pack_mask(m)"><variable citdl="nxm_entry" ilk="argument" name="self" /><variable ilk="argument" name="m" /></scope><scope attributes="__hidden__" ilk="function" line="1032" lineend="1033" name="is_reg (property getter)" returns="bool" signature="is_reg (property getter)()"><variable citdl="nxm_entry" ilk="argument" name="self" /></scope><variable attributes="property" citdl="bool" line="1032" name="is_reg" /><scope attributes="__hidden__" ilk="function" line="1035" lineend="1036" name="allow_mask (property getter)" returns="bool" signature="allow_mask (property getter)()"><variable citdl="nxm_entry" ilk="argument" name="self" /></scope><variable attributes="property" citdl="bool" line="1035" name="allow_mask" /><scope attributes="__hidden__" ilk="function" line="1039" lineend="1040" name="value (property getter)" returns="self._unpack_value()" signature="value (property getter)()"><variable citdl="nxm_entry" ilk="argument" name="self" /></scope><variable citdl="self._unpack_value()" line="1039" name="value" /><scope attributes="__hidden__" ilk="function" line="1042" lineend="1043" name="value (property setter)" signature="value (property setter)(value)"><variable citdl="nxm_entry" ilk="argument" name="self" /><variable ilk="argument" name="value" /></scope><scope attributes="__hidden__" ilk="function" line="1046" lineend="1048" name="mask (property getter)" returns="nxm_entry._unpack_mask()" signature="mask (property getter)()"><variable citdl="nxm_entry" ilk="argument" name="self" /></scope><variable citdl="nxm_entry._unpack_mask()" line="1046" name="mask" /><scope attributes="__hidden__" ilk="function" line="1050" lineend="1059" name="mask (property setter)" signature="mask (property setter)(value)"><variable citdl="nxm_entry" ilk="argument" name="self" /><variable ilk="argument" name="value" /></scope><scope ilk="function" line="1061" lineend="1067" name="__eq__" returns="bool" signature="__eq__(other)"><variable citdl="nxm_entry" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope ilk="function" line="1069" lineend="1104" name="pack" returns="str" signature="pack(omittable=False, header_only=False)"><variable citdl="nxm_entry" ilk="argument" name="self" /><variable citdl="False" ilk="argument" name="omittable" /><variable citdl="False" ilk="argument" name="header_only" /><variable citdl="int" line="1070" name="h" /><variable citdl="self._nxm_length" line="1071" name="mask" /><variable citdl="struct.pack()" line="1091" name="r" /><variable citdl="self._pack_value()" line="1094" name="value" /></scope><scope ilk="function" line="1106" lineend="1112" name="__str__" returns="str" signature="__str__()"><variable citdl="nxm_entry" ilk="argument" name="self" /><variable citdl="str()" line="1107" name="r" /></scope><scope ilk="function" line="1114" lineend="1115" name="__repr__" returns="str()" signature="__repr__()"><variable citdl="nxm_entry" ilk="argument" name="self" /></scope></scope><scope attributes="protected" classrefs="_nxm_numeric nxm_entry" ilk="class" line="1118" lineend="1119" name="_nxm_numeric_entry" /><scope attributes="protected" classrefs="object" ilk="class" line="1121" lineend="1124" name="_nxm_maskable"><variable attributes="property" citdl="bool" line="1123" name="allow_mask" /><scope attributes="__hidden__" ilk="function" line="1123" lineend="1124" name="allow_mask (property getter)" returns="bool" signature="allow_mask (property getter)()"><variable citdl="_nxm_maskable" ilk="argument" name="self" /></scope></scope><scope attributes="protected" classrefs="_nxm_maskable _nxm_numeric_entry" ilk="class" line="1126" lineend="1127" name="_nxm_maskable_numeric_entry" /><scope attributes="protected" classrefs="_nxm_maskable_numeric_entry" ilk="class" line="1129" lineend="1132" name="_nxm_reg"><variable attributes="property" citdl="bool" line="1131" name="is_reg" /><scope attributes="__hidden__" ilk="function" line="1131" lineend="1132" name="is_reg (property getter)" returns="bool" signature="is_reg (property getter)()"><variable citdl="_nxm_reg" ilk="argument" name="self" /></scope></scope><scope classrefs="_nxm_raw nxm_entry" ilk="class" line="1134" lineend="1147" name="NXM_GENERIC"><variable attributes="property" citdl="bool" line="1136" name="allow_mask" /><scope attributes="__hidden__" ilk="function" line="1136" lineend="1137" name="allow_mask (property getter)" returns="bool" signature="allow_mask (property getter)()"><variable citdl="NXM_GENERIC" ilk="argument" name="self" /></scope><scope ilk="function" line="1139" lineend="1147" name="__str__" returns="tuple" signature="__str__()"><variable citdl="NXM_GENERIC" ilk="argument" name="self" /><variable citdl="str" line="1140" name="r" /></scope></scope><scope attributes="protected" doc="Takes an NXM vendor and field and returns the whole type field" ilk="function" line="1150" lineend="1154" name="_make_type" returns="int" signature="_make_type(vendor, field)"><variable ilk="argument" name="vendor" /><variable ilk="argument" name="field" /></scope><scope attributes="protected" doc="Helper for _make_nxm(_w)&#xA;&#xA;Normalizes lists of superclasses" ilk="function" line="1157" lineend="1176" name="_fix_types" returns="list()" signature="_fix_types(t)"><variable citdl="list" ilk="argument" name="t" /><variable attributes="protected" line="1164" name="_" /><variable citdl="True" line="1168" name="ok" /></scope><scope attributes="protected" doc="Make a simple NXM entry class" ilk="function" line="1179" lineend="1199" name="_make_nxm" returns="typ()" signature="_make_nxm(__name, __vendor, __field, __len=None, type=None, **kw)"><import line="1192" module="__builtin__" /><variable ilk="argument" name="__name" /><variable ilk="argument" name="__vendor" /><variable ilk="argument" name="__field" /><variable ilk="argument" name="__len" /><variable citdl="_fix_types()" ilk="argument" name="type" /><variable attributes="kwargs" ilk="argument" name="kw" /><variable citdl="_make_type()" line="1189" name="t" /><variable citdl="__builtin__.type" line="1193" name="typ" /><variable citdl="typ()" line="1194" name="c" /></scope><scope attributes="protected" doc="Make a simple wildcarded NXM entry class" ilk="function" line="1202" lineend="1215" name="_make_nxm_w" returns="_make_nxm()" signature="_make_nxm_w(*args, **kw)"><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kw" /><variable citdl="_fix_types()" line="1206" name="t" /><variable citdl="False" line="1207" name="ok" /></scope><scope attributes="protected" doc="Given a raw nxm_entry header, return corresponding class&#xA;&#xA;If we don&apos;t have a class for this header type, we generate one." ilk="function" line="1218" lineend="1238" name="_class_for_nxm_header" returns="_make_nxm()" signature="_class_for_nxm_header(raw)"><variable ilk="argument" name="raw" /><variable line="1224" name="has_mask" /><variable line="1224" name="length" /><variable line="1224" name="t" /><variable citdl="_nxm_type_to_class.get()" line="1225" name="c" /><variable citdl="int" line="1230" name="vendor" /><variable citdl="int" line="1231" name="field" /><variable citdl="str" line="1232" name="typename" /><variable citdl="list" line="1235" name="types" /></scope><variable citdl="int" line="1285" name="NXM_NX_MAX_REGS" /><variable citdl="list" line="1289" name="NXM_NX_REG" /><scope attributes="protected" ilk="function" line="1291" lineend="1297" name="_init_regs" signature="_init_regs()"><variable citdl="str()" line="1294" name="n" /><variable citdl="_make_nxm_w()" line="1295" name="r" /></scope><scope doc="Simulates macro from OVS" ilk="function" line="1300" lineend="1304" name="NXM_IS_NX_REG" returns="o.is_reg" signature="NXM_IS_NX_REG(o)"><variable ilk="argument" name="o" /></scope><variable citdl="int" line="1334" name="NX_IP_FRAG_ANY" /><variable citdl="int" line="1335" name="NX_IP_FRAG_LATER" /><variable citdl="int" line="1355" name="NXT_PACKET_IN" /><scope classrefs="nicira_base of.ofp_packet_in" ilk="class" line="1356" lineend="1475" name="nxt_packet_in"><variable citdl="int" line="1357" name="subtype" /><variable attributes="protected" citdl="int" line="1358" name="_MIN_LENGTH" /><scope attributes="protected" ilk="function" line="1359" lineend="1369" name="_init" signature="_init(kw)"><variable citdl="nxt_packet_in" ilk="argument" name="self" /><variable ilk="argument" name="kw" /></scope><variable attributes="protected __instancevar__" line="1362" name="_buffer_id" /><variable attributes="__instancevar__" citdl="int" line="1363" name="reason" /><variable attributes="__instancevar__" line="1364" name="data" /><variable attributes="protected __instancevar__" citdl="kw.pop()" line="1365" name="_total_len" /><variable attributes="protected __instancevar__" citdl="nx_match()" line="1366" name="_match" /><scope attributes="protected" ilk="function" line="1371" lineend="1373" name="_validate" returns="str" signature="_validate()"><variable citdl="nxt_packet_in" ilk="argument" name="self" /></scope><scope attributes="__hidden__" ilk="function" line="1376" lineend="1377" name="in_port (property getter)" returns="self.match.of_in_port" signature="in_port (property getter)()"><variable citdl="nxt_packet_in" ilk="argument" name="self" /></scope><variable attributes="property" citdl="self.match.of_in_port" line="1376" name="in_port" /><scope attributes="__hidden__" ilk="function" line="1380" lineend="1383" name="match (property getter)" returns="nx_match()" signature="match (property getter)()"><variable citdl="nxt_packet_in" ilk="argument" name="self" /></scope><variable attributes="property" citdl="nx_match()" line="1380" name="match" /><scope attributes="__hidden__" ilk="function" line="1385" lineend="1386" name="match (property setter)" signature="match (property setter)(v)"><variable citdl="nxt_packet_in" ilk="argument" name="self" /><variable ilk="argument" name="v" /></scope><scope ilk="function" line="1388" lineend="1404" name="pack" returns="str" signature="pack()"><variable citdl="nxt_packet_in" ilk="argument" name="self" /><variable citdl="len()" line="1391" name="match_len" /><variable citdl="str" line="1393" name="packed" /></scope><scope attributes="__hidden__" ilk="function" line="1407" lineend="1414" name="packed_data (property getter)" returns="str" signature="packed_data (property getter)()"><variable citdl="nxt_packet_in" ilk="argument" name="self" /></scope><variable attributes="property" citdl="self.data.pack()" line="1407" name="packed_data" /><scope ilk="function" line="1416" lineend="1434" name="unpack" returns="tuple" signature="unpack(raw, offset=0)"><variable citdl="nxt_packet_in" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable citdl="_skip()" ilk="argument" name="offset" /><variable attributes="protected" citdl="int" line="1417" name="_offset" /><variable line="1418" name="length" /></scope><scope ilk="function" line="1436" lineend="1445" name="__len__" returns="int" signature="__len__()"><variable citdl="nxt_packet_in" ilk="argument" name="self" /><variable citdl="len()" line="1437" name="match_len" /><variable citdl="int" line="1438" name="l" /></scope><scope ilk="function" line="1447" lineend="1452" name="__eq__" returns="bool" signature="__eq__(other)"><variable citdl="nxt_packet_in" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope ilk="function" line="1454" lineend="1454" name="__ne__" returns="bool" signature="__ne__(other)"><variable citdl="nxt_packet_in" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope ilk="function" line="1456" lineend="1469" name="show" returns="str" signature="show(prefix=&apos;&apos;)"><variable citdl="nxt_packet_in" ilk="argument" name="self" /><variable citdl="str" ilk="argument" name="prefix" /><variable citdl="str" line="1457" name="outstr" /></scope><scope ilk="function" line="1471" lineend="1475" name="field" returns="i" signature="field(t)"><variable citdl="nxt_packet_in" ilk="argument" name="self" /><variable ilk="argument" name="t" /></scope></scope><scope classrefs="object" doc="A flexible match container&#xA;&#xA;This has some magic.  It acts as if it has properties for each&#xA;registered nxm_entry type.  For example, there&apos;s a NXM_OF_IP_SRC&#xA;nxm_entry type for the source IP address, so you can do:&#xA;&#xA;  m = nx_match()&#xA;  m.of_tcp_src = IPAddr(&quot;192.168.1.1&quot;)&#xA;&#xA;Since nxm_entries can have masks, you actually get a number of pseudo-&#xA;properties, by appending &quot;_mask&quot;, &quot;_with_mask&quot;, or &quot;_entry&quot;:&#xA;&#xA;  m.of_tcp_src_with_mask = (&quot;192.168.1.0&quot;, &quot;255.255.255.0&quot;)&#xA;  # or...&#xA;  m.of_tcp_src = &quot;192.168.1.0&quot;&#xA;  m.of_tcp_src_mask = &quot;255.255.255.0&quot;&#xA;  # or...&#xA;  m.of_tcp_src_entry = NXM_OF_IP_SRC(&quot;192.168.1.1&quot;, &quot;255.255.255.0&quot;)&#xA;&#xA;nxm_entries themselves may have magic.  For example, IP address&#xA;nxm_entries understand CIDR bits as part of the value, so you can do:&#xA;&#xA;  m.of_tcp_src = &quot;192.168.1.0/24&quot;&#xA;  print m.of_tcp_src&#xA;  &gt; NXM_OF_IP_SRC(192.168.1.0/255.255.255.0)&#xA;&#xA;*The order you add entries is significant*.  If you have an entry&#xA;with a prerequisite, you must add the prerequisite first.  It would be&#xA;really nice if nx_match could automatically adjust orderings to try to&#xA;satisfy nxm_entry prerequisties, and throw an exception if it&apos;s not&#xA;possible.  This is a TODO item." ilk="class" line="1478" lineend="1722" name="nx_match"><scope attributes="__ctor__" doc="Initialize this match&#xA;&#xA;You can initialize either from a list of parts or from a bunch of&#xA;key/value pairs which are just like a shortcut for setting individual&#xA;properties." ilk="function" line="1515" lineend="1526" name="__init__" signature="nx_match(*parts, **kw)"><variable citdl="nx_match" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="parts" /><variable attributes="kwargs" ilk="argument" name="kw" /></scope><variable attributes="protected __instancevar__" citdl="list()" line="1523" name="_parts" /><scope ilk="function" line="1528" lineend="1540" name="unpack" signature="unpack(raw, offset, avail)"><variable citdl="nx_match" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable ilk="argument" name="offset" /><variable ilk="argument" name="avail" /><variable line="1531" name="stop" /><variable attributes="protected" line="1533" name="_o" /><variable line="1534" name="entry" /></scope><scope ilk="function" line="1542" lineend="1543" name="pack" returns="__builtins__.str.join()" signature="pack(omittable=False)"><variable citdl="nx_match" ilk="argument" name="self" /><variable citdl="False" ilk="argument" name="omittable" /></scope><scope ilk="function" line="1545" lineend="1547" name="__eq__" returns="bool" signature="__eq__(other)"><variable citdl="nx_match" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope ilk="function" line="1549" lineend="1553" name="clone" signature="clone()"><variable citdl="nx_match" ilk="argument" name="self" /><variable citdl="" line="1550" name="n" /></scope><scope ilk="function" line="1555" lineend="1556" name="__str__" returns="__builtins__.str.join()" signature="__str__()"><variable citdl="nx_match" ilk="argument" name="self" /></scope><scope ilk="function" line="1558" lineend="1559" name="show" returns="str" signature="show(prefix=&apos;&apos;)"><variable citdl="nx_match" ilk="argument" name="self" /><variable citdl="str" ilk="argument" name="prefix" /></scope><scope attributes="protected __hidden__" ilk="function" line="1562" lineend="1568" name="_map (property getter)" returns="dict" signature="_map (property getter)()"><variable citdl="nx_match" ilk="argument" name="self" /></scope><variable attributes="property protected" citdl="dict" line="1562" name="_map" /><variable attributes="protected __instancevar__" citdl="dict" line="1564" name="_cache" /><scope ilk="function" line="1570" lineend="1571" name="__len__" returns="sum()" signature="__len__()"><variable citdl="nx_match" ilk="argument" name="self" /></scope><scope ilk="function" line="1573" lineend="1574" name="__getitem__" signature="__getitem__(index)"><variable citdl="nx_match" ilk="argument" name="self" /><variable ilk="argument" name="index" /></scope><scope doc="Remove an entry" ilk="function" line="1576" lineend="1586" name="remove" signature="remove(t)"><variable citdl="nx_match" ilk="argument" name="self" /><variable citdl="t._nxm_type" ilk="argument" name="t" /></scope><scope doc="Returns nxm_entry of given type" ilk="function" line="1588" lineend="1594" name="find" returns="self._map.get()" signature="find(t)"><variable citdl="nx_match" ilk="argument" name="self" /><variable citdl="t._nxm_type" ilk="argument" name="t" /></scope><scope doc="Returns index of nxm_entry of given type" ilk="function" line="1596" lineend="1604" name="index" returns="self._parts.find()" signature="index(t)"><variable citdl="nx_match" ilk="argument" name="self" /><variable citdl="t._nxm_type" ilk="argument" name="t" /></scope><scope attributes="protected" ilk="function" line="1606" lineend="1607" name="_dirty" signature="_dirty()"><variable citdl="nx_match" ilk="argument" name="self" /></scope><scope ilk="function" line="1609" lineend="1615" name="insert" signature="insert(position, item)"><variable citdl="nx_match" ilk="argument" name="self" /><variable citdl="find()" ilk="argument" name="position" /><variable ilk="argument" name="item" /></scope><scope ilk="function" line="1617" lineend="1623" name="insert_after" signature="insert_after(position, item)"><variable citdl="nx_match" ilk="argument" name="self" /><variable citdl="find()" ilk="argument" name="position" /><variable ilk="argument" name="item" /></scope><scope doc="Add another nxm_entry to this match" ilk="function" line="1625" lineend="1635" name="append" signature="append(item)"><variable citdl="nx_match" ilk="argument" name="self" /><variable ilk="argument" name="item" /></scope><scope ilk="function" line="1637" lineend="1638" name="__iadd__" signature="__iadd__(other)"><variable citdl="nx_match" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope attributes="protected" ilk="function" line="1641" lineend="1661" name="_fixname" returns="tuple" signature="_fixname()"><variable citdl="name.upper()" ilk="argument" name="name" /><variable citdl="False" line="1646" name="is_mask" /><variable citdl="True" line="1649" name="with_mask" /><variable citdl="True" line="1656" name="is_entry" /><variable citdl="_nxm_name_to_type.get()" line="1658" name="nxt" /></scope><scope ilk="function" line="1663" lineend="1679" name="__getattr__" returns="tuple" signature="__getattr__(name)"><variable citdl="nx_match" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable line="1664" name="nxt" /><variable line="1664" name="with_mask" /><variable line="1664" name="is_mask" /><variable line="1664" name="is_entry" /><variable line="1675" name="v" /></scope><scope ilk="function" line="1681" lineend="1722" name="__setattr__" returns="object.__setattr__()" signature="__setattr__(name, value)"><variable citdl="nx_match" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable ilk="argument" name="value" /><variable line="1685" name="nxt" /><variable line="1685" name="with_mask" /><variable line="1685" name="is_mask" /><variable line="1685" name="is_entry" /><variable citdl="find()" line="1691" name="entry" /></scope></scope><variable attributes="protected" line="1751" name="_old_unpacker" /><scope attributes="protected" ilk="function" line="1753" lineend="1764" name="_unpack_nx_vendor" returns="tuple" signature="_unpack_nx_vendor(raw, offset)"><import line="1754" module="pox.lib.util" symbol="hexdump" /><variable ilk="argument" name="raw" /><variable ilk="argument" name="offset" /><variable line="1755" name="v" /><variable line="1758" name="subtype" /><variable citdl="nxt_packet_in" line="1760" name="npi" /></scope><scope attributes="protected" ilk="function" line="1767" lineend="1771" name="_init_unpacker" signature="_init_unpacker()"><import line="1769" module="pox.openflow.of_01" symbol="unpackers" /><variable attributes="protected" line="1770" name="_old_unpacker" /></scope><variable attributes="protected" line="1774" name="_old_handler" /><scope attributes="protected" ilk="function" line="1778" lineend="1784" name="_handle_VENDOR" signature="_handle_VENDOR(con, msg)"><variable ilk="argument" name="con" /><variable ilk="argument" name="msg" /><variable citdl="con.ofnexus.raiseEventNoErrors()" line="1780" name="e" /></scope><scope attributes="protected" ilk="function" line="1787" lineend="1793" name="_init_handler" signature="_init_handler()"><import line="1789" module="pox.openflow.of_01" symbol="handlerMap" /><import line="1789" module="pox.openflow.of_01" symbol="_set_handlers" /><variable attributes="protected" citdl="handlerMap.get()" line="1791" name="_old_handler" /></scope><scope classrefs="object" doc="Nicira extension component" ilk="class" line="1796" lineend="1800" name="NX"><variable citdl="False" line="1800" name="convert_packet_in" /></scope><scope ilk="function" line="1803" lineend="1810" name="launch" signature="launch(convert_packet_in=False)"><variable citdl="False" ilk="argument" name="convert_packet_in" /></scope></scope>