<scope doc="This is an object-orient plotting library." ilk="blob" lang="Python" name="__init__" src="/usr/lib/pymodules/python2.7/matplotlib/__init__.py"><import line="100" module="__future__" symbol="generators" /><import line="105" module="os" /><import line="105" module="re" /><import line="105" module="shutil" /><import line="105" module="subprocess" /><import line="105" module="sys" /><import line="105" module="warnings" /><import line="106" module="distutils.sysconfig" /><import line="107" module="distutils.version" /><import line="132" module="sys" /><import line="132" module="os" /><import line="132" module="tempfile" /><import line="134" module="matplotlib.rcsetup" symbol="defaultParams" /><import line="134" module="matplotlib.rcsetup" symbol="validate_backend" /><import line="134" module="matplotlib.rcsetup" symbol="validate_toolbar" /><import line="134" module="matplotlib.rcsetup" symbol="validate_cairo_format" /><import line="155" module="numpy" /><import line="156" module="distutils" symbol="version" /><import line="799" module="locale" /><variable citdl="str" line="102" name="__version__" /><variable citdl="str" line="103" name="__version__numpy__" /><variable attributes="protected" citdl="bool" line="140" name="_python24" /><variable attributes="protected" citdl="True" line="144" name="_havedate" /><variable citdl="version.LooseVersion()" line="157" name="expected_version" /><variable citdl="version.LooseVersion()" line="158" name="found_version" /><scope ilk="function" line="166" lineend="170" name="is_string_like" returns="int" signature="is_string_like(obj)"><variable ilk="argument" name="obj" /></scope><scope attributes="protected" doc="p is a string pointing to a putative writable dir -- return True p&#xA;is such a string, else False" ilk="function" line="173" lineend="185" name="_is_writable_dir" returns="bool" signature="_is_writable_dir(p)"><variable ilk="argument" name="p" /><variable citdl="tempfile.TemporaryFile()" line="181" name="t" /></scope><scope doc="A class to handle reporting.  Set the fileo attribute to any file&#xA;instance to handle the output.  Default is sys.stdout" ilk="class" line="187" lineend="265" name="Verbose"><variable citdl="tuple" line="192" name="levels" /><variable citdl="dict()" line="193" name="vald" /><variable attributes="protected" citdl="list" line="197" name="_commandLineVerbose" /><scope attributes="__ctor__" ilk="function" line="203" lineend="205" name="__init__" signature="Verbose()"><variable citdl="Verbose" ilk="argument" name="self" /></scope><variable attributes="__instancevar__" citdl="sys.stdout" line="205" name="fileo" /><scope doc="set the verbosity to one of the Verbose.levels strings" ilk="function" line="207" lineend="214" name="set_level" signature="set_level(level)"><variable citdl="Verbose" ilk="argument" name="self" /><variable citdl="list" ilk="argument" name="level" /></scope><variable attributes="__instancevar__" citdl="list" line="214" name="level" /><scope ilk="function" line="216" lineend="229" name="set_fileo" signature="set_fileo(fname)"><variable citdl="Verbose" ilk="argument" name="self" /><variable ilk="argument" name="fname" /><variable citdl="dict" line="217" name="std" /><variable citdl="file()" line="225" name="fileo" /></scope><scope doc="print message s to self.fileo if self.level&gt;=level.  Return&#xA;value indicates whether a message was issued&#xA;" ilk="function" line="231" lineend="240" name="report" returns="bool" signature="report(s, level=&apos;helpful&apos;)"><variable citdl="Verbose" ilk="argument" name="self" /><variable ilk="argument" name="s" /><variable citdl="str" ilk="argument" name="level" /></scope><scope doc="return a callable function that wraps func and reports it&#xA;output through the verbose handler if current verbosity level&#xA;is higher than level&#xA;&#xA;if always is True, the report will occur on every function&#xA;call; otherwise only on the first time the function is called" ilk="function" line="242" lineend="261" name="wrap" returns="Verbose.wrap.wrapper" signature="wrap(fmt, func, level=&apos;helpful&apos;, always=True)"><variable citdl="Verbose" ilk="argument" name="self" /><variable ilk="argument" name="fmt" /><variable ilk="argument" name="func" /><variable citdl="str" ilk="argument" name="level" /><variable citdl="True" ilk="argument" name="always" /><scope ilk="function" line="252" lineend="258" name="wrapper" returns="func()" signature="wrapper(*args, **kwargs)"><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kwargs" /><variable citdl="func()" line="253" name="ret" /><variable citdl="report()" line="256" name="spoke" /><variable attributes="protected" citdl="False" line="257" name="_spoke" /><variable citdl="func.__doc__" line="260" name="__doc__" /></scope></scope><scope doc="return true if self.level is &gt;= level" ilk="function" line="263" lineend="265" name="ge" returns="bool" signature="ge(level)"><variable citdl="Verbose" ilk="argument" name="self" /><variable ilk="argument" name="level" /></scope></scope><variable citdl="Verbose" line="268" name="verbose" /><scope ilk="function" line="271" lineend="279" name="checkdep_dvipng" signature="checkdep_dvipng()"><variable citdl="subprocess.Popen()" line="273" name="s" /><variable line="275" name="line" /><variable line="276" name="v" /></scope><scope ilk="function" line="281" lineend="292" name="checkdep_ghostscript" returns="list" signature="checkdep_ghostscript()"><variable citdl="list" line="284" name="command_args" /><variable citdl="subprocess.Popen()" line="287" name="s" /><variable citdl="list" line="289" name="v" /></scope><scope ilk="function" line="294" lineend="304" name="checkdep_tex" returns="match.group()" signature="checkdep_tex()"><variable citdl="subprocess.Popen()" line="296" name="s" /><variable line="298" name="line" /><variable citdl="str" line="299" name="pattern" /><variable citdl="re.search()" line="300" name="match" /><variable citdl="match.group()" line="301" name="v" /></scope><scope ilk="function" line="306" lineend="315" name="checkdep_pdftops" signature="checkdep_pdftops()"><variable citdl="subprocess.Popen()" line="308" name="s" /><variable line="312" name="v" /></scope><scope ilk="function" line="317" lineend="327" name="checkdep_inkscape" signature="checkdep_inkscape()"><variable citdl="subprocess.Popen()" line="319" name="s" /><variable line="323" name="v" /></scope><scope ilk="function" line="329" lineend="339" name="checkdep_xmllint" signature="checkdep_xmllint()"><variable citdl="subprocess.Popen()" line="331" name="s" /><variable line="335" name="v" /></scope><scope doc="return True if a is greater than or equal to b" ilk="function" line="341" lineend="348" name="compare_versions" returns="bool" signature="compare_versions(a, b)"><variable citdl="distutils.version.LooseVersion()" ilk="argument" name="a" /><variable citdl="distutils.version.LooseVersion()" ilk="argument" name="b" /></scope><scope ilk="function" line="350" lineend="384" name="checkdep_ps_distiller" returns="bool" signature="checkdep_ps_distiller(s)"><variable ilk="argument" name="s" /><variable citdl="False" line="354" name="flag" /><variable citdl="str" line="355" name="gs_req" /><variable citdl="str" line="356" name="gs_sugg" /><variable citdl="checkdep_ghostscript()" line="357" name="gs_v" /><variable citdl="str" line="368" name="pdftops_req" /><variable citdl="str" line="369" name="pdftops_req_alt" /><variable citdl="checkdep_pdftops()" line="370" name="pdftops_v" /></scope><scope ilk="function" line="386" lineend="424" name="checkdep_usetex" returns="bool" signature="checkdep_usetex(s)"><variable ilk="argument" name="s" /><variable citdl="str" line="390" name="tex_req" /><variable citdl="str" line="391" name="gs_req" /><variable citdl="str" line="392" name="gs_sugg" /><variable citdl="str" line="393" name="dvipng_req" /><variable citdl="False" line="394" name="flag" /><variable citdl="checkdep_tex()" line="396" name="tex_v" /><variable citdl="checkdep_dvipng()" line="404" name="dvipng_v" /><variable citdl="checkdep_ghostscript()" line="412" name="gs_v" /></scope><scope attributes="protected" doc="Find user&apos;s home directory if possible.&#xA;Otherwise raise error.&#xA;&#xA;:see:  http://mail.python.org/pipermail/python-list/2005-February/263921.html" ilk="function" line="427" lineend="448" name="_get_home" returns="str" signature="_get_home()"><variable citdl="os.path.expanduser()" line="433" name="path" /></scope><variable citdl="verbose.wrap()" line="452" name="get_home" /><scope attributes="protected" doc="Return the string representing the configuration dir.&#xA;&#xA;default is HOME/.matplotlib.  you can override this with the&#xA;MPLCONFIGDIR environment variable" ilk="function" line="454" lineend="482" name="_get_configdir" returns="os.path.join()" signature="_get_configdir()"><variable citdl="os.environ.get()" line="462" name="configdir" /><variable citdl="get_home()" line="470" name="h" /><variable citdl="os.path.join()" line="471" name="p" /></scope><variable citdl="verbose.wrap()" line="483" name="get_configdir" /><scope attributes="protected" doc="get the path to matplotlib data" ilk="function" line="486" lineend="525" name="_get_data_path" returns="str" signature="_get_data_path()"><import line="503" module="matplotlib.afm" /><variable citdl="os.path.join()" line="490" name="path" /><variable citdl="os.path.dirname()" line="510" name="exe_path" /></scope><scope attributes="protected" ilk="function" line="527" lineend="530" name="_get_data_path_cached" signature="_get_data_path_cached()" /><variable citdl="verbose.wrap()" line="532" name="get_data_path" /><scope doc="get_example_data is deprecated -- use matplotlib.cbook.get_sample_data instead" ilk="function" line="537" lineend="541" name="get_example_data" signature="get_example_data(fname)"><variable ilk="argument" name="fname" /></scope><scope ilk="function" line="544" lineend="557" name="get_py2exe_datafiles" returns="d.items()" signature="get_py2exe_datafiles()"><variable citdl="get_data_path()" line="545" name="datapath" /><variable line="546" name="head" /><variable line="546" name="tail" /><variable citdl="dict" line="547" name="d" /><variable citdl="list" line="553" name="files" /><variable citdl="root.replace()" line="554" name="root" /></scope><scope doc="Return the path to the rc file&#xA;&#xA;Search order:&#xA;&#xA; * current working dir&#xA; * environ var MATPLOTLIBRC&#xA; * HOME/.matplotlib/matplotlibrc&#xA; * MATPLOTLIBDATA/matplotlibrc&#xA;&#xA;" ilk="function" line="560" lineend="612" name="matplotlib_fname" returns="os.path.join()" signature="matplotlib_fname()"><variable citdl="os.path.join()" line="574" name="oldname" /><variable citdl="get_home()" line="582" name="home" /><variable citdl="get_configdir()" line="585" name="configdir" /><variable citdl="os.path.join()" line="586" name="newname" /><variable citdl="os.path.join()" line="594" name="fname" /><variable citdl="str" line="598" name="path" /></scope><variable attributes="protected" citdl="dict" line="615" name="_deprecated_map" /><variable attributes="protected" citdl="dict" line="625" name="_deprecated_ignore_map" /><scope classrefs="dict" doc="A dictionary object including validation&#xA;&#xA;validating functions are defined and associated with rc parameters in&#xA;:mod:`matplotlib.rcsetup`" ilk="class" line="634" lineend="687" name="RcParams"><variable citdl="dict()" line="643" name="validate" /><variable citdl="str" line="645" name="msg_depr" /><variable citdl="str" line="646" name="msg_depr_ignore" /><scope ilk="function" line="648" lineend="662" name="__setitem__" signature="__setitem__(key, val)"><variable citdl="RcParams" ilk="argument" name="self" /><variable ilk="argument" name="key" /><variable ilk="argument" name="val" /><variable line="651" name="alt" /><variable line="658" name="cval" /></scope><scope ilk="function" line="664" lineend="673" name="__getitem__" returns="dict.__getitem__()" signature="__getitem__(key)"><variable citdl="RcParams" ilk="argument" name="self" /><variable ilk="argument" name="key" /><variable line="666" name="alt" /></scope><scope doc="Return sorted list of keys." ilk="function" line="675" lineend="681" name="keys" returns="dict.keys()" signature="keys()"><variable citdl="RcParams" ilk="argument" name="self" /><variable citdl="dict.keys()" line="679" name="k" /></scope><scope doc="Return values in order of sorted keys." ilk="function" line="683" lineend="687" name="values" returns="list" signature="values()"><variable citdl="RcParams" ilk="argument" name="self" /></scope></scope><scope doc="Return the default params updated from the values in the rc file" ilk="function" line="689" lineend="770" name="rc_params" returns="RcParams" signature="rc_params(fail_on_error=False)"><variable citdl="False" ilk="argument" name="fail_on_error" /><variable citdl="matplotlib_fname()" line="692" name="fname" /><variable citdl="str" line="695" name="message" /><variable citdl="RcParams" line="696" name="ret" /><variable citdl="int" line="701" name="cnt" /><variable citdl="dict" line="702" name="rc_temp" /><variable line="705" name="strippedline" /><variable citdl="strippedline.split()" line="707" name="tup" /><variable citdl="key.strip()" line="713" name="key" /><variable citdl="val.strip()" line="714" name="val" /><variable line="724" name="line" /></scope><variable citdl="rc_params()" line="774" name="rcParams" /><variable attributes="protected" citdl="os.path.realpath()" line="782" name="_basedir" /><variable attributes="protected" line="782" name="_fname" /><variable attributes="protected" citdl="os.path.join()" line="787" name="_fullpath" /><variable citdl="rcParams.copy()" line="790" name="rcParamsOrig" /><variable citdl="RcParams" line="792" name="rcParamsDefault" /><scope doc="Set the current rc params.  Group is the grouping for the rc, eg.&#xA;for ``lines.linewidth`` the group is ``lines``, for&#xA;``axes.facecolor``, the group is ``axes``, and so on.  Group may&#xA;also be a list or tuple of group names, eg. (*xtick*, *ytick*).&#xA;*kwargs* is a dictionary attribute name/value pairs, eg::&#xA;&#xA;  rc(&apos;lines&apos;, linewidth=2, color=&apos;r&apos;)&#xA;&#xA;sets the current rc params and is equivalent to::&#xA;&#xA;  rcParams[&apos;lines.linewidth&apos;] = 2&#xA;  rcParams[&apos;lines.color&apos;] = &apos;r&apos;&#xA;&#xA;The following aliases are available to save typing for interactive&#xA;users:&#xA;&#xA;=====   =================&#xA;Alias   Property&#xA;=====   =================&#xA;&apos;lw&apos;    &apos;linewidth&apos;&#xA;&apos;ls&apos;    &apos;linestyle&apos;&#xA;&apos;c&apos;     &apos;color&apos;&#xA;&apos;fc&apos;    &apos;facecolor&apos;&#xA;&apos;ec&apos;    &apos;edgecolor&apos;&#xA;&apos;mew&apos;   &apos;markeredgewidth&apos;&#xA;&apos;aa&apos;    &apos;antialiased&apos;&#xA;=====   =================&#xA;&#xA;Thus you could abbreviate the above rc command as::&#xA;&#xA;      rc(&apos;lines&apos;, lw=2, c=&apos;r&apos;)&#xA;&#xA;&#xA;Note you can use python&apos;s kwargs dictionary facility to store&#xA;dictionaries of default parameters.  Eg, you can customize the&#xA;font rc as follows::&#xA;&#xA;  font = {&apos;family&apos; : &apos;monospace&apos;,&#xA;          &apos;weight&apos; : &apos;bold&apos;,&#xA;          &apos;size&apos;   : &apos;larger&apos;}&#xA;&#xA;  rc(&apos;font&apos;, **font)  # pass in the font dict as kwargs&#xA;&#xA;This enables you to easily switch between several configurations.&#xA;Use :func:`~matplotlib.pyplot.rcdefaults` to restore the default&#xA;rc params after changes." ilk="function" line="802" lineend="872" name="rc" signature="rc(group, **kwargs)"><variable citdl="tuple" ilk="argument" name="group" /><variable attributes="kwargs" ilk="argument" name="kwargs" /><variable citdl="dict" line="852" name="aliases" /><variable citdl="aliases.get()" line="866" name="name" /><variable citdl="str" line="867" name="key" /></scope><scope doc="Restore the default rc params - these are not the params loaded by&#xA;the rc file, but mpl&apos;s internal params.  See rc_file_defaults for&#xA;reloading the default params from the rc file" ilk="function" line="874" lineend="880" name="rcdefaults" signature="rcdefaults()" /><scope doc="Restore the default rc params from the original matplotlib rc that&#xA;was loaded" ilk="function" line="882" lineend="887" name="rc_file_defaults" signature="rc_file_defaults()" /><variable attributes="protected" citdl="str" line="889" name="_use_error_msg" /><scope doc="Set the matplotlib backend to one of the known backends.&#xA;&#xA;The argument is case-insensitive.  For the Cairo backend,&#xA;the argument can have an extension to indicate the type of&#xA;output.  Example:&#xA;&#xA;    use(&apos;cairo.pdf&apos;)&#xA;&#xA;will specify a default of pdf output generated by Cairo.&#xA;&#xA;.. note::&#xA;&#xA;    This function must be called *before* importing pyplot for&#xA;    the first time; or, if you are not using pyplot, it must be called&#xA;    before importing matplotlib.backends.  If warn is True, a warning&#xA;    is issued if you try and call this after pylab or pyplot have been&#xA;    loaded.  In certain black magic use cases, e.g.&#xA;    :func:`pyplot.switch_backends`, we are doing the reloading necessary to&#xA;    make the backend switch work (in some cases, e.g. pure image&#xA;    backends) so one can set warn=False to supporess the warnings.&#xA;&#xA;To find out which backend is currently set, see&#xA;:func:`matplotlib.get_backend`.&#xA;" ilk="function" line="895" lineend="937" name="use" signature="use(arg, warn=True)"><variable citdl="arg.lower()" ilk="argument" name="arg" /><variable citdl="True" ilk="argument" name="warn" /><variable citdl="validate_backend()" line="926" name="name" /><variable citdl="arg.split()" line="930" name="be_parts" /></scope><scope doc="Returns the current backend." ilk="function" line="939" lineend="941" name="get_backend" signature="get_backend()" /><scope doc="Set interactive mode to boolean b.&#xA;&#xA;If b is True, then draw after every plotting command, eg, after xlabel" ilk="function" line="943" lineend="949" name="interactive" signature="interactive(b)"><variable ilk="argument" name="b" /></scope><scope doc="Return true if plot mode is interactive" ilk="function" line="951" lineend="954" name="is_interactive" signature="is_interactive()"><variable line="953" name="b" /></scope><scope doc="Return true if focus maintenance under TkAgg on win32 is on.&#xA;This currently works only for python.exe and IPython.exe.&#xA;Both IDLE and Pythonwin.exe fail badly when tk_window_focus is on." ilk="function" line="956" lineend="962" name="tk_window_focus" returns="bool" signature="tk_window_focus()" /><variable citdl="list" line="977" name="default_test_modules" /><scope doc="run the matplotlib test suite" ilk="function" line="997" lineend="1022" name="test" returns="nose.run()" signature="test(verbosity=1)"><import line="1002" module="nose" /><import line="1003" module="nose.plugins.builtin" /><import line="1004" module="testing.noseclasses" symbol="KnownFailure" /><import line="1005" module="nose.plugins.manager" symbol="PluginManager" /><variable citdl="int" ilk="argument" name="verbosity" /><variable line="999" name="old_backend" /><variable citdl="list" line="1008" name="plugins" /><variable citdl="PluginManager()" line="1012" name="manager" /><variable citdl="nose.config.Config()" line="1013" name="config" /><variable citdl="nose.run()" line="1015" name="success" /><variable citdl="False" line="1024" name="__test__" /></scope></scope>