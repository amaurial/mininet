<scope ilk="blob" lang="Python" name="ImageCms" src="/usr/lib/python2.7/dist-packages/PIL/ImageCms.py"><import line="82" module="Image" /><import line="83" module="_imagingcms" /><import line="772" module="ImageCms" /><import line="773" module="string" /><variable citdl="str" line="18" name="DESCRIPTION" /><variable citdl="str" line="78" name="VERSION" /><variable citdl="_imagingcms" line="85" name="core" /><variable citdl="int" line="90" name="INTENT_PERCEPTUAL" /><variable citdl="int" line="91" name="INTENT_RELATIVE_COLORIMETRIC" /><variable citdl="int" line="92" name="INTENT_SATURATION" /><variable citdl="int" line="93" name="INTENT_ABSOLUTE_COLORIMETRIC" /><variable citdl="int" line="95" name="DIRECTION_INPUT" /><variable citdl="int" line="96" name="DIRECTION_OUTPUT" /><variable citdl="int" line="97" name="DIRECTION_PROOF" /><variable citdl="dict" line="102" name="FLAGS" /><variable attributes="protected" citdl="int" line="123" name="_MAX_FLAG" /><scope ilk="class" line="135" lineend="155" name="ImageCmsProfile"><scope attributes="__ctor__" ilk="function" line="137" lineend="145" name="__init__" signature="ImageCmsProfile(profile)"><variable citdl="ImageCmsProfile" ilk="argument" name="self" /><variable ilk="argument" name="profile" /></scope><scope attributes="protected" ilk="function" line="147" lineend="155" name="_set" signature="_set(profile, filename=None)"><variable citdl="ImageCmsProfile" ilk="argument" name="self" /><variable ilk="argument" name="profile" /><variable ilk="argument" name="filename" /></scope><variable attributes="__instancevar__" line="148" name="profile" /><variable attributes="__instancevar__" line="149" name="filename" /><variable attributes="__instancevar__" citdl="profile.product_name" line="151" name="product_name" /><variable attributes="__instancevar__" citdl="profile.product_info" line="152" name="product_info" /></scope><scope classrefs="Image.ImagePointHandler" ilk="class" line="161" lineend="199" name="ImageCmsTransform"><scope attributes="__ctor__" ilk="function" line="163" lineend="182" name="__init__" signature="ImageCmsTransform(input, output, input_mode, output_mode, intent=INTENT_PERCEPTUAL, proof=None, proof_intent=INTENT_ABSOLUTE_COLORIMETRIC, flags=0)"><variable citdl="ImageCmsTransform" ilk="argument" name="self" /><variable ilk="argument" name="input" /><variable ilk="argument" name="output" /><variable ilk="argument" name="input_mode" /><variable ilk="argument" name="output_mode" /><variable citdl="int" ilk="argument" name="intent" /><variable ilk="argument" name="proof" /><variable citdl="int" ilk="argument" name="proof_intent" /><variable citdl="int" ilk="argument" name="flags" /></scope><variable attributes="__instancevar__" citdl="core.buildTransform()" line="167" name="transform" /><variable attributes="__instancevar__" line="181" name="input_mode" /><variable attributes="__instancevar__" line="182" name="output_mode" /><scope ilk="function" line="184" lineend="185" name="point" returns="self.apply()" signature="point(im)"><variable citdl="ImageCmsTransform" ilk="argument" name="self" /><variable ilk="argument" name="im" /></scope><scope ilk="function" line="187" lineend="192" name="apply" returns="Image.new()" signature="apply(im, imOut=None)"><variable citdl="ImageCmsTransform" ilk="argument" name="self" /><variable ilk="argument" name="im" /><variable citdl="Image.new()" ilk="argument" name="imOut" /><variable citdl="self.transform.apply()" line="191" name="result" /></scope><scope ilk="function" line="194" lineend="199" name="apply_in_place" signature="apply_in_place(im)"><variable citdl="ImageCmsTransform" ilk="argument" name="self" /><variable ilk="argument" name="im" /><variable citdl="self.transform.apply()" line="198" name="result" /></scope></scope><scope ilk="function" line="205" lineend="220" name="get_display_profile" returns="ImageCmsProfile" signature="get_display_profile(handle=None)"><import line="206" module="sys" /><import line="208" module="ImageWin" /><variable ilk="argument" name="handle" /><variable citdl="core.get_display_profile_win32()" line="210" name="profile" /><variable citdl="_imagingcms.get_display_profile" line="215" name="get" /></scope><scope classrefs="Exception" ilk="class" line="229" lineend="230" name="PyCMSError" /><scope doc="ImageCms.profileToProfile(im, inputProfile, outputProfile,&#xA;    [renderingIntent], [outputMode], [inPlace])&#xA;&#xA;Returns either None or a new PIL image object, depending on value of&#xA;inPlace (see below).&#xA;&#xA;im = an open PIL image object (i.e. Image.new(...) or&#xA;    Image.open(...), etc.)&#xA;inputProfile = string, as a valid filename path to the ICC input&#xA;    profile you wish to use for this image, or a profile object&#xA;outputProfile = string, as a valid filename path to the ICC output&#xA;    profile you wish to use for this image, or a profile object&#xA;renderingIntent = integer (0-3) specifying the rendering intent you&#xA;    wish to use for the transform&#xA;    INTENT_PERCEPTUAL =           0 (DEFAULT) (ImageCms.INTENT_PERCEPTUAL)&#xA;    INTENT_RELATIVE_COLORIMETRIC =1 (ImageCms.INTENT_RELATIVE_COLORIMETRIC)&#xA;    INTENT_SATURATION =           2 (ImageCms.INTENT_SATURATION)&#xA;    INTENT_ABSOLUTE_COLORIMETRIC =3 (ImageCms.INTENT_ABSOLUTE_COLORIMETRIC)&#xA;&#xA;    see the pyCMS documentation for details on rendering intents and&#xA;    what they do.&#xA;outputMode = a valid PIL mode for the output image (i.e. &quot;RGB&quot;, &quot;CMYK&quot;,&#xA;    etc.).  Note: if rendering the image &quot;inPlace&quot;, outputMode MUST be&#xA;    the same mode as the input, or omitted completely.  If omitted, the&#xA;    outputMode will be the same as the mode of the input image (im.mode)&#xA;inPlace = BOOL (1 = TRUE, None or 0 = FALSE).  If TRUE, the original&#xA;    image is modified in-place, and None is returned.  If FALSE&#xA;    (default), a new Image object is returned with the transform&#xA;    applied.&#xA;flags = integer (0-...) specifying additional flags&#xA;&#xA;If the input or output profiles specified are not valid filenames, a&#xA;PyCMSError will be raised.  If inPlace == TRUE and outputMode != im.mode,&#xA;a PyCMSError will be raised.  If an error occurs during application of&#xA;the profiles, a PyCMSError will be raised.  If outputMode is not a mode&#xA;supported by the outputProfile (or by pyCMS), a PyCMSError will be&#xA;raised.&#xA;&#xA;This function applies an ICC transformation to im from inputProfile&apos;s&#xA;color space to outputProfile&apos;s color space using the specified rendering&#xA;intent to decide how to handle out-of-gamut colors.&#xA;&#xA;OutputMode can be used to specify that a color mode conversion is to&#xA;be done using these profiles, but the specified profiles must be able&#xA;to handle that mode.  I.e., if converting im from RGB to CMYK using&#xA;profiles, the input profile must handle RGB data, and the output&#xA;profile must handle CMYK data.&#xA;" ilk="function" line="236" lineend="313" name="profileToProfile" returns="transform.apply()" signature="profileToProfile(im, inputProfile, outputProfile, renderingIntent=INTENT_PERCEPTUAL, outputMode=None, inPlace=0, flags=0)"><variable ilk="argument" name="im" /><variable citdl="ImageCmsProfile" ilk="argument" name="inputProfile" /><variable citdl="ImageCmsProfile" ilk="argument" name="outputProfile" /><variable citdl="int" ilk="argument" name="renderingIntent" /><variable citdl="im.mode" ilk="argument" name="outputMode" /><variable citdl="int" ilk="argument" name="inPlace" /><variable citdl="int" ilk="argument" name="flags" /><variable citdl="ImageCmsTransform" line="302" name="transform" /><variable citdl="transform.apply()" line="307" name="imOut" /></scope><scope doc="ImageCms.getOpenProfile(profileFilename)&#xA;&#xA;Returns a CmsProfile class object.&#xA;&#xA;profileFilename = string, as a valid filename path to the ICC profile&#xA;    you wish to open, or a file-like object.&#xA;&#xA;The PyCMSProfile object can be passed back into pyCMS for use in creating&#xA;transforms and such (as in ImageCms.buildTransformFromOpenProfiles()).&#xA;&#xA;If profileFilename is not a vaild filename for an ICC profile, a&#xA;PyCMSError will be raised.&#xA;" ilk="function" line="318" lineend="338" name="getOpenProfile" returns="ImageCmsProfile" signature="ImageCms.getOpenProfile(profileFilename)"><variable ilk="argument" name="profileFilename" /></scope><scope doc="ImageCms.buildTransform(inputProfile, outputProfile, inMode, outMode,&#xA;    [renderingIntent])&#xA;&#xA;Returns a CmsTransform class object.&#xA;&#xA;inputProfile = string, as a valid filename path to the ICC input&#xA;    profile you wish to use for this transform, or a profile object&#xA;outputProfile = string, as a valid filename path to the ICC output&#xA;    profile you wish to use for this transform, or a profile object&#xA;inMode = string, as a valid PIL mode that the appropriate profile also&#xA;    supports (i.e. &quot;RGB&quot;, &quot;RGBA&quot;, &quot;CMYK&quot;, etc.)&#xA;outMode = string, as a valid PIL mode that the appropriate profile also&#xA;    supports (i.e. &quot;RGB&quot;, &quot;RGBA&quot;, &quot;CMYK&quot;, etc.)&#xA;renderingIntent = integer (0-3) specifying the rendering intent you&#xA;    wish to use for the transform&#xA;    INTENT_PERCEPTUAL =           0 (DEFAULT) (ImageCms.INTENT_PERCEPTUAL)&#xA;    INTENT_RELATIVE_COLORIMETRIC =1 (ImageCms.INTENT_RELATIVE_COLORIMETRIC)&#xA;    INTENT_SATURATION =           2 (ImageCms.INTENT_SATURATION)&#xA;    INTENT_ABSOLUTE_COLORIMETRIC =3 (ImageCms.INTENT_ABSOLUTE_COLORIMETRIC)&#xA;    see the pyCMS documentation for details on rendering intents and&#xA;    what they do.&#xA;flags = integer (0-...) specifying additional flags&#xA;&#xA;If the input or output profiles specified are not valid filenames, a&#xA;PyCMSError will be raised.  If an error occurs during creation of the&#xA;transform, a PyCMSError will be raised.&#xA;&#xA;If inMode or outMode are not a mode supported by the outputProfile (or&#xA;by pyCMS), a PyCMSError will be raised.&#xA;&#xA;This function builds and returns an ICC transform from the inputProfile&#xA;to the outputProfile using the renderingIntent to determine what to do&#xA;with out-of-gamut colors.  It will ONLY work for converting images that&#xA;are in inMode to images that are in outMode color format (PIL mode,&#xA;i.e. &quot;RGB&quot;, &quot;RGBA&quot;, &quot;CMYK&quot;, etc.).&#xA;&#xA;Building the transform is a fair part of the overhead in&#xA;ImageCms.profileToProfile(), so if you&apos;re planning on converting multiple&#xA;images using the same input/output settings, this can save you time.&#xA;Once you have a transform object, it can be used with&#xA;ImageCms.applyProfile() to convert images without the need to re-compute&#xA;the lookup table for the transform.&#xA;&#xA;The reason pyCMS returns a class object rather than a handle directly&#xA;to the transform is that it needs to keep track of the PIL input/output&#xA;modes that the transform is meant for.  These attributes are stored in&#xA;the &quot;inMode&quot; and &quot;outMode&quot; attributes of the object (which can be&#xA;manually overridden if you really want to, but I don&apos;t know of any&#xA;time that would be of use, or would even work).&#xA;" ilk="function" line="345" lineend="412" name="buildTransform" returns="ImageCmsTransform" signature="buildTransform(inputProfile, outputProfile, inMode, outMode, renderingIntent=INTENT_PERCEPTUAL, flags=0)"><variable citdl="ImageCmsProfile" ilk="argument" name="inputProfile" /><variable citdl="ImageCmsProfile" ilk="argument" name="outputProfile" /><variable ilk="argument" name="inMode" /><variable ilk="argument" name="outMode" /><variable citdl="int" ilk="argument" name="renderingIntent" /><variable citdl="int" ilk="argument" name="flags" /></scope><scope doc="ImageCms.buildProofTransform(inputProfile, outputProfile, proofProfile,&#xA;    inMode, outMode, [renderingIntent], [proofRenderingIntent])&#xA;&#xA;Returns a CmsTransform class object.&#xA;&#xA;inputProfile = string, as a valid filename path to the ICC input&#xA;    profile you wish to use for this transform, or a profile object&#xA;outputProfile = string, as a valid filename path to the ICC output&#xA;    (monitor, usually) profile you wish to use for this transform,&#xA;    or a profile object&#xA;proofProfile = string, as a valid filename path to the ICC proof&#xA;    profile you wish to use for this transform, or a profile object&#xA;inMode = string, as a valid PIL mode that the appropriate profile also&#xA;    supports (i.e. &quot;RGB&quot;, &quot;RGBA&quot;, &quot;CMYK&quot;, etc.)&#xA;outMode = string, as a valid PIL mode that the appropriate profile also&#xA;    supports (i.e. &quot;RGB&quot;, &quot;RGBA&quot;, &quot;CMYK&quot;, etc.)&#xA;renderingIntent = integer (0-3) specifying the rendering intent you&#xA;    wish to use for the input-&gt;proof (simulated) transform&#xA;    INTENT_PERCEPTUAL =           0 (DEFAULT) (ImageCms.INTENT_PERCEPTUAL)&#xA;    INTENT_RELATIVE_COLORIMETRIC =1 (ImageCms.INTENT_RELATIVE_COLORIMETRIC)&#xA;    INTENT_SATURATION =           2 (ImageCms.INTENT_SATURATION)&#xA;    INTENT_ABSOLUTE_COLORIMETRIC =3 (ImageCms.INTENT_ABSOLUTE_COLORIMETRIC)&#xA;    see the pyCMS documentation for details on rendering intents and&#xA;    what they do.&#xA;proofRenderingIntent = integer (0-3) specifying the rendering intent&#xA;    you wish to use for proof-&gt;output transform&#xA;    INTENT_PERCEPTUAL =           0 (DEFAULT) (ImageCms.INTENT_PERCEPTUAL)&#xA;    INTENT_RELATIVE_COLORIMETRIC =1 (ImageCms.INTENT_RELATIVE_COLORIMETRIC)&#xA;    INTENT_SATURATION =           2 (ImageCms.INTENT_SATURATION)&#xA;    INTENT_ABSOLUTE_COLORIMETRIC =3 (ImageCms.INTENT_ABSOLUTE_COLORIMETRIC)&#xA;    see the pyCMS documentation for details on rendering intents and&#xA;    what they do.&#xA;flags = integer (0-...) specifying additional flags&#xA;&#xA;If the input, output, or proof profiles specified are not valid&#xA;filenames, a PyCMSError will be raised.&#xA;&#xA;If an error occurs during creation of the transform, a PyCMSError will&#xA;be raised.&#xA;&#xA;If inMode or outMode are not a mode supported by the outputProfile&#xA;(or by pyCMS), a PyCMSError will be raised.&#xA;&#xA;This function builds and returns an ICC transform from the inputProfile&#xA;to the outputProfile, but tries to simulate the result that would be&#xA;obtained on the proofProfile device using renderingIntent and&#xA;proofRenderingIntent to determine what to do with out-of-gamut&#xA;colors.  This is known as &quot;soft-proofing&quot;.  It will ONLY work for&#xA;converting images that are in inMode to images that are in outMode&#xA;color format (PIL mode, i.e. &quot;RGB&quot;, &quot;RGBA&quot;, &quot;CMYK&quot;, etc.).&#xA;&#xA;Usage of the resulting transform object is exactly the same as with&#xA;ImageCms.buildTransform().&#xA;&#xA;Proof profiling is generally used when using an output device to get a&#xA;good idea of what the final printed/displayed image would look like on&#xA;the proofProfile device when it&apos;s quicker and easier to use the&#xA;output device for judging color.  Generally, this means that the&#xA;output device is a monitor, or a dye-sub printer (etc.), and the simulated&#xA;device is something more expensive, complicated, or time consuming&#xA;(making it difficult to make a real print for color judgement purposes).&#xA;&#xA;Soft-proofing basically functions by adjusting the colors on the&#xA;output device to match the colors of the device being simulated. However,&#xA;when the simulated device has a much wider gamut than the output&#xA;device, you may obtain marginal results.&#xA;" ilk="function" line="419" lineend="505" name="buildProofTransform" returns="ImageCmsTransform" signature="buildProofTransform(inputProfile, outputProfile, proofProfile, inMode, outMode, renderingIntent=INTENT_PERCEPTUAL, proofRenderingIntent=INTENT_ABSOLUTE_COLORIMETRIC, flags=[FLAGS])"><variable citdl="ImageCmsProfile" ilk="argument" name="inputProfile" /><variable citdl="ImageCmsProfile" ilk="argument" name="outputProfile" /><variable citdl="ImageCmsProfile" ilk="argument" name="proofProfile" /><variable ilk="argument" name="inMode" /><variable ilk="argument" name="outMode" /><variable citdl="int" ilk="argument" name="renderingIntent" /><variable citdl="int" ilk="argument" name="proofRenderingIntent" /><variable ilk="argument" name="flags" /></scope><variable citdl="buildTransform" line="507" name="buildTransformFromOpenProfiles" /><variable citdl="buildProofTransform" line="508" name="buildProofTransformFromOpenProfiles" /><scope doc="ImageCms.applyTransform(im, transform, [inPlace])&#xA;&#xA;Returns either None, or a new PIL Image object, depending on the value&#xA;    of inPlace (see below)&#xA;&#xA;im = a PIL Image object, and im.mode must be the same as the inMode&#xA;    supported by the transform.&#xA;transform = a valid CmsTransform class object&#xA;inPlace = BOOL (1 == TRUE, 0 or None == FALSE).  If TRUE, im is&#xA;    modified in place and None is returned, if FALSE, a new Image&#xA;    object with the transform applied is returned (and im is not&#xA;    changed).  The default is FALSE.&#xA;&#xA;If im.mode != transform.inMode, a PyCMSError is raised.&#xA;&#xA;If inPlace == TRUE and transform.inMode != transform.outMode, a&#xA;PyCMSError is raised.&#xA;&#xA;If im.mode, transfer.inMode, or transfer.outMode is not supported by&#xA;pyCMSdll or the profiles you used for the transform, a PyCMSError is&#xA;raised.&#xA;&#xA;If an error occurs while the transform is being applied, a PyCMSError&#xA;is raised.&#xA;&#xA;This function applies a pre-calculated transform (from&#xA;ImageCms.buildTransform() or ImageCms.buildTransformFromOpenProfiles()) to an&#xA;image.  The transform can be used for multiple images, saving&#xA;considerable calcuation time if doing the same conversion multiple times.&#xA;&#xA;If you want to modify im in-place instead of receiving a new image as&#xA;the return value, set inPlace to TRUE.  This can only be done if&#xA;transform.inMode and transform.outMode are the same, because we can&apos;t&#xA;change the mode in-place (the buffer sizes for some modes are&#xA;different).  The  default behavior is to return a new Image object of&#xA;the same dimensions in mode transform.outMode.&#xA;" ilk="function" line="513" lineend="563" name="applyTransform" returns="transform.apply()" signature="ImageCms.applyTransform(im, transform, [inPlace])"><variable ilk="argument" name="im" /><variable ilk="argument" name="transform" /><variable citdl="int" ilk="argument" name="inPlace" /><variable citdl="transform.apply()" line="557" name="imOut" /></scope><scope doc="ImageCms.createProfile(colorSpace, [colorTemp])&#xA;&#xA;Returns a CmsProfile class object&#xA;&#xA;colorSpace = string, the color space of the profile you wish to create.&#xA;    Currently only &quot;LAB&quot;, &quot;XYZ&quot;, and &quot;sRGB&quot; are supported.&#xA;colorTemp = positive integer for the white point for the profile, in&#xA;    degrees Kelvin (i.e. 5000, 6500, 9600, etc.).  The default is for&#xA;    D50 illuminant if omitted (5000k).  colorTemp is ONLY applied to&#xA;    LAB profiles, and is ignored for XYZ and sRGB.&#xA;&#xA;If colorSpace not in [&quot;LAB&quot;, &quot;XYZ&quot;, &quot;sRGB&quot;], a PyCMSError is raised&#xA;&#xA;If using LAB and colorTemp != a positive integer, a PyCMSError is raised.&#xA;&#xA;If an error occurs while creating the profile, a PyCMSError is raised.&#xA;&#xA;Use this function to create common profiles on-the-fly instead of&#xA;having to supply a profile on disk and knowing the path to it.  It&#xA;returns a normal CmsProfile object that can be passed to&#xA;ImageCms.buildTransformFromOpenProfiles() to create a transform to apply&#xA;to images.&#xA;" ilk="function" line="568" lineend="606" name="createProfile" returns="core.createProfile()" signature="ImageCms.createProfile(colorSpace, [colorTemp])"><variable ilk="argument" name="colorSpace" /><variable citdl="int" ilk="argument" name="colorTemp" /></scope><scope doc="ImageCms.getProfileName(profile)&#xA;&#xA;Returns a string containing the internal name of the profile as stored&#xA;    in an ICC tag.&#xA;&#xA;profile = EITHER a valid CmsProfile object, OR a string of the&#xA;    filename of an ICC profile.&#xA;&#xA;If profile isn&apos;t a valid CmsProfile object or filename to a profile,&#xA;a PyCMSError is raised If an error occurs while trying to obtain the&#xA;name tag, a PyCMSError is raised.&#xA;&#xA;Use this function to obtain the INTERNAL name of the profile (stored&#xA;in an ICC tag in the profile itself), usually the one used when the&#xA;profile was originally created.  Sometimes this tag also contains&#xA;additional information supplied by the creator.&#xA;" ilk="function" line="611" lineend="637" name="getProfileName" returns="str" signature="ImageCms.getProfileName(profile)"><variable citdl="ImageCmsProfile" ilk="argument" name="profile" /></scope><scope doc="ImageCms.getProfileInfo(profile)&#xA;&#xA;Returns a string containing the internal profile information stored in&#xA;    an ICC tag.&#xA;&#xA;profile = EITHER a valid CmsProfile object, OR a string of the&#xA;    filename of an ICC profile.&#xA;&#xA;If profile isn&apos;t a valid CmsProfile object or filename to a profile,&#xA;a PyCMSError is raised.&#xA;&#xA;If an error occurs while trying to obtain the info tag, a PyCMSError&#xA;is raised&#xA;&#xA;Use this function to obtain the information stored in the profile&apos;s&#xA;info tag.  This often contains details about the profile, and how it&#xA;was created, as supplied by the creator.&#xA;" ilk="function" line="642" lineend="669" name="getProfileInfo" returns="str" signature="ImageCms.getProfileInfo(profile)"><variable citdl="ImageCmsProfile" ilk="argument" name="profile" /></scope><scope doc="ImageCms.getDefaultIntent(profile)&#xA;&#xA;Returns integer 0-3 specifying the default rendering intent for this&#xA;    profile.&#xA;    INTENT_PERCEPTUAL =           0 (DEFAULT) (ImageCms.INTENT_PERCEPTUAL)&#xA;    INTENT_RELATIVE_COLORIMETRIC =1 (ImageCms.INTENT_RELATIVE_COLORIMETRIC)&#xA;    INTENT_SATURATION =           2 (ImageCms.INTENT_SATURATION)&#xA;    INTENT_ABSOLUTE_COLORIMETRIC =3 (ImageCms.INTENT_ABSOLUTE_COLORIMETRIC)&#xA;    see the pyCMS documentation for details on rendering intents and&#xA;    what they do.&#xA;&#xA;profile = EITHER a valid CmsProfile object, OR a string of the&#xA;    filename of an ICC profile.&#xA;&#xA;If profile isn&apos;t a valid CmsProfile object or filename to a profile,&#xA;a PyCMSError is raised.&#xA;&#xA;If an error occurs while trying to obtain the default intent, a&#xA;PyCMSError is raised.&#xA;&#xA;Use this function to determine the default (and usually best optomized)&#xA;rendering intent for this profile.  Most profiles support multiple&#xA;rendering intents, but are intended mostly for one type of conversion.&#xA;If you wish to use a different intent than returned, use&#xA;ImageCms.isIntentSupported() to verify it will work first." ilk="function" line="674" lineend="707" name="getDefaultIntent" returns="profile.profile.rendering_intent" signature="ImageCms.getDefaultIntent(profile)"><variable citdl="ImageCmsProfile" ilk="argument" name="profile" /></scope><scope doc="ImageCms.isIntentSupported(profile, intent, direction)&#xA;&#xA;Returns 1 if the intent/direction are supported, -1 if they are not.&#xA;&#xA;profile = EITHER a valid CmsProfile object, OR a string of the&#xA;    filename of an ICC profile.&#xA;intent = integer (0-3) specifying the rendering intent you wish to use&#xA;    with this profile&#xA;    INTENT_PERCEPTUAL =           0 (DEFAULT) (ImageCms.INTENT_PERCEPTUAL)&#xA;    INTENT_RELATIVE_COLORIMETRIC =1 (ImageCms.INTENT_RELATIVE_COLORIMETRIC)&#xA;    INTENT_SATURATION =           2 (ImageCms.INTENT_SATURATION)&#xA;    INTENT_ABSOLUTE_COLORIMETRIC =3 (ImageCms.INTENT_ABSOLUTE_COLORIMETRIC)&#xA;    see the pyCMS documentation for details on rendering intents and&#xA;    what they do.&#xA;direction = integer specifing if the profile is to be used for input,&#xA;    output, or proof&#xA;    INPUT =               0 (or use ImageCms.DIRECTION_INPUT)&#xA;    OUTPUT =              1 (or use ImageCms.DIRECTION_OUTPUT)&#xA;    PROOF =               2 (or use ImageCms.DIRECTION_PROOF)&#xA;&#xA;Use this function to verify that you can use your desired&#xA;renderingIntent with profile, and that profile can be used for the&#xA;input/output/proof profile as you desire.&#xA;&#xA;Some profiles are created specifically for one &quot;direction&quot;, can cannot&#xA;be used for others.  Some profiles can only be used for certain&#xA;rendering intents... so it&apos;s best to either verify this before trying&#xA;to create a transform with them (using this function), or catch the&#xA;potential PyCMSError that will occur if they don&apos;t support the modes&#xA;you select.&#xA;" ilk="function" line="712" lineend="756" name="isIntentSupported" returns="int" signature="ImageCms.isIntentSupported(profile, intent, direction)"><variable citdl="ImageCmsProfile" ilk="argument" name="profile" /><variable ilk="argument" name="intent" /><variable ilk="argument" name="direction" /></scope><scope ilk="function" line="761" lineend="764" name="versions" returns="tuple" signature="versions()"><import line="762" module="sys" /></scope></scope>