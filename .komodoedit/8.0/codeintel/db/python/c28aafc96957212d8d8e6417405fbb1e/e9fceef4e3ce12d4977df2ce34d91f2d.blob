<scope ilk="blob" lang="Python" name="OleFileIO" src="/usr/lib/python2.7/dist-packages/PIL/OleFileIO.py"><import line="39" module="string" /><import line="39" module="StringIO" /><import line="510" module="sys" /><scope ilk="function" line="42" lineend="43" name="i16" returns="ord()" signature="i16(c, o=0)"><variable ilk="argument" name="c" /><variable citdl="int" ilk="argument" name="o" /></scope><scope ilk="function" line="45" lineend="46" name="i32" returns="ord()" signature="i32(c, o=0)"><variable ilk="argument" name="c" /><variable citdl="int" ilk="argument" name="o" /></scope><variable citdl="str" line="49" name="MAGIC" /><variable citdl="int" line="55" name="VT_EMPTY" /><variable citdl="int" line="55" name="VT_NULL" /><variable citdl="int" line="55" name="VT_CY" /><variable citdl="int" line="55" name="VT_I4" /><variable citdl="int" line="55" name="VT_I2" /><variable citdl="int" line="55" name="VT_R8" /><variable citdl="int" line="55" name="VT_R4" /><variable citdl="int" line="56" name="VT_ERROR" /><variable citdl="int" line="56" name="VT_BOOL" /><variable citdl="int" line="56" name="VT_BSTR" /><variable citdl="int" line="56" name="VT_DATE" /><variable citdl="int" line="56" name="VT_DISPATCH" /><variable citdl="int" line="57" name="VT_DECIMAL" /><variable citdl="int" line="57" name="VT_UI1" /><variable citdl="int" line="57" name="VT_VARIANT" /><variable citdl="int" line="57" name="VT_I1" /><variable citdl="int" line="57" name="VT_UNKNOWN" /><variable citdl="int" line="58" name="VT_UI8" /><variable citdl="int" line="58" name="VT_INT" /><variable citdl="int" line="58" name="VT_UI2" /><variable citdl="int" line="58" name="VT_UI4" /><variable citdl="int" line="58" name="VT_UINT" /><variable citdl="int" line="58" name="VT_I8" /><variable citdl="int" line="59" name="VT_VOID" /><variable citdl="int" line="59" name="VT_PTR" /><variable citdl="int" line="59" name="VT_SAFEARRAY" /><variable citdl="int" line="59" name="VT_CARRAY" /><variable citdl="int" line="59" name="VT_HRESULT" /><variable citdl="int" line="60" name="VT_USERDEFINED" /><variable citdl="int" line="60" name="VT_LPSTR" /><variable citdl="int" line="60" name="VT_FILETIME" /><variable citdl="int" line="60" name="VT_LPWSTR" /><variable citdl="int" line="61" name="VT_STREAMED_OBJECT" /><variable citdl="int" line="61" name="VT_BLOB" /><variable citdl="int" line="61" name="VT_STORAGE" /><variable citdl="int" line="61" name="VT_STREAM" /><variable citdl="int" line="62" name="VT_BLOB_OBJECT" /><variable citdl="int" line="62" name="VT_STORED_OBJECT" /><variable citdl="int" line="62" name="VT_CLSID" /><variable citdl="int" line="62" name="VT_CF" /><variable citdl="int" line="63" name="VT_VECTOR" /><variable citdl="dict" line="67" name="VT" /><variable citdl="str" line="76" name="WORD_CLSID" /><scope attributes="protected" classrefs="StringIO.StringIO" doc="OLE2 Stream&#xA;&#xA;Returns a read-only file object which can be used to read&#xA;the contents of a OLE stream.  To open a stream, use the&#xA;openstream method in the OleFile class.&#xA;&#xA;This function can be used with either ordinary streams,&#xA;or ministreams, depending on the offset, sectorsize, and&#xA;fat table arguments." ilk="class" line="82" lineend="112" name="_OleStream"><scope attributes="__ctor__" ilk="function" line="99" lineend="112" name="__init__" signature="_OleStream(fp, sect, size, offset, sectorsize, fat)"><variable citdl="_OleStream" ilk="argument" name="self" /><variable ilk="argument" name="fp" /><variable ilk="argument" name="sect" /><variable ilk="argument" name="size" /><variable ilk="argument" name="offset" /><variable ilk="argument" name="sectorsize" /><variable ilk="argument" name="fat" /><variable citdl="string.join()" line="101" name="data" /></scope></scope><scope attributes="protected" doc="OLE2 Directory Entry&#xA;&#xA;Encapsulates a stream directory entry.  Note that the&#xA;constructor builds a tree of all subentries, so we only&#xA;have to call it with the root object." ilk="class" line="120" lineend="219" name="_OleDirectoryEntry"><scope attributes="__ctor__" ilk="function" line="129" lineend="198" name="__init__" signature="_OleDirectoryEntry(sidlist, sid)"><variable citdl="_OleDirectoryEntry" ilk="argument" name="self" /><variable ilk="argument" name="sidlist" /><variable citdl="left" ilk="argument" name="sid" /><variable citdl="list" line="156" name="stack" /><variable line="185" name="ptr" /></scope><variable attributes="__instancevar__" line="137" name="sid" /><variable attributes="__instancevar__" line="138" name="name" /><variable attributes="__instancevar__" line="139" name="type" /><variable attributes="__instancevar__" line="140" name="sect" /><variable attributes="__instancevar__" line="141" name="size" /><variable attributes="__instancevar__" line="142" name="clsid" /><variable attributes="__instancevar__" citdl="list" line="146" name="kids" /><scope doc="Compare entries by name" ilk="function" line="200" lineend="203" name="__cmp__" returns="cmp()" signature="__cmp__(other)"><variable citdl="_OleDirectoryEntry" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope doc="Dump this entry, and all its subentries (for debug purposes only)" ilk="function" line="205" lineend="219" name="dump" signature="dump(tab=0)"><variable citdl="_OleDirectoryEntry" ilk="argument" name="self" /><variable citdl="int" ilk="argument" name="tab" /><variable citdl="list" line="208" name="TYPES" /></scope></scope><scope doc="OLE container object&#xA;&#xA;This class encapsulates the interface to an OLE 2 structured&#xA;storage file.  Use the listdir and openstream methods to access&#xA;the contents of this file.&#xA;&#xA;Object names are given as a list of strings, one for each subentry&#xA;level.  The root entry should be omitted.  For example, the following&#xA;code extracts all image streams from a Microsoft Image Composer file:&#xA;&#xA;    ole = OleFileIO(&quot;fan.mic&quot;)&#xA;&#xA;    for entry in ole.listdir():&#xA;        if entry[1:2] == &quot;Image&quot;:&#xA;            fin = ole.openstream(entry)&#xA;            fout = open(entry[0:1], &quot;wb&quot;)&#xA;            while 1:&#xA;                s = fin.read(8192)&#xA;                if not s:&#xA;                    break&#xA;                fout.write(s)&#xA;&#xA;You can use the viewer application provided with the Python Imaging&#xA;Library to view the resulting files (which happens to be standard&#xA;TIFF files)." ilk="class" line="229" lineend="501" name="OleFileIO"><scope attributes="__ctor__" ilk="function" line="257" lineend="260" name="__init__" signature="OleFileIO(filename=None)"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable ilk="argument" name="filename" /></scope><scope doc="Open an OLE2 file" ilk="function" line="265" lineend="296" name="open" signature="open(filename)"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable ilk="argument" name="filename" /><variable citdl="self.fp.read()" line="273" name="header" /><variable citdl="self._clsid()" line="279" name="clsid" /></scope><variable attributes="__instancevar__" citdl="open()" line="269" name="fp" /><variable attributes="__instancevar__" citdl="int" line="283" name="sectorsize" /><variable attributes="__instancevar__" citdl="int" line="284" name="minisectorsize" /><variable attributes="__instancevar__" citdl="i32()" line="286" name="minisectorcutoff" /><variable attributes="__instancevar__" citdl="_open()" line="295" name="ministream" /><variable attributes="__instancevar__" citdl="i32()" line="296" name="minifatsect" /><scope ilk="function" line="298" lineend="311" name="loadfat" signature="loadfat(header)"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable ilk="argument" name="header" /><variable citdl="list" line="303" name="sect" /><variable citdl="list" line="304" name="fat" /><variable citdl="i32()" line="306" name="ix" /><variable citdl="self.getsect()" line="309" name="s" /></scope><variable attributes="__instancevar__" citdl="map()" line="311" name="fat" /><scope ilk="function" line="313" lineend="319" name="loadminifat" signature="loadminifat()"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable line="317" name="s" /></scope><variable attributes="__instancevar__" citdl="map()" line="319" name="minifat" /><scope ilk="function" line="321" lineend="325" name="getsect" returns="self.fp.read()" signature="getsect(sect)"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable ilk="argument" name="sect" /></scope><scope attributes="protected" ilk="function" line="327" lineend="332" name="_unicode" returns="filter()" signature="_unicode(s)"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable ilk="argument" name="s" /></scope><scope ilk="function" line="334" lineend="355" name="loaddirectory" signature="loaddirectory(sect)"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable citdl="i32()" ilk="argument" name="sect" /><variable citdl="self._open()" line="339" name="fp" /><variable citdl="fp.read()" line="344" name="entry" /><variable citdl="ord()" line="347" name="type" /><variable citdl="_unicode()" line="348" name="name" /><variable citdl="tuple" line="349" name="ptrs" /><variable citdl="i32()" line="350" name="size" /><variable citdl="self._clsid()" line="351" name="clsid" /></scope><variable attributes="__instancevar__" citdl="list" line="342" name="sidlist" /><variable attributes="__instancevar__" citdl="_OleDirectoryEntry" line="355" name="root" /><scope ilk="function" line="357" lineend="360" name="dumpdirectory" signature="dumpdirectory()"><variable citdl="OleFileIO" ilk="argument" name="self" /></scope><scope attributes="protected" ilk="function" line="362" lineend="367" name="_clsid" returns="tuple" signature="_clsid(clsid)"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable ilk="argument" name="clsid" /></scope><scope attributes="protected" ilk="function" line="369" lineend="377" name="_list" signature="_list(files, prefix, node)"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable ilk="argument" name="files" /><variable citdl="list" ilk="argument" name="prefix" /><variable ilk="argument" name="node" /></scope><scope attributes="protected" ilk="function" line="379" lineend="390" name="_find" returns="node.sid" signature="_find(filename)"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable ilk="argument" name="filename" /><variable citdl="_OleDirectoryEntry" line="382" name="node" /></scope><scope attributes="protected" ilk="function" line="392" lineend="405" name="_open" returns="_OleStream" signature="_open(start, size=2147483647)"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable ilk="argument" name="start" /><variable citdl="int" ilk="argument" name="size" /></scope><scope doc="Return a list of streams stored in this file" ilk="function" line="410" lineend="415" name="listdir" returns="list" signature="listdir()"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable citdl="list" line="413" name="files" /></scope><scope doc="Open a stream as a read-only file object" ilk="function" line="420" lineend="427" name="openstream" returns="OleFileIO._open()" signature="openstream(filename)"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable ilk="argument" name="filename" /><variable citdl="_find()" line="423" name="slot" /></scope><scope doc="Return properties described in substream" ilk="function" line="432" lineend="501" name="getproperties" returns="dict" signature="getproperties(filename)"><variable citdl="OleFileIO" ilk="argument" name="self" /><variable ilk="argument" name="filename" /><variable citdl="openstream()" line="435" name="fp" /><variable citdl="dict" line="437" name="data" /><variable citdl="fp.read()" line="440" name="s" /><variable citdl="_clsid()" line="441" name="clsid" /><variable citdl="_clsid()" line="445" name="fmtid" /><variable citdl="i32()" line="453" name="id" /><variable citdl="i32()" line="454" name="offset" /><variable citdl="i32()" line="455" name="type" /><variable citdl="list" line="461" name="value" /><variable citdl="i32()" line="471" name="count" /></scope></scope><variable citdl="OleFileIO" line="514" name="ole" /><variable citdl="props.items()" line="522" name="props" /></scope>