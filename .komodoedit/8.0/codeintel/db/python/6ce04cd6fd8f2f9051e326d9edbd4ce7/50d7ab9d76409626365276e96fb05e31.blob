<scope ilk="blob" lang="Python" name="ethernet" src="/home/mininet/new_pox/pox/pox/lib/packet/ethernet.py"><import line="27" module="struct" /><import line="29" module="packet_base" symbol="packet_base" /><import line="30" module="packet_utils" symbol="ethtype_to_str" /><import line="32" module="pox.lib.addresses" symbol="*" /><variable citdl="EthAddr()" line="34" name="ETHER_ANY" /><variable citdl="EthAddr()" line="35" name="ETHER_BROADCAST" /><variable citdl="EthAddr()" line="36" name="BRIDGE_GROUP_ADDRESS" /><variable citdl="EthAddr()" line="37" name="LLDP_MULTICAST" /><variable citdl="EthAddr()" line="38" name="PAE_MULTICAST" /><variable citdl="EthAddr()" line="40" name="NDP_MULTICAST" /><scope classrefs="packet_base" doc="Ethernet packet struct" ilk="class" line="43" lineend="177" name="ethernet"><variable citdl="False" line="46" name="resolve_names" /><variable citdl="int" line="48" name="MIN_LEN" /><variable citdl="int" line="50" name="IP_TYPE" /><variable citdl="int" line="51" name="ARP_TYPE" /><variable citdl="int" line="52" name="RARP_TYPE" /><variable citdl="int" line="53" name="VLAN_TYPE" /><variable citdl="int" line="54" name="LLDP_TYPE" /><variable citdl="int" line="55" name="PAE_TYPE" /><variable citdl="int" line="56" name="MPLS_UNICAST_TYPE" /><variable citdl="int" line="57" name="MPLS_MULTICAST_TYPE" /><variable citdl="int" line="58" name="IPV6_TYPE" /><variable citdl="int" line="59" name="PPP_TYPE" /><variable citdl="int" line="60" name="LWAPP_TYPE" /><variable citdl="int" line="61" name="GSMP_TYPE" /><variable citdl="int" line="62" name="IPX_TYPE" /><variable citdl="int" line="64" name="WOL_TYPE" /><variable citdl="int" line="65" name="TRILL_TYPE" /><variable citdl="int" line="66" name="JUMBO_TYPE" /><variable citdl="int" line="67" name="SCSI_TYPE" /><variable citdl="int" line="68" name="ATA_TYPE" /><variable citdl="int" line="69" name="QINQ_TYPE" /><variable citdl="int" line="71" name="INVALID_TYPE" /><variable citdl="dict" line="73" name="type_parsers" /><scope attributes="__ctor__" ilk="function" line="75" lineend="107" name="__init__" signature="ethernet(raw=None, prev=None, **kw)"><import line="79" module="vlan" symbol="vlan" /><import line="81" module="arp" symbol="arp" /><import line="84" module="ipv4" symbol="ipv4" /><import line="86" module="lldp" symbol="lldp" /><import line="88" module="eapol" symbol="eapol" /><import line="90" module="mpls" symbol="mpls" /><import line="93" module="llc" symbol="llc" /><variable citdl="ethernet" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable ilk="argument" name="prev" /><variable attributes="kwargs" ilk="argument" name="kw" /></scope><variable attributes="protected __instancevar__" citdl="llc" line="94" name="_llc" /><variable attributes="__instancevar__" line="96" name="prev" /><variable attributes="__instancevar__" citdl="EthAddr()" line="98" name="dst" /><variable attributes="__instancevar__" citdl="EthAddr()" line="99" name="src" /><variable attributes="__instancevar__" citdl="int" line="101" name="type" /><variable attributes="__instancevar__" citdl="str" line="102" name="next" /><scope ilk="function" line="109" lineend="126" name="parse" signature="parse(raw)"><variable citdl="ethernet" ilk="argument" name="self" /><variable ilk="argument" name="raw" /><variable citdl="len()" line="112" name="alen" /></scope><variable attributes="__instancevar__" line="111" name="raw" /><variable attributes="__instancevar__" citdl="int" line="122" name="hdr_len" /><variable attributes="__instancevar__" citdl="len()" line="123" name="payload_len" /><variable attributes="__instancevar__" citdl="True" line="126" name="parsed" /><scope ilk="function" line="129" lineend="136" name="parse_next" returns="ethernet._llc()" signature="parse_next(typelen, raw, offset=0, allow_llc=True)"><variable citdl="ethernet" ilk="argument" name="prev" /><variable ilk="argument" name="typelen" /><variable ilk="argument" name="raw" /><variable citdl="int" ilk="argument" name="offset" /><variable citdl="True" ilk="argument" name="allow_llc" /><variable citdl="ethernet.type_parsers.get()" line="130" name="parser" /></scope><scope doc="Returns a string name for a numeric ethertype " ilk="function" line="139" lineend="141" name="getNameForType" returns="ethtype_to_str()" signature="getNameForType()"><variable citdl="ethernet" ilk="argument" name="ethertype" /></scope><scope attributes="__hidden__" ilk="function" line="144" lineend="145" name="effective_ethertype (property getter)" returns="self._get_effective_ethertype()" signature="effective_ethertype (property getter)()"><variable citdl="ethernet" ilk="argument" name="self" /></scope><variable attributes="property" citdl="self._get_effective_ethertype()" line="144" name="effective_ethertype" /><scope attributes="protected" doc="Get the &quot;effective&quot; ethertype of a packet.&#xA;&#xA;This means that if the payload is something like a VLAN or SNAP header,&#xA;we want the type from that deeper header.  This is kind of ugly here in&#xA;the packet library, but it should make user code somewhat simpler." ilk="function" line="148" lineend="163" name="_get_effective_ethertype" returns="self.payload.effective_ethertype" signature="_get_effective_ethertype()"><variable citdl="ethernet" ilk="argument" name="self" /></scope><scope attributes="protected" ilk="function" line="165" lineend="168" name="_to_str" returns="__builtins__.str.join()" signature="_to_str()"><variable citdl="ethernet" ilk="argument" name="self" /><variable citdl="__builtins__.str.join()" line="166" name="s" /></scope><scope ilk="function" line="170" lineend="177" name="hdr" returns="struct.pack()" signature="hdr(payload)"><variable citdl="ethernet" ilk="argument" name="self" /><variable ilk="argument" name="payload" /><variable citdl="EthAddr()" line="171" name="dst" /><variable citdl="src.toRaw()" line="172" name="src" /></scope></scope></scope>