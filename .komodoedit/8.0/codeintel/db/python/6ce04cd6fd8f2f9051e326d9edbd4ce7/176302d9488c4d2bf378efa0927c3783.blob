<scope ilk="blob" lang="Python" name="packet_base" src="/home/mininet/new_pox/pox/pox/lib/packet/packet_base.py"><import line="22" module="logging" /><import line="25" module="pox.lib.util" symbol="initHelper" /><variable citdl="logging.getLogger()" line="23" name="lg" /><scope classrefs="object" doc="TODO: This description is somewhat outdated and should be fixed.&#xA;&#xA;Base class for packets.&#xA;&#xA;Classes that perform packet manipulation (parsing and contruction)&#xA;should derive from this class.&#xA;&#xA;The general layout of such a subclass is as follows:&#xA;&#xA;class foo (packet_base):&#xA;&#xA;    def __init__(data=None, prev=None):&#xA;      packet_base.__init__(self)&#xA;&#xA;      # data: is the data for the packet as a &quot;bytes&quot; object.&#xA;      # prev: is a pointer to the previous header&#xA;      # which is expected to be of type packet_base&#xA;      self.parsed = False&#xA;      self.prev = prev&#xA;&#xA;      # define field variables here&#xA;      self.bar = 0&#xA;&#xA;      if arr != None:&#xA;          self.data = data # Phasing out?&#xA;          self.parse(data)&#xA;&#xA;    def parse(self, data):&#xA;        # parse packet here and set member variables&#xA;        self.parsed = True # signal that packet was succesfully parsed&#xA;&#xA;    def hdr(self, payload):&#xA;        # return fields as a string&#xA;        return struct.pack(&apos;!I&apos;,self.bar)&#xA;&#xA;    def __str__(self):&#xA;        # optionally convert to human readable string" ilk="class" line="27" lineend="207" name="packet_base"><scope attributes="__ctor__" ilk="function" line="67" lineend="71" name="__init__" signature="packet_base()"><variable citdl="packet_base" ilk="argument" name="self" /></scope><variable attributes="__instancevar__" line="68" name="next" /><variable attributes="__instancevar__" line="69" name="prev" /><variable attributes="__instancevar__" citdl="False" line="70" name="parsed" /><variable attributes="__instancevar__" line="71" name="raw" /><scope attributes="protected" ilk="function" line="73" lineend="77" name="_init" signature="_init(kw)"><variable citdl="packet_base" ilk="argument" name="self" /><variable ilk="argument" name="kw" /></scope><scope doc="Shortcut for logging " ilk="function" line="79" lineend="82" name="msg" signature="msg(*args)"><variable citdl="packet_base" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /></scope><scope doc="Shortcut for logging " ilk="function" line="84" lineend="87" name="err" signature="err(*args)"><variable citdl="packet_base" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /></scope><scope doc="Shortcut for logging " ilk="function" line="89" lineend="92" name="warn" signature="warn(*args)"><variable citdl="packet_base" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /></scope><scope ilk="function" line="94" lineend="95" name="__nonzero__" returns="bool" signature="__nonzero__()"><variable citdl="packet_base" ilk="argument" name="self" /></scope><scope ilk="function" line="97" lineend="98" name="__len__" returns="len()" signature="__len__()"><variable citdl="packet_base" ilk="argument" name="self" /></scope><scope ilk="function" line="100" lineend="110" name="__str__" returns="self._to_str()" signature="__str__()"><variable citdl="packet_base" ilk="argument" name="self" /></scope><scope ilk="function" line="112" lineend="136" name="dump" returns="__builtins__.str.join()" signature="dump()"><variable citdl="packet_base" ilk="argument" name="self" /><variable citdl="p.next" line="113" name="p" /><variable citdl="list" line="114" name="m" /><variable citdl="s.rstrip()" line="121" name="s" /><variable citdl="len()" line="129" name="l" /></scope><scope doc="Find the specified protocol layer based on its class type or name." ilk="function" line="138" lineend="150" name="find" returns="self.next.find()" signature="find(proto)"><variable citdl="packet_base" ilk="argument" name="self" /><variable citdl="proto.__name__" ilk="argument" name="proto" /></scope><variable attributes="property" line="153" name="payload" /><scope attributes="__hidden__" doc="The packet payload property.&#xA;Reading this property is generally the same as the &quot;next&quot; field.&#xA;Setting this generally sets this packet&apos;s &quot;next&quot; field, as well as&#xA;setting the new payload&apos;s &quot;prev&quot; field to point back to its new&#xA;container (the same as the set_payload() method)." ilk="function" line="153" lineend="161" name="payload (property getter)" signature="payload (property getter)()"><variable citdl="packet_base" ilk="argument" name="self" /></scope><scope attributes="__hidden__" ilk="function" line="164" lineend="165" name="payload (property setter)" signature="payload (property setter)(new_payload)"><variable citdl="packet_base" ilk="argument" name="self" /><variable ilk="argument" name="new_payload" /></scope><scope doc="Set the packet payload.  Expects bytes or a packet_base subclass." ilk="function" line="167" lineend="177" name="set_payload" signature="set_payload(payload)"><variable citdl="packet_base" ilk="argument" name="self" /><variable ilk="argument" name="payload" /></scope><scope doc="Override me with packet parsing code" ilk="function" line="179" lineend="181" name="parse" signature="parse(raw)"><variable citdl="packet_base" ilk="argument" name="self" /><variable ilk="argument" name="raw" /></scope><scope doc="Override to prepare before payload is packed" ilk="function" line="183" lineend="185" name="pre_hdr" signature="pre_hdr()"><variable citdl="packet_base" ilk="argument" name="self" /></scope><scope doc="Override me to return packet headers" ilk="function" line="187" lineend="189" name="hdr" signature="hdr(payload)"><variable citdl="packet_base" ilk="argument" name="self" /><variable ilk="argument" name="payload" /></scope><scope ilk="function" line="192" lineend="193" name="unpack" returns="packet_base.unpack.cls()" signature="unpack(raw, prev=None)"><variable citdl="packet_base" ilk="argument" name="cls" /><variable ilk="argument" name="raw" /><variable ilk="argument" name="prev" /></scope><scope doc="Convert header and payload to bytes" ilk="function" line="195" lineend="207" name="pack" returns="self.next.pack()" signature="pack()"><variable citdl="packet_base" ilk="argument" name="self" /><variable citdl="self.next.pack()" line="203" name="rest" /></scope></scope></scope>