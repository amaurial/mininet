<scope doc="Utility functions for Mininet." ilk="blob" lang="Python" name="util" src="/home/mininet/mininet/mininet/util.py"><import line="3" module="mininet.log" symbol="output" /><import line="3" module="mininet.log" symbol="info" /><import line="3" module="mininet.log" symbol="error" /><import line="3" module="mininet.log" symbol="warn" /><import line="5" module="time" symbol="sleep" /><import line="6" module="resource" symbol="setrlimit" /><import line="6" module="resource" symbol="RLIMIT_NPROC" /><import line="6" module="resource" symbol="RLIMIT_NOFILE" /><import line="7" module="select" symbol="poll" /><import line="7" module="select" symbol="POLLIN" /><import line="8" module="subprocess" symbol="call" /><import line="8" module="subprocess" symbol="check_call" /><import line="8" module="subprocess" symbol="Popen" /><import line="8" module="subprocess" symbol="PIPE" /><import line="8" module="subprocess" symbol="STDOUT" /><import line="9" module="re" /><import line="10" module="fcntl" symbol="fcntl" /><import line="10" module="fcntl" symbol="F_GETFL" /><import line="10" module="fcntl" symbol="F_SETFL" /><import line="11" module="os" symbol="O_NONBLOCK" /><import line="12" module="os" /><scope doc="Simple interface to subprocess.call()&#xA;cmd: list of command params" ilk="function" line="16" lineend="19" name="run" returns="call()" signature="run(cmd)"><variable ilk="argument" name="cmd" /></scope><scope doc="Simple interface to subprocess.check_call()&#xA;cmd: list of command params" ilk="function" line="21" lineend="24" name="checkRun" returns="check_call()" signature="checkRun(cmd)"><variable ilk="argument" name="cmd" /></scope><scope doc="Run a command, routing stderr to stdout, and return the output.&#xA;cmd: list of command params" ilk="function" line="29" lineend="52" name="oldQuietRun" returns="str" signature="oldQuietRun(*cmd)"><variable attributes="varargs" citdl="cmd.split()" ilk="argument" name="cmd" /><variable citdl="Popen()" line="36" name="popen" /><variable citdl="str" line="40" name="out" /><variable citdl="poll()" line="41" name="readable" /><variable citdl="popen.stdout.read()" line="45" name="data" /></scope><scope doc="Run a command and return stdout, stderr and return code&#xA;cmd: string or list of command and args&#xA;stderr: STDOUT to merge stderr with stdout&#xA;shell: run command using shell&#xA;echo: monitor output to console" ilk="function" line="58" lineend="105" name="errRun" returns="tuple" signature="errRun(*cmd, **kwargs)"><variable attributes="varargs" citdl="cmd.split()" ilk="argument" name="cmd" /><variable attributes="kwargs" ilk="argument" name="kwargs" /><variable citdl="kwargs.get()" line="71" name="stderr" /><variable citdl="kwargs.get()" line="72" name="shell" /><variable citdl="kwargs.get()" line="73" name="echo" /><variable citdl="Popen()" line="77" name="popen" /><variable citdl="str" line="80" name="err" /><variable citdl="str" line="80" name="out" /><variable citdl="poll()" line="81" name="poller" /><variable citdl="dict" line="83" name="fdtofile" /><variable citdl="True" line="84" name="errDone" /><variable citdl="False" line="84" name="outDone" /><variable citdl="poller.poll()" line="90" name="readable" /><variable line="92" name="f" /><variable citdl="f.read()" line="93" name="data" /><variable citdl="popen.wait()" line="104" name="returncode" /></scope><scope doc="Run a command using errRun and raise exception on nonzero exit" ilk="function" line="107" lineend="113" name="errFail" returns="tuple" signature="errFail(*cmd, **kwargs)"><variable attributes="varargs" ilk="argument" name="cmd" /><variable attributes="kwargs" ilk="argument" name="kwargs" /><variable line="109" name="err" /><variable line="109" name="ret" /><variable line="109" name="out" /></scope><scope doc="Run a command and return merged stdout and stderr" ilk="function" line="115" lineend="117" name="quietRun" signature="quietRun(cmd, **kwargs)"><variable ilk="argument" name="cmd" /><variable attributes="kwargs" ilk="argument" name="kwargs" /></scope><scope doc="Return True if cmd is a bash builtin." ilk="function" line="122" lineend="129" name="isShellBuiltin" returns="bool" signature="isShellBuiltin(cmd)"><variable citdl="list" ilk="argument" name="cmd" /><variable citdl="quietRun()" line="125" name="builtIns" /><variable citdl="cmd.find()" line="126" name="space" /></scope><scope doc="Make a veth pair connecting intf1 and intf2.&#xA;intf1: string, interface&#xA;intf2: string, interface&#xA;returns: success boolean" ilk="function" line="148" lineend="158" name="makeIntfPair" returns="quietRun()" signature="makeIntfPair(intf1, intf2)"><variable ilk="argument" name="intf1" /><variable ilk="argument" name="intf2" /><variable citdl="str" line="157" name="cmd" /></scope><scope doc="Try something several times before giving up.&#xA;n: number of times to retry&#xA;delaySecs: wait this long between tries&#xA;fn: function to call&#xA;args: args to apply to function call" ilk="function" line="160" lineend="172" name="retry" signature="retry(retries, delaySecs, fn, *args, **keywords)"><variable ilk="argument" name="retries" /><variable ilk="argument" name="delaySecs" /><variable ilk="argument" name="fn" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="keywords" /><variable citdl="int" line="166" name="tries" /></scope><scope doc="Move interface to node, without retrying.&#xA;intf: string, interface&#xA;node: Node object&#xA;printError: if true, print error" ilk="function" line="174" lineend="187" name="moveIntfNoRetry" returns="bool" signature="moveIntfNoRetry(intf, node, printError=False)"><variable ilk="argument" name="intf" /><variable ilk="argument" name="node" /><variable citdl="False" ilk="argument" name="printError" /><variable citdl="str" line="179" name="cmd" /><variable citdl="node.cmd()" line="181" name="links" /></scope><scope doc="Move interface to node, retrying on failure.&#xA;intf: string, interface&#xA;node: Node object&#xA;printError: if true, print error" ilk="function" line="189" lineend="194" name="moveIntf" signature="moveIntf(intf, node, printError=False, retries=3, delaySecs=0.001)"><variable ilk="argument" name="intf" /><variable ilk="argument" name="node" /><variable citdl="False" ilk="argument" name="printError" /><variable citdl="int" ilk="argument" name="retries" /><variable citdl="float" ilk="argument" name="delaySecs" /></scope><scope doc="Dump connections to/from nodes." ilk="function" line="198" lineend="215" name="dumpNodeConnections" signature="dumpNodeConnections(nodes)"><variable ilk="argument" name="nodes" /><scope doc="Helper function: dump connections to node" ilk="function" line="201" lineend="210" name="dumpConnections" signature="dumpConnections(node)"><variable ilk="argument" name="node" /><variable citdl="list" line="206" name="intfs" /></scope></scope><scope doc="Dump connections in network" ilk="function" line="217" lineend="220" name="dumpNetConnections" signature="dumpNetConnections(net)"><variable ilk="argument" name="net" /><variable citdl="net.hosts" line="219" name="nodes" /></scope><scope attributes="protected" doc="Generate colon-hex string.&#xA;val: input as unsigned int&#xA;bytecount: number of bytes to convert&#xA;returns: chStr colon-hex string" ilk="function" line="224" lineend="234" name="_colonHex" returns="__builtins__.str.join()" signature="_colonHex(val, bytecount)"><variable ilk="argument" name="val" /><variable ilk="argument" name="bytecount" /><variable citdl="list" line="229" name="pieces" /><variable citdl="int" line="231" name="piece" /><variable citdl="__builtins__.str.join()" line="233" name="chStr" /></scope><scope doc="Generate MAC colon-hex string from unsigned int.&#xA;mac: MAC address as unsigned int&#xA;returns: macStr MAC colon-hex string" ilk="function" line="236" lineend="240" name="macColonHex" returns="_colonHex()" signature="macColonHex(mac)"><variable ilk="argument" name="mac" /></scope><scope doc="Generate IP address string from an unsigned int.&#xA;ip: unsigned int of form w &lt;&lt; 24 | x &lt;&lt; 16 | y &lt;&lt; 8 | z&#xA;returns: ip address string w.x.y.z, or 10.x.y.z if w==0" ilk="function" line="242" lineend="251" name="ipStr" returns="tuple" signature="ipStr(ip)"><variable ilk="argument" name="ip" /><variable citdl="int" line="246" name="w" /><variable citdl="int" line="248" name="x" /><variable citdl="int" line="249" name="y" /><variable citdl="int" line="250" name="z" /></scope><scope doc="Generate unsigned int from components of IP address&#xA;returns: w &lt;&lt; 24 | x &lt;&lt; 16 | y &lt;&lt; 8 | z" ilk="function" line="253" lineend="256" name="ipNum" returns="int" signature="ipNum(w, x, y, z)"><variable ilk="argument" name="w" /><variable ilk="argument" name="x" /><variable ilk="argument" name="y" /><variable ilk="argument" name="z" /></scope><scope doc="Return IP address string from ints&#xA;i: int to be added to ipbase&#xA;prefixLen: optional IP prefix length&#xA;ipBaseNum: option base IP address as int&#xA;returns IP address as string" ilk="function" line="258" lineend="268" name="ipAdd" returns="ipStr()" signature="ipAdd(i, prefixLen=8, ipBaseNum=167772160)"><variable ilk="argument" name="i" /><variable citdl="int" ilk="argument" name="prefixLen" /><variable citdl="int" ilk="argument" name="ipBaseNum" /><variable citdl="int" line="266" name="mask" /><variable citdl="int" line="267" name="ipnum" /></scope><scope doc="Parse an IP address and return an unsigned int." ilk="function" line="270" lineend="273" name="ipParse" returns="ipNum()" signature="ipParse(ip)"><variable ilk="argument" name="ip" /><variable citdl="list" line="272" name="args" /></scope><scope doc="Parse an IP network specification, returning&#xA;address and prefix len as unsigned ints" ilk="function" line="275" lineend="282" name="netParse" returns="tuple" signature="netParse(ipstr)"><variable ilk="argument" name="ipstr" /><variable citdl="int" line="278" name="prefixLen" /><variable line="280" name="ip" /><variable line="280" name="pf" /></scope><scope doc="Check if input string is an int" ilk="function" line="284" lineend="290" name="checkInt" returns="bool" signature="checkInt(s)"><variable ilk="argument" name="s" /></scope><scope doc="Check if input string is a float" ilk="function" line="292" lineend="298" name="checkFloat" returns="bool" signature="checkFloat(s)"><variable ilk="argument" name="s" /></scope><scope doc="Convert string to int or float if numeric." ilk="function" line="300" lineend="307" name="makeNumeric" returns="int()" signature="makeNumeric(s)"><variable ilk="argument" name="s" /></scope><scope doc="Monitor dict of hosts to popen objects&#xA;a line at a time&#xA;timeoutms: timeout for poll()&#xA;readline: return single line of output&#xA;yields: host, line/output (if any)&#xA;terminates: when all EOFs received" ilk="function" line="311" lineend="351" name="pmonitor" signature="pmonitor(popens, timeoutms=500, readline=True, readmax=1024)"><variable ilk="argument" name="popens" /><variable citdl="int" ilk="argument" name="timeoutms" /><variable citdl="True" ilk="argument" name="readline" /><variable citdl="int" ilk="argument" name="readmax" /><variable citdl="poll()" line="319" name="poller" /><variable citdl="dict" line="320" name="fdToHost" /><variable citdl="popen.stdout.fileno()" line="322" name="fd" /><variable citdl="fcntl()" line="327" name="flags" /><variable citdl="poller.poll()" line="330" name="fds" /><variable line="333" name="host" /><variable line="334" name="popen" /><variable citdl="popen.stdout.readline()" line="338" name="line" /></scope><scope doc="Fix ridiculously small resource limits." ilk="function" line="355" lineend="358" name="fixLimits" signature="fixLimits()" /><scope doc="Make sure cgroups file system is mounted" ilk="function" line="360" lineend="370" name="mountCgroups" signature="mountCgroups()"><variable citdl="quietRun()" line="362" name="mounts" /><variable citdl="str" line="363" name="cgdir" /><variable citdl="str" line="364" name="csdir" /></scope><scope doc="To sort sanely/alphabetically: sorted( l, key=natural )" ilk="function" line="372" lineend="377" name="natural" returns="list" signature="natural(text)"><variable ilk="argument" name="text" /><scope doc="Convert text segment to int if necessary" ilk="function" line="374" lineend="376" name="num" signature="num(s)"><variable ilk="argument" name="s" /></scope></scope><scope doc="Natural sort key function for sequences" ilk="function" line="379" lineend="381" name="naturalSeq" returns="list" signature="naturalSeq(t)"><variable ilk="argument" name="t" /></scope><scope doc="Returns number of CPU cores based on /proc/cpuinfo" ilk="function" line="383" lineend="391" name="numCores" returns="int()" signature="numCores()"><variable citdl="int()" line="388" name="ncores" /></scope><scope doc="Inclusive range from start to end (vs. Python insanity.)&#xA;irange(1,5) -&gt; 1, 2, 3, 4, 5" ilk="function" line="393" lineend="396" name="irange" returns="range()" signature="irange(start, end)"><variable ilk="argument" name="start" /><variable ilk="argument" name="end" /></scope><scope doc="Returns customized constructor for class cls." ilk="function" line="398" lineend="408" name="custom" returns="custom.customized" signature="custom(cls, **params)"><variable ilk="argument" name="cls" /><variable attributes="kwargs" ilk="argument" name="params" /><scope doc="Customized constructor" ilk="function" line="402" lineend="406" name="customized" returns="custom.cls()" signature="customized(*args, **kwargs)"><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" citdl="kwargs.copy()" ilk="argument" name="kwargs" /><variable citdl="str" line="407" name="__name__" /></scope></scope><scope doc="Split argument string into usable python arguments&#xA;argstr: argument string with format fn,arg2,kw1=arg3...&#xA;returns: fn, args, kwargs" ilk="function" line="410" lineend="424" name="splitArgs" returns="tuple" signature="splitArgs(argstr)"><variable ilk="argument" name="argstr" /><variable citdl="argstr.split()" line="414" name="split" /><variable line="415" name="fn" /><variable citdl="list" line="416" name="params" /><variable citdl="list" line="419" name="args" /><variable citdl="dict" line="420" name="kwargs" /><variable line="422" name="val" /><variable line="422" name="key" /></scope><scope doc="Return custom constructor based on argStr&#xA;The args and key/val pairs in argsStr will be automatically applied&#xA;when the generated constructor is later used." ilk="function" line="426" lineend="450" name="customConstructor" returns="customConstructor.customized" signature="customConstructor(constructors, argStr)"><variable ilk="argument" name="constructors" /><variable ilk="argument" name="argStr" /><variable line="431" name="kwargs" /><variable line="431" name="newargs" /><variable line="431" name="cname" /><variable citdl="constructors.get()" line="432" name="constructor" /><scope doc="Customized constructor, useful for Node, Link, and other classes" ilk="function" line="438" lineend="447" name="customized" returns="customConstructor.constructor()" signature="customized(name, *args, **params)"><variable ilk="argument" name="name" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" citdl="params.copy()" ilk="argument" name="params" /><variable citdl="str" line="449" name="__name__" /></scope></scope><scope doc="Create topology from string with format (object, arg1, arg2,...).&#xA;input topos is a dict of topo names to constructors, possibly w/args." ilk="function" line="452" lineend="460" name="buildTopo" signature="buildTopo(topos, topoStr)"><variable ilk="argument" name="topos" /><variable ilk="argument" name="topoStr" /><variable line="456" name="topo" /><variable line="456" name="args" /><variable line="456" name="kwargs" /></scope><scope doc="Ensure that we are running as root.&#xA;&#xA;Probably we should only sudo when needed as per Big Switch&apos;s patch." ilk="function" line="462" name="ensureRoot" signature="ensureRoot()" /></scope>