<scope doc="Library of potentially useful topologies for Mininet" ilk="blob" lang="Python" name="topolib" src="/home/mininet/mininet/mininet/topolib.py"><import line="3" module="mininet.topo" symbol="Topo" /><import line="4" module="mininet.net" symbol="Mininet" /><scope classrefs="Topo" doc="Topology for a tree network with a given depth and fanout." ilk="class" line="6" lineend="30" name="TreeTopo"><scope attributes="__ctor__" ilk="function" line="9" lineend="15" name="__init__" signature="TreeTopo(depth=1, fanout=2)"><variable citdl="TreeTopo" ilk="argument" name="self" /><variable citdl="int" ilk="argument" name="depth" /><variable citdl="int" ilk="argument" name="fanout" /></scope><variable attributes="__instancevar__" citdl="int" line="12" name="hostNum" /><variable attributes="__instancevar__" citdl="int" line="13" name="switchNum" /><scope doc="Add a subtree starting with node n.&#xA;returns: last node added" ilk="function" line="17" lineend="30" name="addTree" returns="self.addSwitch()" signature="addTree(depth, fanout)"><variable citdl="TreeTopo" ilk="argument" name="self" /><variable ilk="argument" name="depth" /><variable ilk="argument" name="fanout" /><variable citdl="bool" line="20" name="isSwitch" /><variable citdl="self.addSwitch()" line="22" name="node" /><variable citdl="()" line="25" name="child" /></scope></scope><scope doc="Convenience function for creating tree networks." ilk="function" line="33" lineend="36" name="TreeNet" returns="Mininet()" signature="TreeNet(depth=1, fanout=2, **kwargs)"><variable citdl="int" ilk="argument" name="depth" /><variable citdl="int" ilk="argument" name="fanout" /><variable attributes="kwargs" ilk="argument" name="kwargs" /><variable citdl="TreeTopo" line="35" name="topo" /></scope></scope>