<scope doc="link.py: interface and link abstractions for mininet" ilk="blob" lang="Python" name="link" src="/home/mininet/mininet/mininet/link.py"><import line="27" module="mininet.log" symbol="info" /><import line="27" module="mininet.log" symbol="error" /><import line="27" module="mininet.log" symbol="debug" /><import line="28" module="mininet.util" symbol="makeIntfPair" /><import line="29" module="time" symbol="sleep" /><import line="30" module="re" /><scope classrefs="object" doc="Basic interface object that can configure itself." ilk="class" line="32" lineend="172" name="Intf"><scope attributes="__ctor__" doc="name: interface name (e.g. h1-eth0)&#xA;node: owning node (where this intf most likely lives)&#xA;link: parent link if we&apos;re part of a link&#xA;other arguments are passed to config()" ilk="function" line="36" lineend="49" name="__init__" signature="Intf(name, node=None, port=None, link=None, **params)"><variable citdl="Intf" ilk="argument" name="self" /><variable ilk="argument" name="name" /><variable ilk="argument" name="node" /><variable ilk="argument" name="port" /><variable ilk="argument" name="link" /><variable attributes="kwargs" ilk="argument" name="params" /></scope><variable attributes="__instancevar__" line="41" name="node" /><variable attributes="__instancevar__" line="42" name="name" /><variable attributes="__instancevar__" line="43" name="link" /><variable attributes="__instancevar__" line="44" name="ip" /><variable attributes="__instancevar__" line="44" name="prefixLen" /><variable attributes="__instancevar__" line="44" name="mac" /><variable attributes="__instancevar__" line="48" name="params" /><scope doc="Run a command in our owning node" ilk="function" line="51" lineend="53" name="cmd" returns="self.node.cmd()" signature="cmd(*args, **kwargs)"><variable citdl="Intf" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /><variable attributes="kwargs" ilk="argument" name="kwargs" /></scope><scope doc="Configure ourselves using ifconfig" ilk="function" line="55" lineend="57" name="ifconfig" returns="Intf.cmd()" signature="ifconfig(*args)"><variable citdl="Intf" ilk="argument" name="self" /><variable attributes="varargs" ilk="argument" name="args" /></scope><scope doc="Set our IP address" ilk="function" line="59" lineend="68" name="setIP" returns="Intf.ifconfig()" signature="setIP(ipstr, prefixLen=None)"><variable citdl="Intf" ilk="argument" name="self" /><variable ilk="argument" name="ipstr" /><variable ilk="argument" name="prefixLen" /></scope><scope doc="Set the MAC address for an interface.&#xA;macstr: MAC address as string" ilk="function" line="70" lineend="76" name="setMAC" returns="Intf.ifconfig()" signature="setMAC(macstr)"><variable citdl="Intf" ilk="argument" name="self" /><variable ilk="argument" name="macstr" /></scope><variable attributes="protected" citdl="re.compile()" line="78" name="_ipMatchRegex" /><variable attributes="protected" citdl="re.compile()" line="79" name="_macMatchRegex" /><scope doc="Return updated IP address based on ifconfig" ilk="function" line="81" lineend="86" name="updateIP" signature="updateIP()"><variable citdl="Intf" ilk="argument" name="self" /><variable citdl="ifconfig()" line="83" name="ifconfig" /><variable citdl="self._ipMatchRegex.findall()" line="84" name="ips" /></scope><scope doc="Return updated MAC address based on ifconfig" ilk="function" line="88" lineend="93" name="updateMAC" signature="updateMAC()"><variable citdl="Intf" ilk="argument" name="self" /><variable citdl="ifconfig()" line="90" name="ifconfig" /><variable citdl="self._macMatchRegex.findall()" line="91" name="macs" /></scope><scope doc="Return IP address" ilk="function" line="95" lineend="97" name="IP" signature="IP()"><variable citdl="Intf" ilk="argument" name="self" /></scope><scope doc="Return MAC address" ilk="function" line="99" lineend="101" name="MAC" signature="MAC()"><variable citdl="Intf" ilk="argument" name="self" /></scope><scope doc="Return whether interface is up" ilk="function" line="103" lineend="107" name="isUp" returns="bool" signature="isUp(setUp=False)"><variable citdl="Intf" ilk="argument" name="self" /><variable citdl="False" ilk="argument" name="setUp" /></scope><scope doc="Rename interface" ilk="function" line="109" lineend="115" name="rename" returns="cmd()" signature="rename(newname)"><variable citdl="Intf" ilk="argument" name="self" /><variable ilk="argument" name="newname" /><variable citdl="cmd()" line="112" name="result" /></scope><scope doc="Internal method: configure a *single* parameter&#xA;results: dict of results to update&#xA;method: config method name&#xA;param: arg=value (ignore if value=None)&#xA;value may also be list or dict" ilk="function" line="123" lineend="140" name="setParam" returns="f()" signature="setParam(results, method, **param)"><variable citdl="Intf" ilk="argument" name="self" /><variable ilk="argument" name="results" /><variable ilk="argument" name="method" /><variable attributes="kwargs" ilk="argument" name="param" /><variable citdl="getattr()" line="130" name="f" /><variable citdl="f()" line="134" name="result" /></scope><scope doc="Configure Node according to (optional) parameters:&#xA;mac: MAC address&#xA;ip: IP address&#xA;ifconfig: arbitrary interface configuration&#xA;Subclasses should override this method and call&#xA;the parent class&apos;s config(**params)" ilk="function" line="142" lineend="160" name="config" returns="dict" signature="config(mac=None, ip=None, ifconfig=None, up=True, **_params)"><variable citdl="Intf" ilk="argument" name="self" /><variable ilk="argument" name="mac" /><variable ilk="argument" name="ip" /><variable ilk="argument" name="ifconfig" /><variable citdl="True" ilk="argument" name="up" /><variable attributes="kwargs" ilk="argument" name="_params" /><variable citdl="dict" line="153" name="r" /></scope><scope doc="Delete interface" ilk="function" line="162" lineend="166" name="delete" signature="delete()"><variable citdl="Intf" ilk="argument" name="self" /></scope><scope ilk="function" line="168" lineend="169" name="__repr__" returns="tuple" signature="__repr__()"><variable citdl="Intf" ilk="argument" name="self" /></scope><scope ilk="function" line="171" lineend="172" name="__str__" signature="__str__()"><variable citdl="Intf" ilk="argument" name="self" /></scope></scope><scope classrefs="Intf" doc="Interface customized by tc (traffic control) utility&#xA;Allows specification of bandwidth limits (various methods)&#xA;as well as delay, loss and max queue length" ilk="class" line="175" lineend="312" name="TCIntf"><scope doc="Return tc commands to set bandwidth" ilk="function" line="180" lineend="229" name="bwCmds" returns="tuple" signature="bwCmds(bw=None, speedup=0, use_hfsc=False, use_tbf=False, latency_ms=None, enable_ecn=False, enable_red=False)"><variable citdl="TCIntf" ilk="argument" name="self" /><variable citdl="int" ilk="argument" name="bw" /><variable citdl="int" ilk="argument" name="speedup" /><variable citdl="False" ilk="argument" name="use_hfsc" /><variable citdl="False" ilk="argument" name="use_tbf" /><variable ilk="argument" name="latency_ms" /><variable citdl="False" ilk="argument" name="enable_ecn" /><variable citdl="False" ilk="argument" name="enable_red" /><variable citdl="str" line="184" name="parent" /><variable citdl="list" line="184" name="cmds" /></scope><scope doc="Internal method: return tc commands for delay and loss" ilk="function" line="232" lineend="254" name="delayCmds" returns="list" signature="delayCmds(delay=None, jitter=None, loss=None, max_queue_size=None)"><variable citdl="TCIntf" ilk="argument" name="parent" /><variable ilk="argument" name="delay" /><variable ilk="argument" name="jitter" /><variable ilk="argument" name="loss" /><variable ilk="argument" name="max_queue_size" /><variable citdl="list" line="235" name="cmds" /><variable citdl="str" line="244" name="netemargs" /></scope><scope doc="Execute tc command for our interface" ilk="function" line="256" lineend="260" name="tc" returns="self.cmd()" signature="tc(cmd, tc=&apos;tc&apos;)"><variable citdl="TCIntf" ilk="argument" name="self" /><variable ilk="argument" name="cmd" /><variable citdl="str" ilk="argument" name="tc" /><variable citdl="tuple" line="258" name="c" /></scope><scope doc="Configure the port and set its properties." ilk="function" line="262" lineend="312" name="config" returns="Intf.config()" signature="config(bw=None, delay=None, jitter=None, loss=None, disable_gro=True, speedup=0, use_hfsc=False, use_tbf=False, latency_ms=None, enable_ecn=False, enable_red=False, max_queue_size=None, **params)"><variable citdl="TCIntf" ilk="argument" name="self" /><variable ilk="argument" name="bw" /><variable ilk="argument" name="delay" /><variable ilk="argument" name="jitter" /><variable ilk="argument" name="loss" /><variable citdl="True" ilk="argument" name="disable_gro" /><variable citdl="int" ilk="argument" name="speedup" /><variable citdl="False" ilk="argument" name="use_hfsc" /><variable citdl="False" ilk="argument" name="use_tbf" /><variable ilk="argument" name="latency_ms" /><variable citdl="False" ilk="argument" name="enable_ecn" /><variable citdl="False" ilk="argument" name="enable_red" /><variable ilk="argument" name="max_queue_size" /><variable attributes="kwargs" ilk="argument" name="params" /><variable citdl="Intf.config()" line="268" name="result" /><variable citdl="list" line="281" name="cmds" /><variable line="284" name="parent" /><variable line="284" name="bwcmds" /><variable line="297" name="stuff" /><variable citdl="list" line="307" name="tcoutputs" /></scope></scope><scope classrefs="object" doc="A basic link is just a veth pair.&#xA;Other types of links could be tunnels, link emulators, etc.." ilk="class" line="315" lineend="386" name="Link"><scope attributes="__ctor__" doc="Create veth link to another node, making two new interfaces.&#xA;node1: first node&#xA;node2: second node&#xA;port1: node1 port number (optional)&#xA;port2: node2 port number (optional)&#xA;intf: default interface class/constructor&#xA;cls1, cls2: optional interface-specific constructors&#xA;intfName1: node1 interface name (optional)&#xA;intfName2: node2  interface name (optional)&#xA;params1: parameters for interface 1&#xA;params2: parameters for interface 2" ilk="function" line="320" lineend="364" name="__init__" signature="Link(node1, node2, port1=None, port2=None, intfName1=None, intfName2=None, intf=Intf, cls1=None, cls2=None, params1=None, params2=None)"><variable citdl="Link" ilk="argument" name="self" /><variable ilk="argument" name="node1" /><variable ilk="argument" name="node2" /><variable citdl="node1.newPort()" ilk="argument" name="port1" /><variable citdl="node2.newPort()" ilk="argument" name="port2" /><variable citdl="self.intfName()" ilk="argument" name="intfName1" /><variable citdl="self.intfName()" ilk="argument" name="intfName2" /><variable citdl="Intf" ilk="argument" name="intf" /><variable citdl="Intf" ilk="argument" name="cls1" /><variable citdl="Intf" ilk="argument" name="cls2" /><variable citdl="dict" ilk="argument" name="params1" /><variable citdl="dict" ilk="argument" name="params2" /><variable citdl="cls1()" line="358" name="intf1" /><variable citdl="cls2()" line="360" name="intf2" /></scope><variable attributes="__instancevar__" citdl="cls1()" line="364" name="intf1" /><variable attributes="__instancevar__" citdl="cls2()" line="364" name="intf2" /><scope doc="Construct a canonical interface name node-ethN for interface n." ilk="function" line="367" lineend="369" name="intfName" returns="node.name" signature="intfName(node, n)"><variable citdl="Link" ilk="argument" name="cls" /><variable ilk="argument" name="node" /><variable ilk="argument" name="n" /></scope><scope doc="Create pair of interfaces&#xA;intf1: name of interface 1&#xA;intf2: name of interface 2&#xA;(override this class method [and possibly delete()]&#xA;to change link type)" ilk="function" line="372" lineend="378" name="makeIntfPair" signature="makeIntfPair(intf1, intf2)"><variable citdl="Link" ilk="argument" name="cls" /><variable ilk="argument" name="intf1" /><variable ilk="argument" name="intf2" /></scope><scope doc="Delete this link" ilk="function" line="380" lineend="383" name="delete" signature="delete()"><variable citdl="Link" ilk="argument" name="self" /></scope><scope ilk="function" line="385" lineend="386" name="__str__" returns="tuple" signature="__str__()"><variable citdl="Link" ilk="argument" name="self" /></scope></scope><scope classrefs="Link" doc="Link with symmetric TC interfaces configured via opts" ilk="class" line="388" lineend="397" name="TCLink"><scope attributes="__ctor__" ilk="function" line="390" lineend="397" name="__init__" signature="TCLink(node1, node2, port1=None, port2=None, intfName1=None, intfName2=None, **params)"><variable citdl="TCLink" ilk="argument" name="self" /><variable ilk="argument" name="node1" /><variable ilk="argument" name="node2" /><variable ilk="argument" name="port1" /><variable ilk="argument" name="port2" /><variable ilk="argument" name="intfName1" /><variable ilk="argument" name="intfName2" /><variable attributes="kwargs" ilk="argument" name="params" /></scope></scope></scope>