<scope doc="Functional interface to graph methods and assorted&#xA;utilities." ilk="blob" lang="Python" name="function" src="/usr/lib/pymodules/python2.7/networkx/classes/function.py"><import alias="nx" line="10" module="networkx" /><variable citdl="__builtins__.str.join()" line="11" name="__author__" /><variable citdl="list" line="14" name="__all__" /><scope doc="Return a copy of the graph nodes in a list." ilk="function" line="22" lineend="24" name="nodes" returns="G.nodes()" signature="nodes(G)"><variable ilk="argument" name="G" /></scope><scope doc="Return an iterator over the graph nodes." ilk="function" line="26" lineend="28" name="nodes_iter" returns="G.nodes_iter()" signature="nodes_iter(G)"><variable ilk="argument" name="G" /></scope><scope doc="Return list of  edges adjacent to nodes in nbunch.&#xA;&#xA;Return all edges if nbunch is unspecified or nbunch=None.&#xA;&#xA;For digraphs, edges=out_edges" ilk="function" line="30" lineend="37" name="edges" returns="G.edges()" signature="edges(G, nbunch=None)"><variable ilk="argument" name="G" /><variable ilk="argument" name="nbunch" /></scope><scope doc="Return iterator over  edges adjacent to nodes in nbunch.&#xA;&#xA;Return all edges if nbunch is unspecified or nbunch=None.&#xA;&#xA;For digraphs, edges=out_edges" ilk="function" line="39" lineend="46" name="edges_iter" returns="G.edges_iter()" signature="edges_iter(G, nbunch=None)"><variable ilk="argument" name="G" /><variable ilk="argument" name="nbunch" /></scope><scope doc="Return degree of single node or of nbunch of nodes.&#xA;If nbunch is ommitted, then return degrees of *all* nodes." ilk="function" line="48" lineend="52" name="degree" returns="G.degree()" signature="degree(G, nbunch=None, weight=None)"><variable ilk="argument" name="G" /><variable ilk="argument" name="nbunch" /><variable ilk="argument" name="weight" /></scope><scope doc="Return a list of nodes connected to node n. " ilk="function" line="54" lineend="56" name="neighbors" returns="G.neighbors()" signature="neighbors(G, n)"><variable ilk="argument" name="G" /><variable ilk="argument" name="n" /></scope><scope doc="Return the number of nodes in the graph." ilk="function" line="58" lineend="60" name="number_of_nodes" returns="G.number_of_nodes()" signature="number_of_nodes(G)"><variable ilk="argument" name="G" /></scope><scope doc="Return the number of edges in the graph. " ilk="function" line="62" lineend="64" name="number_of_edges" returns="G.number_of_edges()" signature="number_of_edges(G)"><variable ilk="argument" name="G" /></scope><scope doc="Return the density of a graph.&#xA;&#xA;The density for undirected graphs is&#xA;&#xA;.. math::&#xA;&#xA;   d = \frac{2m}{n(n-1)},&#xA;&#xA;and for directed graphs is&#xA;&#xA;.. math::&#xA;&#xA;   d = \frac{m}{n(n-1)},&#xA;&#xA;where `n` is the number of nodes and `m`  is the number of edges in `G`.&#xA;&#xA;Notes&#xA;-----&#xA;The density is 0 for an graph without edges and 1.0 for a complete graph.&#xA;&#xA;The density of multigraphs can be higher than 1." ilk="function" line="66" lineend="98" name="density" returns="float" signature="density(G)"><variable ilk="argument" name="G" /><variable citdl="number_of_nodes()" line="89" name="n" /><variable citdl="number_of_edges()" line="90" name="m" /><variable citdl="number_of_edges()" line="92" name="d" /></scope><scope doc="Return a list of the frequency of each degree value.&#xA;&#xA;Parameters&#xA;----------&#xA;G : Networkx graph&#xA;   A graph&#xA;&#xA;Returns&#xA;-------&#xA;hist : list&#xA;   A list of frequencies of degrees.&#xA;   The degree values are the index in the list.&#xA;&#xA;Notes&#xA;-----&#xA;Note: the bins are width one, hence len(list) can be large&#xA;(Order(number_of_edges))" ilk="function" line="100" lineend="124" name="degree_histogram" returns="list" signature="degree_histogram(G)"><variable ilk="argument" name="G" /><variable citdl="list()" line="119" name="degseq" /><variable citdl="max()" line="120" name="dmax" /><variable citdl="list" line="121" name="freq" /></scope><scope doc="Return True if graph is directed." ilk="function" line="126" lineend="128" name="is_directed" returns="G.is_directed()" signature="is_directed(G)"><variable ilk="argument" name="G" /></scope><scope doc="Modify graph to prevent further change by adding or removing&#xA;nodes or edges.&#xA;&#xA;Node and edge data can still be modified.&#xA;&#xA;Parameters&#xA;-----------&#xA;G : graph&#xA;  A NetworkX graph&#xA;&#xA;Examples&#xA;--------&#xA;&gt;&gt;&gt; G=nx.Graph()&#xA;&gt;&gt;&gt; G.add_path([0,1,2,3])&#xA;&gt;&gt;&gt; G=nx.freeze(G)&#xA;&gt;&gt;&gt; try:&#xA;...    G.add_edge(4,5)&#xA;... except nx.NetworkXError as e:&#xA;...    print(str(e))&#xA;Frozen graph can&apos;t be modified&#xA;&#xA;Notes&#xA;-----&#xA;To &quot;unfreeze&quot; a graph you must make a copy by creating a new graph object:&#xA;&#xA;&gt;&gt;&gt; graph = nx.path_graph(4)&#xA;&gt;&gt;&gt; frozen_graph = nx.freeze(graph)&#xA;&gt;&gt;&gt; unfrozen_graph = nx.Graph(frozen_graph)&#xA;&gt;&gt;&gt; nx.is_frozen(unfrozen_graph)&#xA;False&#xA;&#xA;See Also&#xA;--------&#xA;is_frozen" ilk="function" line="131" lineend="179" name="freeze" signature="freeze(G)"><variable ilk="argument" name="G" /><scope ilk="function" line="167" lineend="168" name="frozen" signature="frozen(*args)"><variable attributes="varargs" ilk="argument" name="args" /></scope></scope><scope doc="Return True if graph is frozen.&#xA;&#xA;Parameters&#xA;-----------&#xA;G : graph&#xA;  A NetworkX graph&#xA;&#xA;See Also&#xA;--------&#xA;freeze" ilk="function" line="181" lineend="196" name="is_frozen" returns="G.frozen" signature="is_frozen(G)"><variable ilk="argument" name="G" /></scope><scope doc="Return the subgraph induced on nodes in nbunch.&#xA;&#xA;Parameters&#xA;----------&#xA;G : graph&#xA;   A NetworkX graph&#xA;&#xA;nbunch : list, iterable&#xA;   A container of nodes that will be iterated through once (thus&#xA;   it should be an iterator or be iterable).  Each element of the&#xA;   container should be a valid node type: any hashable type except&#xA;   None.  If nbunch is None, return all edges data in the graph.&#xA;   Nodes in nbunch that are not in the graph will be (quietly)&#xA;   ignored.&#xA;&#xA;Notes&#xA;-----&#xA;subgraph(G) calls G.subgraph()" ilk="function" line="198" lineend="218" name="subgraph" returns="G.subgraph()" signature="subgraph(G, nbunch)"><variable ilk="argument" name="G" /><variable ilk="argument" name="nbunch" /></scope><scope doc="Return a copy of the graph G with all of the edges removed.&#xA;&#xA;Parameters&#xA;----------&#xA;G : graph&#xA;   A NetworkX graph&#xA;&#xA;with_nodes :  bool (default=True)&#xA;   Include nodes.&#xA;&#xA;Notes&#xA;-----&#xA;Graph, node, and edge data is not propagated to the new graph." ilk="function" line="220" lineend="238" name="create_empty_copy" returns="G.__class__()" signature="create_empty_copy(G, with_nodes=True)"><variable ilk="argument" name="G" /><variable citdl="True" ilk="argument" name="with_nodes" /><variable citdl="G.__class__()" line="235" name="H" /></scope><scope doc="Print short summary of information for the graph G or the node n.&#xA;&#xA;Parameters&#xA;----------&#xA;G : Networkx graph&#xA;   A graph&#xA;n : node (any hashable)&#xA;   A node in the graph G" ilk="function" line="241" lineend="277" name="info" returns="str" signature="info(G, n=None)"><variable ilk="argument" name="G" /><variable ilk="argument" name="n" /><variable citdl="str" line="251" name="info" /><variable citdl="list" line="254" name="type_name" /><variable citdl="G.number_of_nodes()" line="258" name="nnodes" /><variable citdl="sum()" line="266" name="s" /></scope><scope doc="Set node attributes from dictionary of nodes and values&#xA;&#xA;Parameters&#xA;----------&#xA;G : NetworkX Graph&#xA;&#xA;name : string&#xA;   Attribute name&#xA;&#xA;attributes: dict&#xA;   Dictionary of attributes keyed by node.&#xA;&#xA;Examples&#xA;--------&#xA;&gt;&gt;&gt; G=nx.path_graph(3)&#xA;&gt;&gt;&gt; bb=nx.betweenness_centrality(G)&#xA;&gt;&gt;&gt; nx.set_node_attributes(G,&apos;betweenness&apos;,bb)&#xA;&gt;&gt;&gt; G.node[1][&apos;betweenness&apos;]&#xA;1.0" ilk="function" line="279" lineend="301" name="set_node_attributes" signature="set_node_attributes(G, name, attributes)"><variable ilk="argument" name="G" /><variable ilk="argument" name="name" /><variable ilk="argument" name="attributes" /></scope><scope doc="Get node attributes from graph&#xA;&#xA;Parameters&#xA;----------&#xA;G : NetworkX Graph&#xA;&#xA;name : string&#xA;   Attribute name&#xA;&#xA;Returns&#xA;-------&#xA;Dictionary of attributes keyed by node.&#xA;&#xA;Examples&#xA;--------&#xA;&gt;&gt;&gt; G=nx.Graph()&#xA;&gt;&gt;&gt; G.add_nodes_from([1,2,3],color=&apos;red&apos;)&#xA;&gt;&gt;&gt; color=nx.get_node_attributes(G,&apos;color&apos;)&#xA;&gt;&gt;&gt; color[1]&#xA;&apos;red&apos;" ilk="function" line="303" lineend="325" name="get_node_attributes" returns="dict()" signature="get_node_attributes(G, name)"><variable ilk="argument" name="G" /><variable ilk="argument" name="name" /></scope><scope doc="Set edge attributes from dictionary of edge tuples and values&#xA;&#xA;Parameters&#xA;----------&#xA;G : NetworkX Graph&#xA;&#xA;name : string&#xA;   Attribute name&#xA;&#xA;attributes: dict&#xA;   Dictionary of attributes keyed by edge (tuple).&#xA;&#xA;Examples&#xA;--------&#xA;&gt;&gt;&gt; G=nx.path_graph(3)&#xA;&gt;&gt;&gt; bb=nx.edge_betweenness_centrality(G, normalized=False)&#xA;&gt;&gt;&gt; nx.set_edge_attributes(G,&apos;betweenness&apos;,bb)&#xA;&gt;&gt;&gt; G[1][2][&apos;betweenness&apos;]&#xA;2.0" ilk="function" line="328" lineend="350" name="set_edge_attributes" signature="set_edge_attributes(G, name, attributes)"><variable ilk="argument" name="G" /><variable ilk="argument" name="name" /><variable ilk="argument" name="attributes" /></scope><scope doc="Get edge attributes from graph&#xA;&#xA;Parameters&#xA;----------&#xA;G : NetworkX Graph&#xA;&#xA;name : string&#xA;   Attribute name&#xA;&#xA;Returns&#xA;-------&#xA;Dictionary of attributes keyed by node.&#xA;&#xA;Examples&#xA;--------&#xA;&gt;&gt;&gt; G=nx.Graph()&#xA;&gt;&gt;&gt; G.add_path([1,2,3],color=&apos;red&apos;)&#xA;&gt;&gt;&gt; color=nx.get_edge_attributes(G,&apos;color&apos;)&#xA;&gt;&gt;&gt; color[(1,2)]&#xA;&apos;red&apos;" ilk="function" line="352" lineend="374" name="get_edge_attributes" returns="dict()" signature="get_edge_attributes(G, name)"><variable ilk="argument" name="G" /><variable ilk="argument" name="name" /></scope><scope doc="Returns all of the neighbors of a node in the graph.&#xA;&#xA;   If the graph is directed returns predecessors as well as successors.&#xA;&#xA;   Parameters&#xA;   ----------&#xA;   graph : NetworkX graph&#xA;       Graph to find neighbors.&#xA;&#xA;   node : node&#xA;       The node whose neighbors will be returned.&#xA;&#xA;   Returns&#xA;   -------&#xA;   neighbors : iterator&#xA;       Iterator of neighbors&#xA;   " ilk="function" line="377" lineend="401" name="all_neighbors" returns="itertools.chain.from_iterable()" signature="all_neighbors(graph, node)"><variable ilk="argument" name="graph" /><variable ilk="argument" name="node" /><variable citdl="itertools.chain.from_iterable()" line="396" name="values" /></scope><scope doc="Returns the non-neighbors of the node in the graph.&#xA;&#xA;Parameters&#xA;----------&#xA;graph : NetworkX graph&#xA;    Graph to find neighbors.&#xA;&#xA;node : node&#xA;    The node whose neighbors will be returned.&#xA;&#xA;Returns&#xA;-------&#xA;non_neighbors : iterator&#xA;    Iterator of nodes in the graph that are not neighbors of the node." ilk="function" line="403" lineend="420" name="non_neighbors" signature="non_neighbors(graph, node)"><variable ilk="argument" name="graph" /><variable ilk="argument" name="node" /><variable citdl="int" line="419" name="nbors" /></scope></scope>