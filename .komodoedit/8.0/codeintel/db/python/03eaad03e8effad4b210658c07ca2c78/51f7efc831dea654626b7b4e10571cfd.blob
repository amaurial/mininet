<scope doc="Test bandwidth (using iperf) on linear networks of varying&#xA;size, using both kernel and user datapaths." ilk="blob" lang="Python" name="linearbandwidth" src="/home/mininet/mininet/examples/linearbandwidth.py"><import line="26" module="mininet.net" symbol="Mininet" /><import line="27" module="mininet.node" symbol="UserSwitch" /><import line="27" module="mininet.node" symbol="OVSKernelSwitch" /><import line="28" module="mininet.topo" symbol="Topo" /><import line="29" module="mininet.log" symbol="lg" /><import line="30" module="mininet.util" symbol="irange" /><import line="32" module="sys" /><variable citdl="sys.stdout.flush" line="33" name="flush" /><scope classrefs="Topo" doc="Topology for a string of N hosts and N-1 switches." ilk="class" line="35" lineend="59" name="LinearTestTopo"><scope attributes="__ctor__" ilk="function" line="38" lineend="59" name="__init__" signature="LinearTestTopo(N, **params)"><variable citdl="LinearTestTopo" ilk="argument" name="self" /><variable ilk="argument" name="N" /><variable attributes="kwargs" ilk="argument" name="params" /><variable citdl="list" line="44" name="hosts" /><variable citdl="list" line="46" name="switches" /><variable citdl="switch" line="50" name="last" /></scope></scope><scope doc="Check bandwidth at various lengths along a switch chain." ilk="function" line="62" lineend="104" name="linearBandwidthTest" signature="linearBandwidthTest(lengths)"><variable ilk="argument" name="lengths" /><variable citdl="dict" line="66" name="results" /><variable citdl="max()" line="67" name="switchCount" /><variable citdl="max()" line="68" name="hostCount" /><variable citdl="dict" line="70" name="switches" /><variable citdl="LinearTestTopo" line="73" name="topo" /><variable line="77" name="Switch" /><variable citdl="Mininet()" line="79" name="net" /><variable line="86" name="src" /><variable line="86" name="dst" /><variable citdl="net.iperf()" line="88" name="bandwidth" /><variable line="98" name="result" /></scope><variable citdl="list" line="108" name="sizes" /></scope>