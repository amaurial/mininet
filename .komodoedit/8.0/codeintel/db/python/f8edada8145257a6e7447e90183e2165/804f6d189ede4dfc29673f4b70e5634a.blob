<scope doc="A stupid L3 switch" ilk="blob" lang="Python" name="l3_learning" src="/home/mininet/new_pox/pox/pox/forwarding/l3_learning.py"><import line="31" module="pox.core" symbol="core" /><import line="32" module="pox" /><import line="35" module="pox.lib.packet.ethernet" symbol="ethernet" /><import line="35" module="pox.lib.packet.ethernet" symbol="ETHER_BROADCAST" /><import line="36" module="pox.lib.packet.ipv4" symbol="ipv4" /><import line="37" module="pox.lib.packet.arp" symbol="arp" /><import line="38" module="pox.lib.addresses" symbol="IPAddr" /><import line="38" module="pox.lib.addresses" symbol="EthAddr" /><import line="39" module="pox.lib.util" symbol="str_to_bool" /><import line="39" module="pox.lib.util" symbol="dpidToStr" /><import line="40" module="pox.lib.recoco" symbol="Timer" /><import alias="of" line="42" module="pox.openflow.libopenflow_01" /><import line="44" module="pox.lib.revent" symbol="*" /><import line="46" module="time" /><variable citdl="core.getLogger()" line="33" name="log" /><variable citdl="int" line="49" name="FLOW_IDLE_TIMEOUT" /><variable citdl="int" line="52" name="ARP_TIMEOUT" /><variable citdl="int" line="55" name="MAX_BUFFERED_PER_IP" /><variable citdl="int" line="58" name="MAX_BUFFER_TIME" /><scope classrefs="object" doc="Not strictly an ARP entry.&#xA;We use the port to determine which port to forward traffic out of.&#xA;We use the MAC to answer ARP replies.&#xA;We use the timeout so that if an entry is older than ARP_TIMEOUT, we&#xA; flood the ARP request rather than try to answer it ourselves." ilk="class" line="61" lineend="84" name="Entry"><scope attributes="__ctor__" ilk="function" line="69" lineend="72" name="__init__" signature="Entry(port, mac)"><variable citdl="Entry" ilk="argument" name="self" /><variable ilk="argument" name="port" /><variable ilk="argument" name="mac" /></scope><variable attributes="__instancevar__" citdl="time.time()" line="70" name="timeout" /><variable attributes="__instancevar__" line="71" name="port" /><variable attributes="__instancevar__" line="72" name="mac" /><scope ilk="function" line="74" lineend="78" name="__eq__" returns="bool" signature="__eq__(other)"><variable citdl="Entry" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope ilk="function" line="79" lineend="80" name="__ne__" returns="bool" signature="__ne__(other)"><variable citdl="Entry" ilk="argument" name="self" /><variable ilk="argument" name="other" /></scope><scope ilk="function" line="82" lineend="84" name="isExpired" returns="bool" signature="isExpired()"><variable citdl="Entry" ilk="argument" name="self" /></scope></scope><scope ilk="function" line="87" lineend="88" name="dpid_to_mac" returns="EthAddr()" signature="dpid_to_mac(dpid)"><variable ilk="argument" name="dpid" /></scope><scope classrefs="EventMixin" ilk="class" line="91" lineend="331" name="l3_switch"><scope attributes="__ctor__" ilk="function" line="92" lineend="116" name="__init__" signature="l3_switch(fakeways=[], arp_for_unknowns=False)"><variable citdl="l3_switch" ilk="argument" name="self" /><variable citdl="list" ilk="argument" name="fakeways" /><variable citdl="False" ilk="argument" name="arp_for_unknowns" /></scope><variable attributes="__instancevar__" citdl="set()" line="95" name="fakeways" /><variable attributes="__instancevar__" citdl="False" line="99" name="arp_for_unknowns" /><variable attributes="__instancevar__" citdl="dict" line="103" name="outstanding_arps" /><variable attributes="__instancevar__" citdl="dict" line="108" name="lost_buffers" /><variable attributes="__instancevar__" citdl="dict" line="111" name="arpTable" /><variable attributes="protected __instancevar__" citdl="Timer()" line="114" name="_expire_timer" /><scope attributes="protected" ilk="function" line="118" lineend="135" name="_handle_expiration" signature="_handle_expiration()"><variable citdl="l3_switch" ilk="argument" name="self" /><variable citdl="list" line="120" name="empty" /><variable citdl="of.ofp_packet_out()" line="129" name="po" /></scope><scope attributes="protected" doc="We may have &quot;lost&quot; buffers -- packets we got but didn&apos;t know&#xA;where to send at the time.  We may know now.  Try and see." ilk="function" line="137" lineend="152" name="_send_lost_buffers" signature="_send_lost_buffers(dpid, ipaddr, macaddr, port)"><variable citdl="l3_switch" ilk="argument" name="self" /><variable ilk="argument" name="dpid" /><variable ilk="argument" name="ipaddr" /><variable ilk="argument" name="macaddr" /><variable ilk="argument" name="port" /><variable line="144" name="bucket" /><variable citdl="of.ofp_packet_out()" line="149" name="po" /></scope><scope attributes="protected" ilk="function" line="154" lineend="156" name="_handle_GoingUpEvent" signature="_handle_GoingUpEvent(event)"><variable citdl="l3_switch" ilk="argument" name="self" /><variable ilk="argument" name="event" /></scope><scope attributes="protected" ilk="function" line="158" lineend="331" name="_handle_PacketIn" signature="_handle_PacketIn(event)"><variable citdl="l3_switch" ilk="argument" name="self" /><variable ilk="argument" name="event" /><variable citdl="event.connection.dpid" line="159" name="dpid" /><variable citdl="event.port" line="160" name="inport" /><variable citdl="event.parsed" line="161" name="packet" /><variable citdl="packet.next.dstip" line="193" name="dstaddr" /><variable line="197" name="prt" /><variable line="198" name="mac" /><variable citdl="list" line="206" name="actions" /><variable citdl="of.ofp_match.from_packet()" line="209" name="match" /><variable citdl="of.ofp_packet_out()" line="212" name="msg" /><variable line="230" name="bucket" /><variable citdl="tuple" line="231" name="entry" /><variable citdl="arp()" line="247" name="r" /><variable citdl="ethernet()" line="257" name="e" /><variable citdl="packet.next" line="269" name="a" /></scope></scope><scope ilk="function" line="334" lineend="341" name="launch" signature="launch(fakeways=&apos;&apos;, arp_for_unknowns=None)"><variable citdl="list" ilk="argument" name="fakeways" /><variable citdl="str_to_bool()" ilk="argument" name="arp_for_unknowns" /></scope></scope>