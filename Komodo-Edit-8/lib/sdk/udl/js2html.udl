# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
# 
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is Komodo code.
# 
# The Initial Developer of the Original Code is ActiveState Software Inc.
# Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
# ActiveState Software Inc. All Rights Reserved.
# 
# Contributor(s):
#   ActiveState Software Inc
# 
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
# 
# ***** END LICENSE BLOCK *****

# Another transition thing
# This is exactly like css2html.txt, with macro replacement

family csl

state IN_CSL_DEFAULT:
'</' : paint(upto, CSL_DEFAULT) => IN_CSL2H_1

# Check to see if we're actually ending a script tag, or just
# typing some random characters

state IN_CSL2H_1:
/script\b/i: paint(upto, M_ETAGO), paint(include, M_TAGNAME), => IN_CSL2H_2
/./ : paint(upto, CSL_OPERATOR), redo, => IN_CSL_DEFAULT
/\z/ : paint(upto, CSL_OPERATOR)

# This state here is to check for the closing '>'.
# Whether it's there or not we're going back to HTML

state IN_CSL2H_2:
/[$WS]/ : #stay
'>' : paint(upto, M_TAGSPACE), paint(include, M_ETAGC) => IN_M_DEFAULT
/./ : paint(upto, M_TAGSPACE), redo => IN_M_DEFAULT
/\z/ : paint(upto, M_TAGSPACE)

# Override std js lexer handling of //... line-comments
# to allow for an embedded </script> that ends both the
# comment and the script tag.

state IN_CSL_DEFAULT:
'//': paint(upto, CSL_DEFAULT), => IN_CSL_COMMENT_LINE_1

state IN_CSL_COMMENT_LINE_1:
/.*(?=<\/script>)/i : paint(include, CSL_COMMENT), => IN_CSL_COMMENTLINE_TO_MARKUP_1
/.*/ : paint(include, CSL_COMMENT), => IN_CSL_DEFAULT
/\z/: paint(upto, CSL_COMMENT)

state IN_CSL_COMMENTLINE_TO_MARKUP_1:
'</' : => IN_CSL2H_1
/.*/ : paint(include, CSL_COMMENT), => IN_CSL_DEFAULT

# Do same in block-comments and strings

state IN_CSL_COMMENT_1:
/<\/script>/i : paint(upto, CSL_COMMENTBLOCK), redo, => IN_CSL_COMMENT_TO_MARKUP_1

state IN_CSL_COMMENT_TO_MARKUP_1:
'</' : => IN_CSL2H_1
/./ : => IN_CSL_COMMENT_1  # Shouldn't happen
/\z/: paint(upto, CSL_COMMENTBLOCK)

state IN_CSL_DSTRING:
/<\/script\s*>/i : paint(upto, CSL_STRING), redo, => IN_CSL_DSTRING_TO_MARKUP_1

state IN_CSL_DSTRING_TO_MARKUP_1:
'</' : => IN_CSL2H_1
/./ : => IN_CSL_DSTRING  # Shouldn't happen
/\z/: paint(upto, CSL_STRING)

state IN_CSL_SSTRING:
/<\/script\s*>/i : paint(upto, CSL_STRING), redo, => IN_CSL_SSTRING_TO_MARKUP_1

state IN_CSL_SSTRING_TO_MARKUP_1:
'</' : => IN_CSL2H_1
/./ : => IN_CSL_SSTRING  # Shouldn't happen
/\z/: paint(upto, CSL_STRING) # 
