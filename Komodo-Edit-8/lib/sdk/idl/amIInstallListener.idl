/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is AddonManager XPCOM wrapper.
 *
 * The Initial Developer of the Original Code is
 * Mook <marky+mozhg@activestate.com>.
 * Portions created by the Initial Developer are Copyright (C) 2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

/* XPCOM wrapper for AddonManager InstallListener
 * @see https://developer.mozilla.org/en/Addons/Add-on_Manager/InstallListener
 */

interface amIAddon;
interface amIAddonInstall;

[scriptable, uuid(51401eb3-14f5-4c32-b713-ea308b844b2b)]
interface amIInstallListener: nsISupports {
    boolean onNewInstall(in amIAddonInstall install);
    boolean onDownloadStarted(in amIAddonInstall install);
    boolean onDownloadProgress(in amIAddonInstall install);
    boolean onDownloadEnded(in amIAddonInstall install);
    boolean onDownloadCancelled(in amIAddonInstall install);
    boolean onDownloadFailed(in amIAddonInstall install);
    boolean onInstallStarted(in amIAddonInstall install);
    boolean onInstallEnded(in amIAddonInstall install,
                           in amIAddon addon);
    boolean onInstallCancelled(in amIAddonInstall install);
    boolean onInstallFailed(in amIAddonInstall install);
    boolean onExternalInstall(in amIAddon addon,
                           in amIAddon existingAddon,
                           in boolean needsRestart);
};
