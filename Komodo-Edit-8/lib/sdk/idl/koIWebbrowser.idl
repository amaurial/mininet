/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

// An XPCOM interface to Python's std webbrowser.py
// XXX just the open_new() for now

#include "nsISupports.idl"

// Provides the URIs to Komodo files.
[scriptable, uuid(711CC13B-681C-4af1-8655-2624F6FC5629)]
interface koIWebbrowser : nsISupports {
    boolean open_new(in wstring url);
    boolean open_new_browser(in wstring url, in wstring browser);

    // Finding all installed browsers.
    // - Return a list of full local paths to browsers.
    void get_possible_browsers(out unsigned long count,
        [retval, array, size_is(count)] out wstring paths);
    // - Return a list of full local paths and a browser type (e.g. a
    //   short string like "firefox" or "opera").
    void get_possible_browsers_and_types(out unsigned long count,
        [array, size_is(count)] out wstring paths,
        [array, size_is(count)] out wstring types);

    void get_firefox_paths(out unsigned long count,
        [retval, array, size_is(count)] out wstring firefoxes);
    void install_firefox_xpis(in wstring firefox_path,
        in unsigned long count,
        [array, size_is(count)] in wstring xpi_paths);
};
