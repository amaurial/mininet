/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsIEnumerator.idl"

[scriptable, uuid(a2300c8e-bcac-4e8c-8983-d5e53361ddf4)]
interface koIHierarchyItem : nsISupports {
    attribute wstring name;
    attribute wstring key; // additional data value
    
    // Interpret available_types as a bitfield to indicate the availability
    // of the various item_* attributes e.g.
    // if (item.available_types & item.ITEM_STRING)
    //     // item.item_string is usable
    readonly attribute unsigned long available_types;
    const long ITEM_HAS_STRING = 1;
    const long ITEM_HAS_OBJECT = 2; 
    
    readonly attribute wstring item_string;
    readonly attribute nsISupports item_object;
    
    readonly attribute boolean container;    
    void getChildren([array, size_is(count)] out koIHierarchyItem hierarchyItem, out unsigned long count);
};
