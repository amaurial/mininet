/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2010
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "koIToolbox2HTreeView.idl"

/* Database accessor to the toolbox database
 *
 */

interface koITool;

[scriptable, uuid(42fb0d27-9792-4e41-8791-0cfcdafed35d)]
interface koIToolboxDatabaseService: nsISupports {
    // Path to a sqlite database
    void initialize(in wstring db_path);
    
    koITool getTool(in long id);
};


/* Light struct of koITool data for use by `.findTools()` below. Not returning
 * full `koITool` instances for perf (though that this might be a perf
 * problem hasn't been validated).
 */
[scriptable, uuid(29ee318b-a831-364f-9d48-aa54d4a0a1c9)]
interface koIToolInfo: nsISupports {
    readonly attribute long path_id;
    readonly attribute wstring type;
    readonly attribute wstring name;
    readonly attribute wstring iconUrl;
    readonly attribute koITool koTool;
    readonly attribute wstring subDir;
};

interface koIPart;

[scriptable, uuid(d4fd50c8-5b19-b041-97ad-2d8009f7de57)]
interface koIToolbox2Service: nsISupports {
    attribute koITool runningMacro;
    void activateProjectToolbox(in koIPart project);
    void deactivateProjectToolbox(in koIPart project);
    koITool getStandardToolbox();
    koITool getSharedToolbox();
    // Get a toolbox that an extension provides, if there is one
    // The extensionName argument is the [em:name] value from
    // the extension's install.rdf file.
    koITool getExtensionToolbox(in wstring extensionName); // The em:id from install.rdf
    long getProjectToolboxId(in wstring uri);
    long getStandardToolboxID();
    void importDirectory(in wstring parentPath,
                         in wstring pathToImport);
    void importFiles(in wstring parentPath,
                     in unsigned long count,
                     [array, size_is(count)] in wstring paths);
    void importFileWithNewName(in wstring parentPath,
                               in wstring srcPath,
                               in wstring destPath);
    void importV5Package(in wstring parentPath,
                         in wstring packagePath);
    void initialize();
    void migrateVersion5Toolboxes();
    void reloadToolsDirectory(in wstring toolDir);

    // Find and return all tools matching the given query.
    void findTools(in wstring query,
        in unsigned long langCount,
        [array, size_is(langCount)] in wstring langs,
        out unsigned long hitCount,
        [retval, array, size_is(hitCount)] out koIToolInfo hits);
    // Method that runs the query as is, and returns a list of koIToolInfo hits
    void getAutoAbbreviationNames(
        out unsigned long hitCount,
        [retval, array, size_is(hitCount)] out wstring hits);
};

