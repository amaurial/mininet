/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

/* *    Authors: David Ascher
   
   Interface to the ko.views.manager as a service.
*/

#include "nsISupports.idl"
#include "koIViews.idl"

[scriptable, uuid(2A0B0CE4-8A62-45A2-8AE8-BAE907D6C093)]
interface koIViewService : nsISupports
{
    void setViewMgr(in koIViewList viewMgr);

    /**
     * These two methods are used to keep track of the number of alive views.
     * When a view is created it is registered, then the view service holds a
     * weak reference to this view. Calling getReferencedViewCount will return
     * the number of these views that are still alive.
     */
    void registerView(in koIView view);
    long getReferencedViewCount();

    /**
     * Return all view instances for the given type. If viewtype is set, it
     * must be one of the know view types, i.e. "editor", "browser", etc...
     */
    void getAllViews(in AString viewtype,
                     out unsigned long count,
                     [array, size_is(count), retval] out koIView views);

    /**
     * Return all view instances for the given type. If viewtype is given, it
     * must be one of the know view types, i.e. "editor", "browser", etc...
     */
    void getAllViewMgrs(out unsigned long count,
                        [array, size_is(count), retval] out koIViewList viewMgrs);

    readonly attribute koIView currentView;
    readonly attribute koIView topView;
};

