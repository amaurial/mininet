/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

// A service to maintain the last error state on a per thread basis.
//
// This is similar in spirit to the Win32 API's SetLastError() and
// GetLastError() functions. It would not really be necessary if XPCOM
// currently had rich exceptions, but it does not.
//
// Usage:
//  - XPCOM methods should specify if they call setLastError() (on error
//    and/or success).
//  - User code can then query getLastError() if a calling function
//    returns a failure code or raises an exception.
//

#include "nsISupports.idl"

[scriptable, uuid(3DF4D9EF-FA13-4d30-B537-A1E0B9F2CAE6)]
interface koILastErrorService : nsISupports {
    // Set the last error for the calling thread.
    //  "code" is some arbitrary error number that might be useful for
    //      those calling getLastError, if it is not intended to be used
    //      then zero (0) should be used.
    //  "message" is a description of the error.
    void setLastError(in nsresult code, in wstring message);

    // Get the last error for the calling thread.
    // If no error has ever been set for this thread then (0, '') is
    // returned.
    void getLastError(out nsresult code, out wstring message);

    // Convenience functions because XPCOM methods with multiple out
    // parameters are a pain to use in JavaScript.
    nsresult getLastErrorCode();
    wstring getLastErrorMessage();
};

