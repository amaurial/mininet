/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "koIFinder.idl"


[scriptable, uuid(C2F74525-AB2A-46da-9D00-A805EB77E256)]
interface koIFindSession : nsISupports {
    // It is important to know when repeated "Find Next" calls and "Replace"
    // calls come full circle in the target file(s), because this is used to (1)
    // let the user know when we have searched through the whole file start
    // from their start position (useful feedback); and (2) let ReplaceAll know
    // when to stop (necessary to avoid an infinite loop when the replacement
    // string contains the find pattern). A FindSession provides this
    // information by tracking the "find session". Unfortunately the
    // semantics are not that clean. This is heavily tuned to the usage in
    // find_functions.js.

    // reset the find session (equivalent to creating a new instance)
    void Reset();

    void NoteUrl(in wstring url);
    void StartFind(in wstring pattern,
                   in wstring url,
                   in koIFindOptions options,
                   in unsigned long findStartPos,
                   in unsigned long findSelectionStartPos,
                   in unsigned long findSelectionEndPos,
                   in string mode);
    void NoteFind(in koIFindResult findResult);
    void StartReplace(in wstring pattern,
                      in wstring replacement,
                      in wstring url,
                      in koIFindOptions options);
    void NoteReplace(in koIReplaceResult replaceResult);
    void NoteReplaces(in unsigned long count,
                      [array, size_is(count)] in koIReplaceResult replaces);

    attribute boolean wrapped;
    boolean HaveSearchedThisUrlAlready(in wstring url);
    boolean WasAlreadyFound(in koIFindResult findResult);
    // Return true iff the given findResult overlaps a previous replace
    // result, i.e. is a find hit created by a replacement.
    boolean IsRecursiveHit(in koIFindResult findResult);

    // The current cursor and selection state in the current file when
    // searching began in the current file.
    attribute unsigned long fileStartPos;
    attribute unsigned long fileSelectionStartPos;
    attribute unsigned long fileSelectionEndPos;
    
    // The editor state when this find session began.
    attribute wstring firstUrl;
    attribute unsigned long firstFileStartPos;
    attribute unsigned long firstFileSelectionStartPos;
    attribute unsigned long firstFileSelectionEndPos;
    
    // Useful information for the UI.
    wstring GetPattern();
    wstring GetReplacement();
    unsigned long GetNumFinds();
    unsigned long GetNumReplacements();
    void GetFinds(out unsigned long count,
                  [retval, array, size_is(count)] out koIFindResult rv);
    void GetReplacements(out unsigned long count,
                         [retval, array, size_is(count)] out koIReplaceResult rv);
    koIFindResult GetLastFindResult();
};

