/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

/* *    Authors: David Ascher, Shane Caraveo
   
*/

#include "nsISupports.idl"
#include "koIFileEx.idl"

/*
  The koIFileService provides construction and caching of file objects.
  This can then be used by other services, such as the file status service
*/

[scriptable, uuid(F9E2D05A-B087-455B-9A62-78A095E92123)]
interface koIFileService: nsISupports
{
    koIFileEx getFileFromURI(in wstring URI);

    /* Same as getFileFromURI, but won't store/remember the file instance,
       which means that Komodo won't try to update the file status information
       for this path. */
    koIFileEx getFileFromURINoCache(in wstring URI);

    void getAllFiles([array, size_is(count)] out koIFileEx files,
                     out unsigned long count);
    koIFileEx findFileByURI(in wstring URI);

    void getFilesInBaseURI(in wstring path,
                     [array, size_is(count)] out koIFileEx files,
                     out unsigned long count);

    wstring makeTempName(in wstring suffix); 
    wstring makeTempNameInDir(in wstring dir, in wstring suffix); 
    koIFileEx makeTempFile(in wstring suffix, in string mode);
    koIFileEx makeTempFileInDir(in wstring dir, in wstring suffix, in string mode);
    void deleteAllTempFiles();
    void deleteTempFile(in wstring fname, in boolean remove_fname);

    wstring makeTempDir(in wstring suffix, in wstring prefix);
    wstring makeTempDirInDir(in wstring dir, in wstring suffix, in wstring prefix);
    void deleteTempDir(in wstring dname);
    void deleteAllTempDirs();
};
