/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIObserverService.idl"
#include "nsITreeView.idl"

interface koIProject;
interface koIPart;

[scriptable, uuid(1A75CE5D-D15B-11DA-9B14-000D935D3368)]
interface koIKPFTreeView : nsITreeView {
    void initialize();
    void terminate();

    // save tree-specific prefs for the project
    // this happens automatically when adding/removing a project in the tree
    void restorePrefs(in koIProject prj);
    void savePrefs(in koIProject prj);

    // Specify the sort order.
    // directions:
    //  0 = natural
    //  1 = normal
    //  -1 = reverse
    void sortBy(in wstring key, in long direction);
    readonly attribute long sortDirection;
    void sortRows();

    void addProject(in koIProject prj);
    void addProjectAtPosition(in koIProject prj, in long newProjectIndex);
    void addUnopenedProject(in koIProject prj);
    void addUnopenedProjectAtPosition(in koIProject prj, in long newProjectIndex);
    void removeProject(in koIProject prj);
    void clearTree();
    
    attribute nsIObserver statusObserver;
    
    // get/set the current project for the tree, throws an exception if
    // the project is not in the tree.
    attribute koIProject currentProject;
    
    // refreshes the rows in the tree.  This is not the same as invalidate, it
    // actually removes rows from the tree and regenerates the row list
    void refresh(in koIPart part);
    void removeItems([array, size_is(count)] in koIPart part,
                     in unsigned long count);
    void showChild(in koIPart parentPart, in koIPart part);
    
    void getSelectedItems(in boolean rootsOnly,
                          [array, size_is(count)] out koIPart child,
                          out unsigned long count);
    koIPart getSelectedItem();
    long    getIndexByPart(in koIPart part);
    koIPart getRowItem(in long index);
    koIPart getRowItemByURI(in wstring uri);
    void    selectPart(in koIPart part);
    
    // internal api
    void invalidate();
};

