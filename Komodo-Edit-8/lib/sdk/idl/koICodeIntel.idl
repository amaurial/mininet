/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsITreeView.idl"
#include "nsIDOMDocument.idl"

interface ISciMoz;
interface koIDocument;
interface koIShowsProgress;
interface koIProject;
interface koIPreference;
interface koICodeIntelBuffer;
interface koICodeIntelService;
interface koINotificationProgress;

[scriptable, uuid(8BFCA31B-3781-4F96-A7D2-60D6D6294889)]
interface koICodeIntelCatalogsTreeView : nsITreeView {
    void init(in koICodeIntelService ciSvc,
              in koIPreference prefSet,
              in wstring prefName);
    void save();

    // Note: Here "select" means the state of the "selected" column
    // rather than a UI row selection.
    void toggleSelection(in long row_idx);

    // Note: Here "select" means the UI-selection of rows.
    boolean areUISelectedRowsRemovable();

    koIShowsProgress addPaths(
        in unsigned long count,
        [array, size_is(count)] in wstring cix_paths);
    void post_add(
        in unsigned long count,
        [array, size_is(count)] in wstring added_cix_paths);

    koIShowsProgress removeUISelectedPaths();
    void post_remove(
        in unsigned long count,
        [array, size_is(count)] in wstring removed_cix_paths);

    readonly attribute wstring sortColId;
    readonly attribute wstring sortDirection;
};


[scriptable, uuid(C5B1B0AE-9374-488B-93E5-65A4A15322A8)]
interface koICodeIntelDefinition: nsISupports {
    readonly attribute wstring lang;       // e.g. "Python", "JavaScript"
    readonly attribute wstring path;       // file it's defined in
    readonly attribute wstring name;       // last piece of the ctdl_expr
    readonly attribute long line;          // line number in file
    readonly attribute wstring ilk;        // function, scope, class...
    readonly attribute wstring citdl;      // variable type
    readonly attribute wstring doc;        // Doc string
    readonly attribute wstring signature;  // If it's a function
    readonly attribute wstring attributes; // Any attributes, eg "local"
    readonly attribute wstring returns;    // Function return type
    readonly attribute long scopestart;    // Start of scope the variable is defined in
    readonly attribute long scopeend;      // End of scope the variable is defined in
    boolean equals(in koICodeIntelDefinition other);
    AString toString();
};

[scriptable, uuid(EC0B8148-8E12-43C2-8422-724E2478D884)]
interface koICodeIntelTrigger: nsISupports {
    //XXX Should add the TRG_FORM_* constants.

    readonly attribute wstring lang;    // e.g. "Python", "CSS"
    readonly attribute long form;       // TRG_FORM_CPLN or TRG_FORM_CALLTIP
    readonly attribute wstring type;    // e.g. "object-members"
    readonly attribute long pos;
    readonly attribute boolean implicit;
    readonly attribute long length;     // num chars of the trigger token
    readonly attribute long extentLength; // num bytes forward trigger covers

    readonly attribute wstring name;

    // When true, after a completion event occurs, codeintel will call
    // "trg_from_pos" again.
    attribute boolean retriggerOnCompletion;

    boolean is_same(in koICodeIntelTrigger trg);
};

// JS-implemented component to provide scintilla autocomplete/calltip UI
// handling for a view.
[scriptable, uuid(26c394d7-16e2-4e2e-b56a-efdfac368d47)]
interface koICodeIntelCompletionUIHandler : nsISupports {
    /**
     * Called by a koICodeIntelCompletionLanguageService (see
     * src/languages/ko*Language.py) to provide data for these UIs.
     */

    /**
     * Set autocomplete info for the user to choose from
     * @param completions {wstring} sorted completion strings
     * @param types {string} completion types (see
     *        koScintillaAutoCompleteController.js for a list of default ones)
     * @param trg {koICodeIntelTrigger} the trigger that caused autocompletion
     */
    void setAutoCompleteInfo([array, size_is(count)] in wstring completions,
                             [array, size_is(count)] in string types,
                             in unsigned long count,
                             in koICodeIntelTrigger trg);
    /**
     * Set calltip info, as a quick reference
     * @param calltip {AString} the calltip to display
     * @param trg {koICodeIntelTrigger} the trigger that caused the calltip
     * @param explicit {boolean} Whether the calltip was manually triggered by
     *        the user
     */
    void setCallTipInfo(in AString calltip,
                        in koICodeIntelTrigger trg,
                        in boolean explicit);
    /**
     * Set definition information
     * @param defns {koICodeIntelDefinition} array of definitions
     * @param trg {koICodeIntelTrigger} the trigger that caused the definition
     *        request
     */
    void setDefinitionsInfo(in unsigned long count,
                            [array, size_is(count)] in koICodeIntelDefinition defns,
                            in koICodeIntelTrigger trg);
    /**
     * Set CodeIntel-related status message
     * @param msg {AString} The message to display
     * @param hightlight {boolean} Whether the message should be highlighted
     */
    void setStatusMessage(in AString msg, in boolean highlight);

    /**
     * If there is an active calltip, then update it as necessary (i.e.,
     * the highlighted arg may need to change, perhaps it should be
     * canceled).
     */
    void updateCallTip();

    /**
     * Synchronously find and trigger the preceding autocomplete or calltip
     * trigger point. This searching should stop and the beginning of the
     * current statement.
     */
    void triggerPrecedingCompletion(in AString path);

    /**
     * Called when the evaluation has completed.
     */
    void done();
};

[scriptable, uuid(5B6F1D4D-FB32-4462-A3A7-E6FA2B9FE128)]
interface koICodeIntelEvalController: nsISupports {
    void set_ui_handler(in koICodeIntelCompletionUIHandler ui_handler);
    void start(in koICodeIntelBuffer buf,
               in koICodeIntelTrigger trg);

    boolean is_done();
    void abort();
    boolean is_aborted();

    //XXX May need special handling for "None" timeout. Say 0?
    void wait(in long timeout);

    /**
     * If true, no errors/warnings/status will be reported
     */
    attribute boolean silent;

    /**
     * If set, evaluating this will not first stop existing queued evals
     */
    attribute boolean keep_existing;
};

[scriptable, uuid(AA6B3D1B-BB61-4FFF-A0B0-98320C3C3EE6)]
interface koICodeIntelBuffer: nsISupports {
    readonly attribute wstring path;
    readonly attribute wstring lang;

    attribute koIProject project;  // The current Komodo project.

    readonly attribute wstring cpln_fillup_chars;
    readonly attribute wstring cpln_stop_chars;
    readonly attribute wstring scintilla_cpln_sep;
    readonly attribute long scintilla_cpln_sep_ord;
    
    koICodeIntelTrigger trg_from_pos(in long pos, in boolean implicit);
    koICodeIntelTrigger preceding_trg_from_pos(in long pos, in long curr_pos);
    void async_eval_at_trg(in koICodeIntelTrigger trg,
                           in koICodeIntelEvalController ctlr);

    koICodeIntelTrigger defn_trg_from_pos(in long trg_pos);

    void curr_calltip_arg_range(in long trg_pos,
                                in wstring calltip,
                                in long curr_pos,
                                out long start,
                                out long end);
};


[scriptable, uuid(f0396f8e-2d40-4c59-a616-ec1bcb41c07d)]
interface koICodeIntelManager: nsISupports {
};

[scriptable, uuid(2FDAB19C-B243-49C8-916C-BEAD369FCF97)]
interface koICodeIntelService: nsISupports {
    readonly attribute koICodeIntelManager mgr;

    // Handling upgrades of the CIDB.
    // Whenever the CodeIntel system is activated these should be used to
    // upgrade if necessary.
    boolean needToUpgradeDB();
    void upgradeDB();
    void resetDB();

    // Is the codeintel system enabled for this Komodo run?
    readonly attribute boolean enabled;
    // Has the codeintel backend being started yet? This can be delayed if,
    // e.g. upgrading of the codeintel db is being done.
    readonly attribute boolean isBackEndActive;
    // An error is set on koILastErrorService if backend activation fails.
    void activateBackEnd();

    // Request a scan of the given koIDocument.
    // ...
    // @param useFileMtime {boolean} indicates if the document file's
    //      mtime should be used for the scan request. If true, this
    //      typically means that the file won't be re-scanned if the
    //      database has already scanned the file with that mtime. To
    //      force a scan of *unsaved* changes, use false.
    void scan_document(in koIDocument document, in long linesAdded,
                       in boolean useFileMtime);

    koICodeIntelBuffer buf_from_koIDocument(in koIDocument doc);

    boolean is_cpln_lang(in wstring lang);
    void get_cpln_langs(out unsigned long count,
                        [array, size_is(count)] out wstring langs);
    boolean is_citadel_lang(in wstring lang);
    void get_citadel_langs(out unsigned long count,
                           [array, size_is(count)] out wstring langs);
    boolean is_xml_lang(in wstring lang);

    // Return the likely scope for the current file and line number.
    //  "path" is a full (absolute) path to the file.
    //  "line" is a 1-based line number.
    //
    // The first one is a rawer interface than the latter -- which is
    // intended for providing information for display in a UI.
    void getScopeForFileAndLine(in wstring path, in long line,
                                out string table, out long row);
    void getScopeInfoForFileAndLine(in wstring path, in long line,
                                    in string language,
                                    out string typeName,
                                    out wstring symbolName,
                                    out wstring imageURL,
                                    out wstring desc);

    // Versions of the getScope* methods above that apply heuristics to
    // try to adjust for recent edits -- where "recent" means since the last
    // scan.
    void getAdjustedCurrentScope(in ISciMoz scimoz,
                                 in long position,
                                 out long file_id,
                                 out string table,
                                 out long row);
    void getAdjustedCurrentScopeInfo(in ISciMoz scimoz,
                                     in long position,
                                     out string typeName,
                                     out wstring symbolName,
                                     out wstring imageURL,
                                     out wstring desc);

    // Return a list of likely members/calltips for the given expression
    // and scope.
    //
    //  "language" is a language name (e.g., "Python", "Perl") of the
    //      working file. This can be relevant for some things, e.g.
    //      import semantics.
    //  "path" and "line" together indicate the scope from which to
    //      interpret the expression. (However, see "scopeTable" and
    //      "scopeRow" below.)
    //  "citdl" is a CITDL expression identifying the object/symbol/type
    //      for which to return members.
    //  "explicit" is a boolean indicating if the user explicitly requesting
    //      this data. This affect how errors are handled.
    //  "scopeTable" and "scopeRow" (optional) can be passed it to express
    //      the scope more accurately (see getAdjustedCurrentScope()). Use
    //      NULL and 0 to mean that these are not being expressed.
    //  "content" (optional) is the file content. This may be used, if
    //      passed in, for fallback "dumb" completion handling.
    //
    void getMembers(in wstring language, in wstring path, in long line,
                    in wstring citdl, in boolean explicit,
                    in long scopeFileId, in string scopeTable, in long scopeRow,
                    in wstring content,
                    out unsigned long count,
                    [array, size_is(count)] out wstring types,
                    [array, size_is(count)] out wstring members);
    void getCallTips(in wstring language, in wstring path, in long line,
                     in wstring citdl, in boolean explicit,
                     in long scopeFileId, in string scopeTable, in long scopeRow,
                     in wstring content,
                     out unsigned long count,
                     [retval, array, size_is(count)] out wstring members);
    
    // Return a list of available modules to import under the given module
    // prefix.
    //
    //  "language" is a language name (e.g., "Python", "Perl") of the
    //      working file. This can be relevant for some things, e.g.
    //      import semantics.
    //  "module" is the current module prefix.
    //  "cwd" is the current working directory. This is sometimes required
    //      to resolve relative import paths.
    //
    void getSubimports(in wstring language,
                       in wstring module_,
                       in wstring cwd,
                       in boolean explicit,
                       out unsigned long count,
                       [retval, array, size_is(count)] out wstring subimports);

};

[scriptable, uuid(aca8a5c6-7ae2-4646-8706-e1e7790ee416)]
interface koICodeIntelDBPreloader : nsISupports {
    /**
     * A notification to indicate the preloading progress
     */
    readonly attribute koINotificationProgress notification;

    /**
     * Start the preloading.  Raises NS_ERROR_IN_PROGRESS if preloading is
     * already in progress.
     */
    void start();

    /**
     * Attempt to stop any currently running preloading.  Has no effect if
     * preloading is not currently in progress.
     */
    void cancel();
};
